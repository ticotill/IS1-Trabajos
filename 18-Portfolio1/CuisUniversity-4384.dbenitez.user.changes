

----QUIT----(2 October 2020 16:13:01) CuisUniversity-4384.image priorSource: 12433414!

----STARTUP---- (2 October 2020 16:13:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4384.image!


!testRun: #ArithmeticObjectIntervalStrategyTest #testSingleton stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAdd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAddToCollection stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testComparing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testCopyAndGrowBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDeepCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testFirst stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testIncludes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testLast stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReject stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverseDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSelect stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testShallowCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSize stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testStoreOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMax stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMin stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToYourself stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #NumberToArithmeticObjectAdapterTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #UndefinedArithmeticObjectValueExceptionTest #testSignal stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testConverging stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testEqual stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testGoing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testIsIncidentTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testStarting stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testGraphPathNotFoundException stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testInvalidPath stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToFarAwayPlaces stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToNeighborPlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testSamePlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testWithLoops stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testAccessImmutability stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testApplyUsingDepthFistSearch stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testConvergingEdges stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithInvalidEdge stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithUnconnectedNodes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testCreationImmutability stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEdgesConvergingToSelf stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqual stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqualsDifferentGraphs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testGraphCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testHash stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIncludesNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsAcyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsCyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesAdjacentTo stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNotEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodeWithInvalidNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodes stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testSameNodesAs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testStartingEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testCreateWithCyclicGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValue stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValueWithAnotherGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testWithGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameDomainDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testName stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameFor stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForUndefinedAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtBegin stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceToFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNext stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNextANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPrevious stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPreviousANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testRelativeDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAdd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddBags stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddEquality stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddExistingUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithBaseUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCompoundMeasureImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasuresCopiesCollection stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivideByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivision stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionDistributivity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeButRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testInvalidTruncated stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsCompoundMeasurement stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModulo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByZero stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationCommutativity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationDistributivity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedDistribution stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedZeroBag stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNumberOfMeasures stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainder stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtract stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractBags stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractEquality stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractExistingUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractNothing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithBaseUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroDivision stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroEqualsTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessingImmutability stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAddUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testBreakEquivalence stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testConvertsTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testDerivedUnitIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testFromToUse stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraph stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraphChange stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testNoUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testRemove stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testUnitConversionRuleUniqueness stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testMultiply stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testTruncated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCanConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCompoundMeasureConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testConvertToUsing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDefaultGraphPathFinder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testIndirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testInvalidConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testSameDomainConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDerivedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testName stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToIfSuccessfullDoIfFails stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConversionFactor stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDivideUnitSameDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDividedUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testAccessing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testEqual stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testHash stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testInvalidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testValidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAbs stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnitAndDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentBaseUnits stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddNumber stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFloat stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFraction stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToInteger stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAtBaseUnitIfNone stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testCompareGreaterThan stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertNothing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDenominator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureDerivedUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNothingWhenRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIntegerDivideCompoundMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidConvertTo stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanAgainstScalar stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByDividedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasureAssociativity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegative stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNumerator stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPositive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderCompoundMeasureByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsAddingWithZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsDividingFromZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractAssociativity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDividedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAt stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAtByNegative stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToBy stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToByDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToCollect stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToFirst stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToLast stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToSize stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testZeroIsEqualToTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testConvert stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocol stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocolBehavior stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testFrom stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToTheNextMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToThePreviousMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testDifferentMonth stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayMovesToTheThirdMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAdd stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAddRules stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAlwaysFulfills stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsOrderedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsSortedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testComposite stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testInvalidDo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveRule stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesCopy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesThatInclude stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSize stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSpecies stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testAccessing stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testEquals stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNextFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPreviousFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSaturday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSunday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testToday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testInstanceCreating stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testPrintString stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testName stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNegated stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAbsoluteDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAcceptAVisitor stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDefaultIntervalIncrement stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIntervalStrategy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEvery stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDay stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testReset stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddArgentineLaw23555Rule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddCardinalDayMonthRuleRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testFromString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNumberOfDaysBetweenTwoDates stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRulesThatIncludeADate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #UniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testIdentitySet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testOrderedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaSeparatedOnWorksAsCommaStringAnd stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenHasOneElement stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithAndWhenTwoOneElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithCommaButLastOneWithAndWhenMoreThanTwoElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageFailsWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyCalculatesItAsUsualWhenTheCollectionIsNotEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyEvaluatesEmptyBlockWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByHavingSelectsTheResultOfGroupBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByReturnsADictionaryThatGroupsACollectionByThePluggableKey stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testItMaintainsTheSameCollectionSpecies stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testSetEquality stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsASingleLevelOfElementsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsMoreThanTwoLevelsltReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringCollectionsItDoesNotFlattenTheStrings stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsTwoLevelsOfElementsItReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionIsEmptyItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testsAverageWorksWithABlock stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoShouldEvaluateBlockWithEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsTheFirstRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsTheLastRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #TextTest #testIsText stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #WeakIdentitySetTest #test stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToInstVarReturnsAccessReceiversBranch stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToIsEmptyForVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllBroadAccessToReturnsAccessInAllHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToFailsWhenWantsToStopOnInvalidSuperclass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToPutsFirstSuperclassesFirst stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToStopsOnRightClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHasReferencesToInstanceVariableNamedLooksInClassOnly stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsReceiverWhenNoOtherSuperclassImplementsSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsTheTopSuperclassImplementingSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingValuesIfNoneBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testIsInstanceVariableNamedReferencedInHierarchyLooksReferencesInHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testProtoObjectAllRegularInstVarNamesDoesNotFail stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testWithAllSuperclassesUpToIncludesReceiverClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithReplacesTheCategoryWithTheGivenOne stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithWorksWhenCategoryIsNil stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testDayOfWeek stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testIsDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testLessDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDate stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDuration stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DurationTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testEqual stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testSqueakInquiries stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testTimePartsArePositive stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimespanTest #testIsTimespan stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testWeekDayNames stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01isGetterWhenSameSelectorAsInstanceVariableAndOnlyReturnsThatVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01withPropertiesDoIfSelectorEvaluatesFirstBlockWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02isNotGetterWhenDifferentSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02removePropertiesRestoresPenultimalLiteralToSelector stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03isNotGetterWhenSameSelectorAsInstanceVariableButDoesOtherThingBesidesReturningVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03removePropertiesKeepsSelectorIfMethodDoesNotHaveProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04isSetterWhenSameKeywordSelectorAsInstanceVariableAndOnlySetsTheVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04withPropertiesDoIfSelectorEvaluatesSecondBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05hasLiteralSuchThatTravelsListeralsWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05isNotSetterWhenDifferentKeywordSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06hasLiteralSuchThatTravelsListeralsWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06isNotSetterWhenSameKeywordSelectorAsInstanceVariableButDoesNotAssignParameter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test0701withPropertiesDoReturnsNilIfMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07AccessorDescriptionIsGetterForAGetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07withPropertiesDoEvaluatesBlockOnlyWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08AccessorDescriptionIsSetterForASetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08hasLiteralThoroughReturnTrueWhenMethodHasPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09AccessorDescriptionIsReadForMethodThatReadsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09hasLiteralThoroughReturnFalseWhenMethodHasPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10AccessorDescriptionIsWriteForMethodThatWritesInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10hasLiteralThoroughReturnTrueWhenMethodHasNoPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11AccessorDescriptionIsWriteReadForMethodThatWritesAndReadInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11hasLiteralThoroughReturnFalseWhenMethodHasNoPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test12pragmaAtReturnsPragmaIfExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test13pragmaAtReturnsNilIfPragmaDoesNotExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test14pragmasReturnsCollectionOfMethodPragmas stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test15pragmasReturnsEmptyCollectionWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test16propertiesReturnsAnNewAdditionalMethodStateWhenNoPropertiesHasBeenSet stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test17propertiesReturnsTheAlreadySetAdditionalMethodStateWhenHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test18propertyKeysAndValuesDoIteratesOverProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test19propertyKeysAndValuesDoDoesNotEvaluateBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test20propertyValueAtReturnsPropertyValueWhenSetted stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test21propertyValueAtReturnsNilWhenPropertyIsNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test22propertyValueAtReturnsNilWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test23propertyValueAtIfAbsetReturnsPropertyValueWhenFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test24propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test25propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test26propertyValueAtPutCreatesPropertiesWithNewOne stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test27propertyValueAtPutReplacesPropertyIfAlreadyExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test28propertyValueAtPutAddsNewPropertyIfPropertiesExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test29selectorReturnsMethodSelectorWhenNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test30selectorReturnsMethodSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test31SettingSelectorWhenHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test32SettingSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testBounds stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiProcessWaitOnSameDelay stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiSchedule stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample1 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample2 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testMonitorNotGainingUnwantedSignalsDuringUnwinding stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #ProcessTest #testAtomicSuspend stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCritical stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCriticalIfError stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitAndWaitTimeoutTogether stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitTimeoutMSecs stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testBecome stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testShapeMutation stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testIsBoolean stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForCharacterNotIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForObjectsThatAreNotCharacters stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsTrueForCharacterIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessor stamp: 'HAW 10/2/2020 16:13:31'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForNoTimeout stamp: 'HAW 10/2/2020 16:13:33'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForTimeout stamp: 'HAW 10/2/2020 16:13:34'!
PASSED!

!testRun: #ProcessorTest #testValueUnpreemptively stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testCollectionAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testNumberAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFont stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFontSanity stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentValuesIfAbsentBlockWhenNoAntepenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsBiggerThanSize stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsLessThanOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightLoosesLastElementAndKeepsPreviousOnes stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesElementWhenSizeIsOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesLastElementWhenInsertingAtLastIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsArray stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyReturnsLastWhenExist stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyValuesEmptyBlockWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastSignalsErrorWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentValuesIfAbsentBlockWhenNoPenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testIsType stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testSum stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testBlockClosuresCanBeUsedAsHandlingCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testExceptionsFollowTheExpectedHierarchy stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testFilterConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testOrConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleOuterPass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoublePassOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testHandlerFromAction stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNoTimeout stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAsUnwinds stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSignalFromHandlerActionTest stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsure stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithError stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithNotification stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithUparrow stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleIsNested stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimplePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetry stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetryUsing stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleReturn stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testTimeoutWithZeroDuration stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testSchedulerTermination stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testTerminationDuringUnwind stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromActiveProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromForeignProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testIsArray stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testReservedIdentifiers stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testSymbols stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test01isAtSuperclassWhenIndexIsInSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test02isNotAtSuperclassWhenIndexIsOutsideSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test03isAtClassNameWhenIndexIsInClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test04isNotAtClassNameWhenIndexIsOutsideClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test05isAtInstanceVariablesWhenIndexIsInInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test06isNotAtInstanceVariablesWhenIndexIsOutsideInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test07CanAccessSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test08isAtCategoryWhenIndexIsInCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test09isNotAtCategoryWhenIndexIsOutsideCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test10InstanceVariablesIsTheSecondParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test11CategoryIsTheFifthParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockDoitDecompilation stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumbering stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumberingForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testDebuggerTempAccess stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompilationsEncoderForV3PlusClosures stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompiledDebugs stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionEM1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR2 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR3 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionSD1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForClosureBytecodeInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testTempNameAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample01 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample02 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample03 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample04 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample05 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample06 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample07 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample08 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample09 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample10 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample11 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testCopyNonLocalReturn stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testIsTrivialClosure stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgumentNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfterNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBefore stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBeforeNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTemp stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTempNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ContextCompilationTest #testVariablesAndOffsetsDo stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorClass stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorEqEq stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorInstVarAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorPerform stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorSize stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParseNodeEnumeratorTest #testItEnumeratesAllTheParseNodesPresentInAMethodNode stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInABlock stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInAMethod stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesAnEmptyTempsDeclarationNodeForAMethodWithoutTemps stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testRangesAreOkWhenReturningAVariableWithoutSpaceAfterThat stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test1 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test2 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test3 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test4 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test5 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test6 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ScannerTest #testLiteralSymbols stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test01TryingToTrimAnAlreadyTrimmedIntervalThatRepresentsASmalltalkExpressionDoesNotChangeTheOriginalInterval stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test02StartingAndEndingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test03StartingAndEndingDotsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test04GroupsOfParenthesesAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test05GroupsOfParenthesesIncludingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test06AnIntervalThatDoesNotHaveCharactersToExpandRemainsTheSame stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test07AnIntervalEnclosedByParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test08AnIntervalWithParenthesesOnJustOneSideCannotBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test09AnIntervalEnclosedByBackticksCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test10AnIntervalEnclosedMultipleBackticksAndParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test11AsSourceCodeIntervalMessageDoesNotCreateANewSourceCodeIntervalInstance stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileIOAccessorTest #testDirectoryExists stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAbsolutePath stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAtPut stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testConcatenation stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testCopy stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testDefaultDirectory stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testFileContents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsAbsolutePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsRelativePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPathComponents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPipe stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRecursiveDelete stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRefresh stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRename stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRoot stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testStream stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testChangesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFileIndexFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFilePositionFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcePointerFromFileIndexAndPosition stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #SystemConsistencyTest #testMethodsWithUnboundGlobals stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeDicionary stamp: 'HAW 10/2/2020 16:13:45'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeSet stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForObjectsThatAreNotString stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForStringsNotIncluded stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsTrueForIncludedStrings stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration2 stamp: 'HAW 10/2/2020 16:13:49'!
PASSED!

!testRun: #TrieTest #testRemoveLikeDicionary stamp: 'HAW 10/2/2020 16:13:53'!
PASSED!

!testRun: #TrieTest #testRemoveLikeSet stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #TrieTest #testSetProtocol stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbAdd stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMax stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMin stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMinInvert stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMul stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbSub stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing2 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA62 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #JpegTest #testGrayBA63 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout1 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout2 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout3 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicLocationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #WorldTest #testDoOneCycleWorksWithDeferredQueue stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testClassSingleton stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testHorizontalAlignment stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testWidth stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesByPassesWhenActionChangesConditionByTheSpecifiedAmount stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesFromToPassesWhenActionChangesConditionFromAndToTheSpecifiedValues stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesPassesWhenConditionIsAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertDoeNotChangePassesWhenConditionIsNotAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesFailsWhenElementIsNotIncludedInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesShouldNotFailWhenElementIsInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesForSameNumberDifferentToZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWhenBothAreZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWithSameCalculatedNumber stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsNegativeAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsPositiveAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsNotCloseWithPrecisionPassesWhenDifferenceIsBiggerThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testIsTestCase stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailErrorsWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailPassesWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanFailsWhenClosureTakesMoreThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanPassesWhenClosureTakesLessThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoCanExpectException stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenNoExceptionIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenOtherExceptionTypeIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoPassSignaledExceptionToAssertionsBlock stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoValuesAssertionsBlockWhenExceptionIsRaised stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextDoesNotFailWithRightMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextFailsWithDifferentMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailErrorsWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailPassesWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test01SuiteForTestCaseClassHasTheSameTestAsCreatingTheSuiteFromTheTestCaseClass stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test02SuiteForNoTestCaseClassUsesTestClassWithSameNameEndingWithTest stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test03SuiteForNoTestCaseClassAndNoTestClassLooksForReferencesInTests stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test04SuiteForTestMethodIncludesOnlyTheMethod stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test05SuiteForNoTestMethodIncludesTestCaseSendingTheCompiledMethodSelector stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test06ForSystemCategoryWithTestCasesIncludesOnlyTestCasesClasses stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test07ForSystemCategoryWithNoTestCasesIncludesTestClassesTests stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test08ForMessageCategoryContainingTestCasesIncludesThoseTestCases stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test09ForMessageCategoryWihoutTestIsEmpty stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test10CanNotDebugAsFailureQuickMethods stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters2 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCode stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testLines stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testWords stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test1ReadBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test2ReadWithOutBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test3ReadUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test4BackConversion stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test5ReadWriteUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixReal stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixSimply stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingBasic stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedInner stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedOuter stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingRepeat stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testIsStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsFalseDoesNotPutANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsTruePutsANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsTruePutSpacesInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsTruePutsTabsInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorTest #testIsColor stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #RectangleTest #testIsRectangle stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorFormTest #testIsColorForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #GrayFormTest #testIsGrayForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WeakMessageSendTest #testIsMessageSend stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test01DefaultStringVersionIsClassAndSelector stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test02CanPrefixStringVersion stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentReturnsClassIfClassExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnNilWhenClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnsClassIfExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenActualClassIsNil stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentReturnsImplementedMethodWhenItExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsFalseWhenInvalid stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsTrueWhenTheParameterIsReferenced stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentReturnsSourceCodeIfExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeReturnsSourceCodeIfMethodExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidBinarySelectorIfItContainsACharacterNotAllowed stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidKeywordSelectorIfItContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItContainsCharactersUsedInBinarySelectors stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItStartsWithALetterAndContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidBinarySelectorIfItContainsAnAllowedCharacterOrSequenceOfCharacters stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidKeywordSelectorIfItContainsKeywordsWithColons stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidUnarySelectorIfItStartsWithALetterAndDoesNotContainSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'HAW 10/2/2020 16:14:07'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectRenameMethodApplierTest #test01ScopeOptionsAreTheSame stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test01IsDenotativeObjectNamedReturnsTrueForADenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test02IsDenotativeObjectNamedReturnsFalseForANoDenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithFraction stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithNumbers stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #TestChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testE stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testAndSingleBitWithMinusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testLargeShift stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testMixedSignDigitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNBitAndNNegatedEqualsN stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNNegatedEqualsNComplementedPlusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftMinusOne1LeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftOneLeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesAAtoAM stamp: 'HAW 10/2/2020 16:14:26'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesANtoAZ stamp: 'HAW 10/2/2020 16:14:27'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBAtoBM stamp: 'HAW 10/2/2020 16:14:28'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBNtoBZ stamp: 'HAW 10/2/2020 16:14:29'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCAtoCM stamp: 'HAW 10/2/2020 16:14:31'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCNtoCZ stamp: 'HAW 10/2/2020 16:14:34'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDAtoDM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDNtoDZ stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesEAtoEM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesENtoEZ stamp: 'HAW 10/2/2020 16:14:37'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFAtoFM stamp: 'HAW 10/2/2020 16:14:39'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFNtoFZ stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGAtoGM stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGNtoGZ stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHAtoHM stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHNtoHZ stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesIAtoIM stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesINtoIZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJAtoJM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJNtoJZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKAtoKM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKNtoKZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLAtoLM stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLNtoLZ stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMAtoMM stamp: 'HAW 10/2/2020 16:14:47'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMNtoMZ stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNAtoNM stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNNtoNZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesOAtoOM stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesONtoOZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPAtoPM stamp: 'HAW 10/2/2020 16:14:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPNtoPZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQAtoQM stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQNtoQZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRAtoRM stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRNtoRZ stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSAtoSM stamp: 'HAW 10/2/2020 16:14:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSNtoSZ stamp: 'HAW 10/2/2020 16:14:57'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTAtoTM stamp: 'HAW 10/2/2020 16:14:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTNtoTZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUAtoUM stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUNtoUZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVAtoVM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVNtoVZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWAtoWM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWNtoWZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXAtoXM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXNtoXZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYAtoYM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYNtoYZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZAtoZM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZNtoZZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testRemoteTemp stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:09'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:09'!
griffle [ var1 := 1. goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsMoreThanOneUndeclaredVariableCorrectlyInBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:10'!
griffle [|var1| var1 := 1.goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:10'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresAnArgumentAlready stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | | | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresArgumentsAndTempDeclarationPipesWithNoTemps stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:12'!
griffle var1 := 1. [ goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodAndInBlock stamp: 'HAW 10/2/2020 16:15:12'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle |var1| var1 := 1.goo := 1.^ goo + var1! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle [|goo| goo := 1. ^goo ]. [goo1:=1.^ goo1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableInRightBlock stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:14'!
griffle [ :var1 | | foo | foo := 2. goo := 1.^ goo + var1 + foo ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableWithAnArgumentAndTempAlreadyInBlock stamp: 'HAW 10/2/2020 16:15:14'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:15'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testCanNotDefineVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveMoreThanOneExpressionInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveReturnInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSelfInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSuperInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceTempVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceThisContextInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:17'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:17'!
griffle [ | goo | ]. [ | goo | ]! !

!testRun: #CompilerTest #testDoesNotConfusesVariablesWithSameNameOfDifferentBlocksWhenRemoving stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:18'!
griffle | goo |! !

!testRun: #CompilerTest #testDoesNotRemoveUnusedVariableIfSaidSo stamp: 'HAW 10/2/2020 16:15:18'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle | goo a | a := 1. ^a! !

!testRun: #CompilerTest #testKeepsVariableDefinitionWhenThereAreUsedTemporaries stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle [ | goo | ]! !

!testRun: #CompilerTest #testRemovesUnusedVariablesFromBlocks stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:20'!
griffle | goo |! !

!testRun: #CompilerTest #testRemovesVariableDefinitionWhenNoMoreUnusedTemporaries stamp: 'HAW 10/2/2020 16:15:20'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle [ || goo := 1.^ goo ]! !

!testRun: #CompilerTest #testReusesBlockTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle || goo := 1.^ goo! !

!testRun: #CompilerTest #testReusesMethodTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndeclaredVariableIsSignaledForUndeclaredVariables stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndefinedVariableIsSignaledForVariablesDefinedButNotInitialized stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnknownSelectorIsSignalForMessagesSendNotImplemented stamp: 'HAW 10/2/2020 16:15:23'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnusedVariableIsSignaledForUnusedVariables stamp: 'HAW 10/2/2020 16:15:24'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:25'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test01ScanNewClassChange stamp: 'HAW 10/2/2020 16:15:25'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02AddingANewMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02ScanNewMethodChange stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:27'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ChangingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:27'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ScanMethodModifiedChange stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04RemovingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:29'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04ScanMethodRemovalChange stamp: 'HAW 10/2/2020 16:15:29'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:30'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test05RemovingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:30'!
PASSED!

!testRun: #ChangesTest #test05ScanClassRemovalChange stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!testRun: #ChangesTest #test06RenamingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test06ScanClassRenamedChange stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!testRun: #GreenTest #test01WhenANewTestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:15:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test02WhenAProductionMethodIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:34'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test03WhenAProductionMethodIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:34'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test04WhenAProductionClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:35'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test05WhenAProductionClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!testRun: #GreenTest #test06WhenATestIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:37'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test07WhenATestPassesNothingHappens stamp: 'HAW 10/2/2020 16:15:37'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:38'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test08WhenAMethodIsRemovedIsRefactoring stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:38'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:39'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test10WhenATestIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:39'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:40'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test12WhenATestIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:41'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:41'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test13WhenATestClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:42'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test14WhenATestClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:43'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test15WhenATestClassIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:43'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:44'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test01WhenAClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:44'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:46'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test04WhenAnotherTestIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:46'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test05WhenAMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:47'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:48'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test06WhenAModelMethodIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:48'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:49'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test07WhenAModelClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:49'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:50'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test08WhenAModelMethodIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:51'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:51'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test09WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test10WhenATestClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test12WhenAnotherTestIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test13WhenATestFailsAnErrorIsReportedAndGoesToRed stamp: 'HAW 10/2/2020 16:15:55'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test14WhenOneOfTheTestsPassesTwoErrorsAreReported stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test16WhenOneOfTheTestsIsRenamedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:57'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test17WhenAnotherTestIsRenamedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:58'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test18WhenATestUtilityIsChangedNothingHappens stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test01WhenAProductionClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:00'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test02WhenAProductionMethodIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:00'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test03WhenATestIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:01'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
TestCase subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test04WhenATestClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test05WhenATestIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test06WhenAProductionMethodIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:03'!
PASSED!

!classRemoval: #ProductionClassA stamp: 'HAW 10/2/2020 16:16:04'!
Object subclass: #ProductionClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test07WhenAClassIsRemovedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!testRun: #NotDoingTDDTest #test08WhenThereIsOneTestAndPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:05'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:06'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:06'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test11WhenATestIsRenamedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:08'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:08'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:09'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:09'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:10'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test15WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:10'!
PASSED!

!testRun: #NotStartedTest #test01WhenNoChangesAreDoneThenNothingHappens stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!testRun: #NotStartedTest #test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:12'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test03WhenATestClassIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:12'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:13'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test04WhenAProductionMethodIsAddedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:13'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test05WhenAMethodIsChangedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:14'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test06WhenATestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:14'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:15'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test07WhenAClassIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:15'!
PASSED!

!testRun: #NotStartedTest #test08WhenAMethodIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:16'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test09WhenAllTestsPassThenIsInGreenState stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:17'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test10WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:16:17'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:18'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test11WhenATestHasAnErrorThenIsInRedState stamp: 'HAW 10/2/2020 16:16:18'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test12WhenATestIsChangedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test13WhenATestIsRenamedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test01ShouldIgnoreDoIts stamp: 'HAW 10/2/2020 16:16:20'!
PASSED!

!testRun: #OtherTest #test02ResultKnowsTheChangesThatWereDone stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:21'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test03TDDStateForEachChange stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:22'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test04TestRenamesAreGroupedInASingleChange stamp: 'HAW 10/2/2020 16:16:22'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:23'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test05TestsWithSameNameInDifferentClassesAreDifferent stamp: 'HAW 10/2/2020 16:16:23'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test06WhenATestHasAnErrorThisTestDoesNotFail stamp: 'HAW 10/2/2020 16:16:24'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:25'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test07RunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:25'!
PASSED!

!classRemoval: #ExampleClass stamp: 'HAW 10/2/2020 16:16:25'!
Object subclass: #ExampleClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test08ReRunTheWholeAnalysis stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test09ReRunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:27'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:27'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test10ChangeWhenAMethodWasAdded stamp: 'HAW 10/2/2020 16:16:27'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:28'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test01WhenAProductionClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:28'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:29'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:29'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test02WhenAProductionMethodIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:29'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:30'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:30'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test03WhenTheTestPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:30'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:31'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:31'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test04WhenTheTestFailsIsStillInRed stamp: 'HAW 10/2/2020 16:16:31'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:32'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:32'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test05WhenAProductionMethodIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:32'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:33'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed stamp: 'HAW 10/2/2020 16:16:34'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:34'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:34'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test07WhenAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:35'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:35'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test08WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:36'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:37'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:37'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:37'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test10WhenAModelMethodIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:38'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:38'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:38'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenAModelClassIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:39'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:39'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenATestClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:40'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test12WhenTheTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:41'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:41'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:41'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test13WhenAnotherTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:42'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:43'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:43'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:44'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test01WhenAProductionMethodIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:44'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test02WhenAProductionMethodIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:45'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test03WhenAProductionClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:46'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test04WhenATestIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test05WhenATestIsRenamedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:47'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test06WhenATestClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test08WhenAllTestPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:49'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test09WhenOneOfTheTestFailsThenIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:50'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test10WhenAClassIsRemovedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!testRun: #RefactorTest #test11WhenAProductionMethodIsRemovedStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:52'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test14WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:54'!
PASSED!

!testRun: #RefactorTest #test15WhenAModelMethodIsAddedButNotUsedThereIsAnError stamp: 'HAW 10/2/2020 16:16:55'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:55'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:56'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:56'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:57'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:57'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError stamp: 'HAW 10/2/2020 16:16:58'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:59'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor stamp: 'HAW 10/2/2020 16:16:59'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:00'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:00'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:00'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:01'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:01'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:01'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:02'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError stamp: 'HAW 10/2/2020 16:17:02'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:03'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount stamp: 'HAW 10/2/2020 16:17:03'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:04'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:04'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid stamp: 'HAW 10/2/2020 16:17:04'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:05'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test01WhenTheTestIsChangedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:05'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:06'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:06'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:17:07'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test03WhenATestClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:07'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test04WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:08'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:08'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:09'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:09'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:09'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:10'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test07WhenAModelMethodIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:10'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:11'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:11'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:11'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:13'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:13'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test12WhenADifferentTestIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:14'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:15'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:15'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test14WhenAModelMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:16'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:17'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:17'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test15WhenTheTestIsRemovedThenIsInGreen stamp: 'HAW 10/2/2020 16:17:17'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test16WhenATestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:18'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test17WhenAModelClassIsRemovedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:19'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:20'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test20WhenAFirstTestIsAddedIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:21'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:22'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:22'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:23'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:24'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:24'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:25'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:25'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test23WhenATestClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:26'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:26'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test01RunningAPassingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:27'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test02RunningAFailingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:28'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test03RunningATestWithAnErrorShouldBeLogged stamp: 'HAW 10/2/2020 16:17:28'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:29'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod stamp: 'HAW 10/2/2020 16:17:29'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:30'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:30'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded stamp: 'HAW 10/2/2020 16:17:30'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:31'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:31'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test06WhenAMethodIsChangedItIsNotConsideredOverriden stamp: 'HAW 10/2/2020 16:17:31'!
PASSED!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:32'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test01ScanPassingTestChange stamp: 'HAW 10/2/2020 16:17:32'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:33'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test02ScanFailedTestChange stamp: 'HAW 10/2/2020 16:17:33'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test03ScanNewTestClass stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test04ScanOverridenMethod stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:35'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:35'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test05ScanAMethodThatIsNotOverriden stamp: 'HAW 10/2/2020 16:17:35'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:36'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:36'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #BlockNodeTest #testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #BlockNodeTest #testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItReferencesSelfWhenTheVariableNameIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test01NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test02NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test03NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test04ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:38'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test05NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:17:39'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:17:40'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test08AddCreatesNewInstanceVariable stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:41'!
m1 | a | a := 10.! !

!testRun: #AddInstanceVariableTest #test09FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:42'!
m1:a! !

!testRun: #AddInstanceVariableTest #test10FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:42'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ :a | ] value: 1! !

!testRun: #AddInstanceVariableTest #test11FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ | a | ] value! !

!testRun: #AddInstanceVariableTest #test12FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:44'!
m1 | a | ! !

!testRun: #AddInstanceVariableTest #test13FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:17:44'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test14NewVariableNameCanNotBeAReservedName stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45' prior: 50846537!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:45'!
m1!

!testRun: #AddParameterTest #test01AddingParameterToUnaryMessageAddsColonAndParameter stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46' prior: 50846576!
sender_m1 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam!

!testRun: #AddParameterTest #test02AddingParameterToKeywordMessageAddsNewKeywordAndParameter stamp: 'HAW 10/2/2020 16:17:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846616!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test03AddingParameterToKeywordMessageMultipleSendsInSameMethodSameLiteral stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846657!
sender_m1 self m1: self size m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test04AddingParameterToKeywordMessageWithMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48' prior: 50846698!
sender_m1 self m1: self size + 4 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam!

!testRun: #AddParameterTest #test05AddingParameterToKeywordMessageWithBinaryMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846739!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam!

!testRun: #AddParameterTest #test06AddingParameterToKeywordMessageWithKeywordMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846780!
sender_m1 #m1: size! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:49'!
m1!

!testRun: #AddParameterTest #test07AddingParameterToUnaryMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50' prior: 50846819!
sender_m1 #m1:m2: size.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam!

!testRun: #AddParameterTest #test08AddingParameterToKeywordMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test09FailsIfNewParameterValueCanNotBeCompiled stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test10FailsIfNewParameterValueIsEmpty stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test11NewParameterNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test12NewParameterNameCanNotStartWithNumber stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test13NewParameterNameCanNotContainSpaces stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:53'!
m1! !

!testRun: #AddParameterTest #test14NewParameterCanNotBeDefinedAsInstanceVariableInAnyImplementor stamp: 'HAW 10/2/2020 16:17:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:54'!
m1:newParam! !

!testRun: #AddParameterTest #test15NewParameterCanNotBeDefinedAsParameterInAnyImplementor stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test16WhenCreatedForUnarySelectorMustBeUnary stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!testRun: #AddParameterTest #test17WhenCreatedForBinarySelectorMustBeBinary stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test18CanNotAddParameterToBinaryKeyword stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test19AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test20AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test21NewKeywordToAddToOldSelectorCanNotBeUnary stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test22NewKeywordToAddToOldSelectorCanNotBeBinary stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!testRun: #AddParameterTest #test23NewKeywordToAddToOldSelectorCanNotBeKeywordWithMoreThanOneParameter stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846954!
sender_m1 self m1: 1
	! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test24AddingParameterToSendersTakeCaresOfSeparators stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846991!
sender_m1 self m1: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test25IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForUnaryMessages stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59' prior: 50847031!
sender_m1 self m1: 1 m2: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam!

!testRun: #AddParameterTest #test26IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForKeywordMessages stamp: 'HAW 10/2/2020 16:17:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test27NewParameterValueCanNotHaveMoreThanOneStatement stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00' prior: 50847076!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam!

!testRun: #AddParameterTest #test28WhenSenderLastParameterIsABlockAddedParameterIsNotAddedInsideTheBlock stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847117!
sender self m2: 2 m1: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1!

!testRun: #AddParameterTest #test29AddingParameterAsFirstOneWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847155!
sender self m1: 1 m2: 2 m3: 3! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test30AddingParameterInTheMiddleWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02' prior: 50847195!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test31AddingParameterInTheMiddleWithManySendersWorksAsExpected stamp: 'HAW 10/2/2020 16:18:02'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test32IndexCanNotBeLessThanOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test33IndexCanNotBeBiggerThanNumberOfParametersPlusOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test34IndexMustBeInteger stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04' prior: 50847247!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:18:04'!
m1

!

!testRun: #AddParameterTest #test35AddingParameterRetractsInsertionPointWhenAtInsertionPointIsANewLine stamp: 'HAW 10/2/2020 16:18:04'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test36ParentesisAreAddedToSendersOfUnaryMessage stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test01CannotChangeSelectorOrderInUnaryMessages stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test02CannotChangeSelectorOrderInBinaryMessages stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test03CannotChangeSelectorOrderInKeywordMessagesWithOneParameterOnly stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:06'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test04ChangesKeywordsOrder stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test05ChangesParametersOrder stamp: 'HAW 10/2/2020 16:18:07'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test06NewSelectorMustIncludeOldSelectorKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m2: p2 m3: p3 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2:m3: stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3!

!testRun: #ChangeKeywordsSelectorOrderTest #test07ChangesKeywordsAndParametersOrderForMoreThanTwoKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:10'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:12'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:12'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14' prior: 50847702!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'HAW 10/2/2020 16:18:14'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'HAW 10/2/2020 16:18:16'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:18'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18' prior: 50847918!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'HAW 10/2/2020 16:18:18'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'HAW 10/2/2020 16:18:19'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50847995!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50848038!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:21'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21' prior: 50848082!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'HAW 10/2/2020 16:18:21'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848125!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848169!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:23'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23' prior: 50848212!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'HAW 10/2/2020 16:18:23'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:18:25'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848359!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848403!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'HAW 10/2/2020 16:18:27'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848483!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848528!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:29'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29' prior: 50848570!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'HAW 10/2/2020 16:18:29'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30' prior: 50848615!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:30'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31' prior: 50848659!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:32'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848775!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848819!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34' prior: 50848861!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'HAW 10/2/2020 16:18:34'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'HAW 10/2/2020 16:18:36'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test01NewVariableCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test02NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:38'!
m1 | new | ^ 2! !

!testRun: #ExtractToTemporaryTest #test03NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:18:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test04FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:40'!
AnObsoleteClassToRefactorSuperclass subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:40'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test06SourceCodeToExtractCanNotIncludeReturn stamp: 'HAW 10/2/2020 16:18:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:41'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test07SourceCodeToExtractCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 ^ 1 + 3! !

!testRun: #ExtractToTemporaryTest #test08SourceCodeToExtractCanNotHaveSyntaxErrors stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 1+2. 3+4! !

!testRun: #ExtractToTemporaryTest #test09SourceCodeToExtractHasToBeOneStatement stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:43'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test10FailsIfIntervalToExtractIsBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test11FailsIfIntervalToExtractIsAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44' prior: 50849298!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test12ItIsPossibleToExtractASingleLiteralFromAMethodWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45'!
m1

	| four |
	four _ 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45' prior: 50849328!
m1

	| four two |
	four _ 4.
	two _ 2.
	^ four + two! !

!testRun: #ExtractToTemporaryTest #test13ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAlreadyOtherTemporary stamp: 'HAW 10/2/2020 16:18:45'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849360!
m1

	| f |
	f _ 3 factorial.
	^ f! !

!testRun: #ExtractToTemporaryTest #test14ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAnEmptyTemporariesDeclaration stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849392!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test15ItIsPossibleToExtractCodeAndGenerateAssignmentUsingAnsiAssignmentStyle stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47' prior: 50849422!
m1

	^ [ | new |
	new _ self m2 ]! !

!testRun: #ExtractToTemporaryTest #test16ItIsPossibleToExtractASingleLiteralFromABlockWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:47'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test17CannotExtractPartOfMethodName stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ self m2! !

!testRun: #ExtractToTemporaryTest #test18CannotExtractPartOfMessageSend stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49' prior: 50849501!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test19ItIsPossibleToExtractAnIntervalWithSomeExtraSpaces stamp: 'HAW 10/2/2020 16:18:49'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50' prior: 50849531!
m1

	| new |
	new _ [].
	^ new! !

!testRun: #ExtractToTemporaryTest #test20ItIsPossibleToExtractAnEmptyBlock stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1 | existing | existing := 2! !

!testRun: #ExtractToTemporaryTest #test21CannotExtractLeftSideOfAssignment stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51' prior: 50849585!
m1

	| new |
	new _ 3 factorial; yourself.
	^ new! !

!testRun: #ExtractToTemporaryTest #test22ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:51'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849616!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849620!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849624!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849628!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849632!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test23CannotUseAReservedNameAsTheNewTemporaryVariable stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849661!
m1

	| action |
	action _ self run! !

!testRun: #ExtractToTemporaryTest #test24WhenExtractingAnEntireStatementItOnlyGeneratesTheVariableAssignment stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:53'!
m1: arg ^ self! !

!testRun: #ExtractToTemporaryTest #test25CannotExtractArgumentNamesFromMethodSignature stamp: 'HAW 10/2/2020 16:18:53'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test01ChangesTheSuperclassOfTheClassToRefactor stamp: 'HAW 10/2/2020 16:18:54'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test02ClassToRefactorStructureIsMaintained stamp: 'HAW 10/2/2020 16:18:55'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'private'
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test03NewSuperclassCategoryIsTheSameAsClassToRefactorCategory stamp: 'HAW 10/2/2020 16:18:56'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test04NewSuperclassHasNoVariables stamp: 'HAW 10/2/2020 16:18:57'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test05NewSuperclassShouldNotExist stamp: 'HAW 10/2/2020 16:18:58'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AlreadyExistingClass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test06NewSuperclassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!testRun: #InsertSuperclassTest #test07NewSuperclassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test08WhenAppliedToMetaclassWorksAsWithClass stamp: 'HAW 10/2/2020 16:19:00'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test09NewSuperclassNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!testRun: #InsertSuperclassTest #test10NewSuperclassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:01'!
newMethod ^a! !

!testRun: #MoveToInstanceOrClassMethodTest #test01CannotMoveWhenReferencingInstanceVariables stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: 'ClassToMoveMethod class' category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
ClassToMoveMethod class
	instanceVariableNames: 'a'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:02'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test02CannotMoveToClassWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:02'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:03'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test03CannotMoveToInstanceWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:03'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test04InstanceMethodIsMovedToClassMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod class #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test05ClassMethodIsMovedToInstanceMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test01AnInstanceVariableDoesNotExistOnClassToFactorCannotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:05'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushInstanceVariableDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:06'!
newMethod^ a! !

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test02AnInstanceVariableThatIsAccessedOnClassToRefactorCannotBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:06'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test03AnInstanceVariableThatIsNotAccessedOnClassToRefactorShouldBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:07'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08'!
newMethod! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:08'!
newMethod!

!testRun: #PushDownMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:08'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:09'!
newMethod|a|! !

!testRun: #PushDownMethodTest #test02AMethodTemporaryVarDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:09'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:11'!
newMethod:a! !

!testRun: #PushDownMethodTest #test03AMethodArgumentDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:11'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a!

!testRun: #PushDownMethodTest #test04AMethodAccessesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:12'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1!

!testRun: #PushDownMethodTest #test05AMethodWritesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:13'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15'!
newMethod
	^ 2 + a.! !

!classDefinition: #Subclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Subclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15' overrides: 50850612!
newMethod^ 1 + a! !

!testRun: #PushDownMethodTest #test06AMethodInClassToRefactorExistsInSubClassesShouldOverrideTheExistingSubClassesMethod stamp: 'HAW 10/2/2020 16:19:15'!
PASSED!

!classRemoval: #Subclass stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test01AnInstanceVariableThatIsNotUsedOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:16'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test02AnInstanceVariableOnMultipleSubclassesShouldBeRemovedFromAllSubclassesAndPushedUpToSuperClass stamp: 'HAW 10/2/2020 16:19:17'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnoterSubClassWithInstVar stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test03AnInstanceVariableDoesNotExistOnClassToRefactorCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:18'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithVariableAsTemporaryVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassWithVariableAsTemporaryVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:19'!
newMethod| a |! !

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test04AnInstanceVariableThatIsUsedOnSuperClassAsTemporaryVariableCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:19'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithVariableAsTemporaryVariable stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:20'!
newMethod!

!testRun: #PushUpMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:20'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:21'!
newMethod^ 1 + a! !

!testRun: #PushUpMethodTest #test02AMethodAccessesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:21'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:22'!
newMethod a = 1! !

!testRun: #PushUpMethodTest #test03AMethodWritesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:22'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1!

!testRun: #PushUpMethodTest #test04AMethodWritesSuperClassInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:23'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test05AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:24'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test06AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:25'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26'!
newMethod^ 1 + a! !

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26' overrides: 50851126!
newMethod
	^ 2 + a.! !

!testRun: #PushUpMethodTest #test07AMethodInClassToRefactorExistsInSuperClassShouldOverrideTheExistingSuperClassMethod stamp: 'HAW 10/2/2020 16:19:26'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test01NoVariableIsRemovedWhenClassHasNoInstanceVariable stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test02UnreferencedVariablesAreRemoved stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:28'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test03VariablesWithReferencesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:28'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:29'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test04VariablesWithReferencesInSubclassesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:29'!
PASSED!

!classRemoval: #ClassWithReferenceInstVar stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test01CanNotRemoveAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:30'!
m1 ^a! !

!testRun: #RemoveInstanceVariableTest #test02CanNotRemoveInstanceVariableWithReferences stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test03WhenAppliedRemovesInstanceVariable stamp: 'HAW 10/2/2020 16:19:31'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:32'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test01CanNotRemoveParameterFromUnaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!testRun: #RemoveParameterTest #test02CanNotRemoveParameterFromBinaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test03CanNotRemoveParameterNotInMessage stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test04AllImplementorsMustImplementSelector stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:34'!
m1: parameter! !

!testRun: #RemoveParameterTest #test05AllSendersShouldSendSelector stamp: 'HAW 10/2/2020 16:19:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1: parameter ^parameter! !

!testRun: #RemoveParameterTest #test06NoImplementorReferencesParameterToRemove stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test07FirstParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 
	| t1 |! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |!

!testRun: #RemoveParameterTest #test08LastParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m0:m1:m2: stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test09MiddleParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1!

!testRun: #RemoveParameterTest #test10ParameterFromOneKeywordSelectorIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38' prior: 50851609!
sender
		self 
			m2: 2 ! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test11ParameterOfSendersOfMoreThanOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39' prior: 50851651!
sender
		self 
			m1.! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1!

!testRun: #RemoveParameterTest #test12ParameterOfSendersOfOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:39'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40' prior: 50851691!
sender
		self m2: 2.
		self m2: 4.! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test13ParameterIsRemovedCorrecltyFromSendersWithMoreThanOneSend stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test14CanNotRemoveParameterIndexLessThanOne stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!testRun: #RemoveParameterTest #test15CanNotRemoveParameterIndexBiggerThanOldSelectorNumberOfKeywords stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RemoveParameterTest #test16ParameterIndexMustBeInteger stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RenameClassTest #test01NewClassNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test02NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test03NewClassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test04NewClassShouldNotExist stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test04_01NewClassNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test05NewClassShouldNotBeUndeclare stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:44'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:44'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!

!testRun: #RenameClassTest #test06OldClassIsRenamedToNewClass stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45'!
m1 OldClassTest07 new! !

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45' prior: 50851784!
m1 NewClassTest07 new! !

!testRun: #RenameClassTest #test07OldClassDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:45'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest08 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46'!
m1 #OldClassTest08 size! !

!classRenamed: #OldClassTest08 as: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:46'!
Smalltalk renameClassNamed: #OldClassTest08 as: #NewClassTest8!
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46' prior: 50851816!
m1 #NewClassTest8 size! !

!testRun: #RenameClassTest #test08OldClassLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:46'!
PASSED!

!classRemoval: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest8
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest09 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 OldClassTest09 new. Object new! !

!classRenamed: #OldClassTest09 as: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest09 as: #NewClassTest09!
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47' prior: 50851848!
m1 NewClassTest09 new. Object new! !

!testRun: #RenameClassTest #test09OtherClassDirectReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:47'!
PASSED!

!classRemoval: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest10 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 #OldClassTest10 size. #Object size! !

!classRenamed: #OldClassTest10 as: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest10 as: #NewClassTest10!
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851880!
m1 #NewClassTest10 size. #Object size! !

!testRun: #RenameClassTest #test10OtherLiteralReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #NewClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest11 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48'!
m1 OldClassTest11 new. #OldClassTest11 size! !

!classRenamed: #OldClassTest11 as: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:48'!
Smalltalk renameClassNamed: #OldClassTest11 as: #NewClassTest11!
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851913!
m1 NewClassTest11 new. #NewClassTest11 size! !

!testRun: #RenameClassTest #test11OldClassDirectAndLiteralReferencesAreRenameAtOnce stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:49'!
RefactoringClassTestData subclass: #NewClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test12CanNotRenameAMetaclass stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!testRun: #RenameClassTest #test13NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!classDefinition: #OldClassTest14 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:50'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test14NewClassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:50'!
PASSED!

!classRemoval: #OldClassTest14 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:51'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest15 as: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
Smalltalk renameClassNamed: #OldClassTest15 as: #NewClassTest15!

!testRun: #RenameClassTest #test15ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:19:51'!
PASSED!

!classRemoval: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #NewClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest15'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:52'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest16 as: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
Smalltalk renameClassNamed: #OldClassTest16 as: #NewClassTest16!

!testRun: #RenameClassTest #test16ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:52'!
PASSED!

!classRemoval: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #NewClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest16'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:53'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest17 as: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:53'!
Smalltalk renameClassNamed: #OldClassTest17 as: #NewClassTest17!

!testRun: #RenameClassTest #test17ItDoesNotRenameReferencesToClassVariableWithSameNameAsNewClassDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:53'!
PASSED!

!classRemoval: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #NewClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:54'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'NewClassTest17'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:54'!
m1 ^OldClassTest18! !

!classRenamed: #OldClassTest18 as: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:54'!
Smalltalk renameClassNamed: #OldClassTest18 as: #NewClassTest18!
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:55' prior: 50852147!
m1 ^NewClassTest18! !

!testRun: #RenameClassTest #test18WorksCorrectlyWhenSourceCodeEndsWithClassToRename stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #NewClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test19RenamesClassWhenMethodReferencesClassAndDoesNothing stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #OldClassTest18 stamp: 'HAW 10/2/2020 16:19:56'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test00GlobalCanNotBeClass stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test01NewNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test02NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test03NewNameShouldNotBeAClass stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test04NewNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!testRun: #RenameGlobalTest #test06OldNameIsRenamedToNewName stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852222!
m1 ^NewNameToRename__! !

!testRun: #RenameGlobalTest #test07OldDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852249!
m1 ^#NewNameToRename__! !

!testRun: #RenameGlobalTest #test08OldNameLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:20:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test09NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!testRun: #RenameGlobalTest #test10NewNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:01'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:01'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test11ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:20:01'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:02'!
m1 ^OldNameRenamed__! !

!testRun: #RenameGlobalTest #test12ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:20:02'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldNameRenamed__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test13OldNameMustBeDefined stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:03'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test14ItDoesNotRenameReferencesToClassVariableFromClassSideWithSameName stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test15OldNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test01CanNotRenameAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:05'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test03NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test04NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test05ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:20:07'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:09'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test08NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:20:09'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:10'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test09RenameCreatesNewInstanceVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:10'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11' prior: 50852610!
m1 ^new! !

!testRun: #RenameInstanceVariableTest #test10ReadReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:11'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852647!
m1 new := 10! !

!testRun: #RenameInstanceVariableTest #test11WriteReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852693!
m1 new := 10. ^new! !

!testRun: #RenameInstanceVariableTest #test12ReferencesInSubclassesAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:13'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13' prior: 50852738!
m1 keep := new. ^keep! !

!testRun: #RenameInstanceVariableTest #test13ReferencesToOtherVariablesAreNotRenamed stamp: 'HAW 10/2/2020 16:20:13'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test14NewVariableOfExistingInstancesReferToOldVariableValue stamp: 'HAW 10/2/2020 16:20:14'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1 | new | new := 10.! !

!testRun: #RenameInstanceVariableTest #test15FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1:new! !

!testRun: #RenameInstanceVariableTest #test16FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:16'!
m1 [ :new | ] value: 1! !

!testRun: #RenameInstanceVariableTest #test17FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:16'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 [ | new | ] value! !

!testRun: #RenameInstanceVariableTest #test18FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 | new | ! !

!testRun: #RenameInstanceVariableTest #test19FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:20:18'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:18'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:18' overrides: 16806529!
wantsChangeSetLogging ^false! !

!testRun: #RenameInstanceVariableTest #test20ClassChangeIsAddedWhenRenamingAnInstanceVariable stamp: 'HAW 10/2/2020 16:20:18'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:19'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__!

!testRun: #RenameSelectorTest #test01MessageWithNoSendersCreatesNewMethodAndRemovesOldOne stamp: 'HAW 10/2/2020 16:20:19'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853014!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test02SendersOfMessageAreRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853053!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853057!
m1__ self newXyz__. self toKeep! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test03OtherMessagesSendsAreNotRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test04OldSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test05NewSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test06CanRenameWithoutImplementors stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test07AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test08AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test09NewSelectorMustBeOfSameTypeAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test10NewSelectorMustHaveSameNumberOfArgumentsAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 10/2/2020 16:20:24'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24' prior: 50853121!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__!

!testRun: #RenameSelectorTest #test11NewImplementorsKeepMethodCategory stamp: 'HAW 10/2/2020 16:20:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853156!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853168!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self oldXyz__!

!testRun: #RenameSelectorTest #test12RenamesRecursiveMethodsWhenNotInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853201!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853209!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853213!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self newXyz__!

!testRun: #RenameSelectorTest #test13RenamesRecursiveMethodsWhenInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853250!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853262!
m1 #newXyz__ size! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__!

!testRun: #RenameSelectorTest #test14RenamesSymbolsEqualToOldSelector stamp: 'HAW 10/2/2020 16:20:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853301!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853309!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!testRun: #RenameSelectorTest #test15ScopeToRenameCanBeClassOnly stamp: 'HAW 10/2/2020 16:20:27'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853377!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853381!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853385!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853389!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853402!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853406!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853411!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853415!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853460!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853464!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853468!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853472!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853381!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853389!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853406 overrides: 50853485!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853415 overrides: 50853490!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853433 overrides: 50853495!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853443 overrides: 50853500!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!testRun: #RenameSelectorTest #test16ScopeToRenameCanBeHierarchyOnly stamp: 'HAW 10/2/2020 16:20:28'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853605!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853613!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853580!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853588!
m1__ self newXyz__! !

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!testRun: #RenameSelectorTest #test17ScopeToRenameCanBeCategoryOnly stamp: 'HAW 10/2/2020 16:20:29'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853714!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853718!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853722!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853726!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853739!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853743!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853748!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853752!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853857!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853881!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853797!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853805!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853743 overrides: 50853718!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853752 overrides: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853770 overrides: 50853899!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853718!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853780 overrides: 50853904!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853831!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853823!
m1__ self newXyz__! !

!methodRemoval: AnotheclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: AnotheclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!testRun: #RenameSelectorTest #test18ScopeToRenameCanBeCategoriesAndHierarchyOnly stamp: 'HAW 10/2/2020 16:20:31'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #AnotheclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classRemoval: #OtherCatClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854034!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854042!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854059!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854067!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!testRun: #RenameSelectorTest #test19ScopeToRenameCanBeTheCompleteSystem stamp: 'HAW 10/2/2020 16:20:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test20CanNotRenameToItSelf stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test21NewSelectorCanNotBeImplementedOnAnyClassImplementingOldSelector stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test22WarnsWhenOverridesSuperclassImplementation stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854158!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854170!
m1 ^#(#newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__!

!testRun: #RenameSelectorTest #test23OldSelectorIsRenamedWhenDefinedInLiteralArray stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854205!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854217!
m1 ^#(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__!

!testRun: #RenameSelectorTest #test24OldSelectorIsRenamedWhenDefinedInLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:36'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854253!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854265!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test25OldSelectorIsRenamedWhenDefinedInMoreThanOneLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854303!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854315!
m1 ^#(#newXyz__ #oldXyz__1)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test26DoesNotRenameLiteralsThatBeginsWithOldSelectorInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854351!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854363!
m1 ^#(#newXyz__ #oldXyz__:)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__!

!testRun: #RenameSelectorTest #test27DoesNotRenameLiteralsThatBeginsWithOldSelectorAndEndWithColonInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:38'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854403!
m1 ^self abc: 1! !

!methodRemoval: ClassToRenameSelector #&& stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter!

!testRun: #RenameSelectorTest #test28CanRenameFromBinaryToKeywordOfOneParameter stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854442!
m1 ^self && 1! !

!methodRemoval: ClassToRenameSelector #abc: stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter!

!testRun: #RenameSelectorTest #test29CanRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:40'!
&& aParameter! !

!testRun: #RenameSelectorTest #test30CanNotRenameFromBinaryToKeywordOfMoreThanOneParameter stamp: 'HAW 10/2/2020 16:20:40'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
abc: p1 def: p2! !

!testRun: #RenameSelectorTest #test31CanNotRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854530!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854538!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854555 overrides: 50854621!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854564 overrides: 50854626!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854582 overrides: 50854621!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854592 overrides: 50854626!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!testRun: #RenameSelectorTest #test32HierarchyScopeRenamesSelectorsFromSuperclassDefiningSelector stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' overrides: 16782761!
compilerClass ^nil! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854742!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854709!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854717!
m1__ self newXyz__! !

!methodRemoval: ClassToAvoidRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!testRun: #RenameSelectorTest #test33DoNotRenameSendersAndImplementorsWhoseCompilerClassIsDifferentToCompiler stamp: 'HAW 10/2/2020 16:20:43'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:44'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test01VariableToRenameHasToBeDefined stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test03NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test04NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:45'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test06FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:20:46'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:47'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:20:47'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test07RenameCreatesNewTemporaryVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test08RenameChangesReferencesFromOldVariableToNewVariable stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test09RenamesArguments stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test10NewVariableNameCanNotBeDefinedAsBlockArgument stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test11RenamesBlockArguments stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test12RenamesBlockTemporaries stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test13OldNodeMustBePartOfMethodNode stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test14OldVariableNodeMustBeArgOrTempNode stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test15RenameVariablesWithSameNameInDifferentBlocksCorrectly stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test16CantRenameVariableToANameAlreadyUsedInAnUpperBlock stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test17RenamesOneCharVariableAfterAReturnWithoutCharsAfterThatCorrectly stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test18CantRenameVariableToAReservedName stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test02ClassesWithNoReferencesAndNoSubclassesAreSafetelyRemoved stamp: 'HAW 10/2/2020 16:20:52'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test03RemovingTheMetaclassRemovesTheClass stamp: 'HAW 10/2/2020 16:20:53'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:53'!
m1 ^ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test04CanNotRemoveClassWithReferencesOutsideHierarchy stamp: 'HAW 10/2/2020 16:20:54'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:54'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:55'!
m1 ^ClassToRemove! !

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test05CanRemoveClassWithReferencesFromItself stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test06WarnIfClassToRemoveHasSubclasses stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:56'!
m1 ^ClassToRemoveSubclass! !

!testRun: #SafelyRemoveClassTest #test07CanNotRemoveClassWhenSubclassesHaveReferencesOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:20:57'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:57'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test08HierarchyIsRemovedIfSubclassesWarningIsResumed stamp: 'HAW 10/2/2020 16:20:59'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m2 ^ClassToRemove! !

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test09CanRemoveIfReferencesToSubclassesAreInTheHierarchy stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:00'!
m1 ^#ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test10WarnWhenHasReferencesToName stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01' prior: 50855245!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test01ApplyChangesTemporaryVariableToInstanceVariable stamp: 'HAW 10/2/2020 16:21:01'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02' prior: 50855282!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test02ApplyDoesntChangeRestOfSourceCode stamp: 'HAW 10/2/2020 16:21:02'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1! !

!testRun: #TemporaryToInstanceVariableTest #test03TemporaryToChangeShouldExist stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test04TemporaryShouldNotExistInOtherClassMethod stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:04'!
m1| a |! !

!testRun: #TemporaryToInstanceVariableTest #test05InstanceVariableShouldNotExistInSubclass stamp: 'HAW 10/2/2020 16:21:04'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test06TemporaryShouldNotExistInSubclassMethod stamp: 'HAW 10/2/2020 16:21:05'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:06'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06' prior: 50855455!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test07RemovesPipesWhenRemovingLastTemporaryInMethod stamp: 'HAW 10/2/2020 16:21:06'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07' prior: 50855492!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test08DoesntRemoveOtherVariables stamp: 'HAW 10/2/2020 16:21:07'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].
	[ | a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test09TemporaryShouldNotExistInOtherBlockInSameMethod stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08' prior: 50855554!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test10RemovesPipesWhenRemovingLastTemporaryInBlock stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:09'!
m1 [ | a | ]. [ :a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test11TemporaryShouldNotExistAsArgumentInOtherBlocksInSameMethod stamp: 'HAW 10/2/2020 16:21:09'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:10'!
m1: a! !

!testRun: #TemporaryToInstanceVariableTest #test12CantExtractArgument stamp: 'HAW 10/2/2020 16:21:10'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:11'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test01MethodObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test02MethodObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:21:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test03MethodObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:13'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test04MethodObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:14'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test05MethodObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:21:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:15'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test06AllVariablesToParametrizeMustHaveACorrespondingMethodObjectInstanceVariableName stamp: 'HAW 10/2/2020 16:21:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test07AllInstanceVariableNamesMustCorrespondToVariableToParametrize stamp: 'HAW 10/2/2020 16:21:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test08MethodObjectInstanceVariableNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:17'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test09MethodObjectInstanceVariableNamesCanNotContainBlanks stamp: 'HAW 10/2/2020 16:21:18'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:19'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test10MethodObjectInstanceVariableNamesCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:21:19'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:20'!
m1
		self isNil.! !

!testRun: #ExtractToMethodObjectTest #test11MethodObjectInstanceVariableNamesCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:21:20'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:21'!
m1
		self isNil.
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test12MethodObjectInstanceVariableNamesCanNotBeDuplicated stamp: 'HAW 10/2/2020 16:21:21'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:22'!
m1
		| aTemporal |

		aTemporal := 1.
		self isNil.

		^aTemporal + 2! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test13MethodObjectInstanceVariableNamesCanNotBeNamedAsMethodTemporal stamp: 'HAW 10/2/2020 16:21:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:23'!
m1
		^[
			| aBlockTemporal |

			self isNil.
			aBlockTemporal.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test14MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockTemporal stamp: 'HAW 10/2/2020 16:21:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:24'!
m1
		^[:aBlockArgument |
			self isNil.
			aBlockArgument.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test15MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockArgument stamp: 'HAW 10/2/2020 16:21:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:25'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test16MethodObjectInstanceCreationMessageMustHaveAKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:25'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:26'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test17MethodObjectInstanceCreationMessageMustHaveOnlyOneKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:26'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:27'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test18MethodObjectInstanceCreationMessageMustNotHaveKeywordForAnUnknownVariableToParametrize stamp: 'HAW 10/2/2020 16:21:27'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:28'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test19MethodObjectInstanceCreationMessageKeywordsCanNotHaveInvalidCharacters stamp: 'HAW 10/2/2020 16:21:28'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:29'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test20MethodObjectInstanceCreationMessageSelectorStartsWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:21:29'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:30'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test21MethodObjectInstanceCreationMessageKeywordsCannotBeEmpty stamp: 'HAW 10/2/2020 16:21:30'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:31'!
m1! !

!testRun: #ExtractToMethodObjectTest #test22MethodObjectSuperclassCannotBeMeta stamp: 'HAW 10/2/2020 16:21:31'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32' prior: 50856507!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test23CreatesMethodObjectClass stamp: 'HAW 10/2/2020 16:21:32'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
m1! !

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33' prior: 50856577!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test24CreatesMethodObjectClassAsSubclassOfTheChosenSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34' prior: 50856630!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test25CreatesMethodObjectClassInTheChosenCategory stamp: 'HAW 10/2/2020 16:21:34'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:35'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36' prior: 50856692!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test26MethodObjectClassInstanceCreationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:36'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37' prior: 50856768!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test27MethodObjectClassInstanceCreationMessageSelectorConsistsOfTheChosenKeywords stamp: 'HAW 10/2/2020 16:21:37'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38' prior: 50856843!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test28MethodObjectClassInstanceCreationMessageCreatesARefactoringInstance stamp: 'HAW 10/2/2020 16:21:38'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39' prior: 50856918!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test29MethodObjectInitializationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:39'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:40'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:40'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41' prior: 50856994!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test30MethodObjectInitializationMessageSelectorConsistsOfTheChosenKeywordsPrefixedWithInitializationPrefix stamp: 'HAW 10/2/2020 16:21:41'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42' prior: 50857070!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test31MethodObjectInitializationMessageAssignsTheInstanceVariables stamp: 'HAW 10/2/2020 16:21:42'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
aCustomEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43' prior: 50857145!
m1
	(MethodObject new) aCustomEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test32MethodObjectEvaluationMessageHasTheChosenSelector stamp: 'HAW 10/2/2020 16:21:43'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
m1
	self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
defaultEvaluationSelector
	thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44' prior: 50857207!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test33MethodObjectEvaluationMethodSourceCodeHasTheSameFormatAsTheExtractedMethod stamp: 'HAW 10/2/2020 16:21:44'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45' prior: 50857282!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test34MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfSelf stamp: 'HAW 10/2/2020 16:21:45'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:46'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:46'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
m1
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47' prior: 50857358!
m1
	(MethodObject with: anInstVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test35MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorInstanceVariable stamp: 'HAW 10/2/2020 16:21:47'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
m1: anArg
		anArg isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
initializeWith: aParamName
	anArgReplacement := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
defaultEvaluationSelector
		anArgReplacement isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48' prior: 50857436!
m1: anArg
	(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test36MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfExtractedMethodArgument stamp: 'HAW 10/2/2020 16:21:48'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
m1
		APoolVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49' prior: 50857521!
m1
	(MethodObject with: APoolVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test37MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorPoolVariable stamp: 'HAW 10/2/2020 16:21:49'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:50'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:50'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:50'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:21:51'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
m1
		"A comment talking about self"
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
defaultEvaluationSelector
		"A comment talking about self"
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51' prior: 50857605!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test38MethodObjectEvaluationMethodSourceCodeCommentsReferencingParametrizedVariableAreNotReplaced stamp: 'HAW 10/2/2020 16:21:51'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test39MethodObjectEvaluationMethodSourceCodePreservesBlockArgumentsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test40MethodObjectEvaluationMethodSourceCodePreservesBlockTemporalsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53' prior: 50857723!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test41RefactoredMethodUnarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:53'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54' prior: 50857784!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test42RefactoredMethodBinarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:54'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:55'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:55'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56' prior: 50857860!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test43RefactoredMethodKeywordSelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:56'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57' prior: 50857936!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test44WhenBinaryMethodIsRefactoredArgumentNameIsPreserved stamp: 'HAW 10/2/2020 16:21:57'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58' prior: 50858012!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test45WhenKeywordsMethodIsRefactoredArgumentNamesArePreserved stamp: 'HAW 10/2/2020 16:21:58'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59' prior: 50858088!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test46WhenThereAreNoVariablesToParametrizeTheRefactoredMethodUsesTheNewMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:21:59'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
m1 ^self isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
defaultEvaluationSelector ^correspondingInstVar isNil! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00' prior: 50858151!
m1
	^(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test47WhenThereAreVariablesToParametrizeTheRefactoredMethodUsesTheChosenMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:00'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:01'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:01'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
m1: anArg ^(self isNil) or: (anArg isNil)! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
with: anArgParamName andWith: aSelfParamName
	^self new initializeWith: anArgParamName andWith: aSelfParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
initializeWith: anArgParamName andWith: aSelfParamName
	anArgCorrespondingInstVar := anArgParamName.
	selfCorrespondingInstVar := aSelfParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
defaultEvaluationSelector ^(selfCorrespondingInstVar isNil) or: (anArgCorrespondingInstVar isNil)! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02' prior: 50858227!
m1: anArg
	^(MethodObject with: anArg andWith: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test48WhenThereAreMultipleVariablesToParametrizeTheRefactoredMethodPassesTheVariablesInTheChosenOrderToTheMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:02'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03' prior: 50858314!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test49TheRefactoredMethodUsesTheChosenEvaluationSelectorToEvaluateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:03'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
m1
		| a |

		a := 1 + 1.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
defaultEvaluationSelector
		| a |

		a := 1 + 1.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04' prior: 50858377!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test50TheRefactoredMethodPreservesTheImplicitReturn stamp: 'HAW 10/2/2020 16:22:04'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:05'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:05'!
m1 ^super isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test51TheMethodToExtractMustNotReferenceSuper stamp: 'HAW 10/2/2020 16:22:05'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:06'!
m1
		anInstVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test52TheMethodToExtractMustNotContainInstVarAssignments stamp: 'HAW 10/2/2020 16:22:06'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:07'!
m1
		AClassVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test53TheMethodToExtractMustNotContainClassVarAssignments stamp: 'HAW 10/2/2020 16:22:07'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:08'!
m1
		APoolVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test54TheMethodToExtractMustNotContainPoolVarAssignments stamp: 'HAW 10/2/2020 16:22:08'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:09'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:22:10'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
m1
		AClassVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10' prior: 50858610!
m1
	(MethodObject with: AClassVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test55MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorClassVariable stamp: 'HAW 10/2/2020 16:22:10'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:11'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:11'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test56MethodObjectInstanceCreationMessageParameterNamesMustNotRepeat stamp: 'HAW 10/2/2020 16:22:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:12'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test57MethodObjectInstanceCreationMessageParameterNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:13'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test58MethodObjectInstanceCreationMessageParameterNamesMustNotContainSeparators stamp: 'HAW 10/2/2020 16:22:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:14'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test59MethodObjectInstanceCreationMessageParameterNamesMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:15'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test60MethodObjectInstanceCreationMessageParameterNamesMustNotBeEqualToAMethodObjectInstanceVariable stamp: 'HAW 10/2/2020 16:22:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16' prior: 50858887!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test61MethodObjectClassInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:16'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17' prior: 50858962!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test62MethodObjectInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:17'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18' prior: 50859037!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test63MethodObjectInstanceInitializationMessageIsCategorizedAsInitialization stamp: 'HAW 10/2/2020 16:22:18'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:19'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20' prior: 50859112!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test64MethodObjectInstanceCreationMessageIsCategorizedAsInstanceCreation stamp: 'HAW 10/2/2020 16:22:20'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21' prior: 50859187!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test65MethodObjectEvaluationMessageIsCategorizedAsEvaluating stamp: 'HAW 10/2/2020 16:22:21'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:22'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:22'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test66MethodObjectEvaluationSelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:23'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test67MethodObjectEvaluationSelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:24'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test68MethodObjectEvaluationSelectorMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:22:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test01InstanceVariableMustBelongToTheClass stamp: 'HAW 10/2/2020 16:22:25'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test02WhenThereAreNoIfNilChecksTheResultIsEmpty stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:26'!
m1 randomInstVar ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test03ResultIncludesIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:27'!
m1 randomInstVar ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test04ResultIncludesIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:27'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNil: [ 2 + 2 ] ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test05ResultIncludesIfNilIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNotNil: [ 2 + 2 ] ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test06ResultIncludesIfNotNilIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:29'!
m1 randomInstVar isNil ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test07ResultIncludesIsNilIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:29'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test08ResultIncludesIsNilIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifTrue: [1 + 1] ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test09ResultIncludesIsNilIfTrueIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:31'!
m1 randomInstVar isNil ifFalse: [1 + 1] ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test10ResultIncludesIsNilIfFalseIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:31'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNotNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test11WhenThereAreMultipleIfNilChecksInTheSameMethodTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1]! !
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m2 randomInstVar ifNil: [2 + 2]! !

!testRun: #IfNilChecksFinderTest #test12WhenThereAreIfNilChecksInMultipleMethodsTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:33'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test13WhenThereAreMultipleIfNilChecksInTheSameMethodWithTheSameCodeTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:33'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:34'!
m1 anInstVar ifNil: [ super isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test01BlocksToExtractMustNotContainReferencesToSuper stamp: 'HAW 10/2/2020 16:22:34'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:35'!
m1 anInstVar ifNil: [ anInstVar := 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test02BlocksToExtractMustNotContainAssignmentsToVariablesThatAreNotTemporals stamp: 'HAW 10/2/2020 16:22:35'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:36'!
m1 anInstVar ifNil: [
			1 = 2 ifFalse: [ |aTemp| aTemp := 3]]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test03BlocksToExtractCanAssignToTemporalsOfNestedBlocks stamp: 'HAW 10/2/2020 16:22:36'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:37'!
m1 anInstVar ifNil: [ |aTemp| aTemp := 2]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test04BlocksToExtractCanAssignToTemporalsOfBlocks stamp: 'HAW 10/2/2020 16:22:37'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:38'!
m1 anInstVar ifNil: [^anInstVar is Nil]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test07BlocksToExtractMustNotContainReturnStatements stamp: 'HAW 10/2/2020 16:22:38'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:40'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test08InstanceVariableMustBelongToTheClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:41'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:41'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test09ConcreteClassMustBeDifferentToNullClass stamp: 'HAW 10/2/2020 16:22:41'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClasOutsideTheHierarchy category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClasOutsideTheHierarchy methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:42'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test10MethodsMustBelongToTheHierarchyToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClasOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:44'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test13MessageNodesMustNotBeDuplicated stamp: 'HAW 10/2/2020 16:22:44'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:45'!
m1 self ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test14MessageNodesReceiverMustBeTheInstVar stamp: 'HAW 10/2/2020 16:22:45'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
unaryPolymorphicSelector! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test15ConcreteClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:46'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!NullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
unaryPolymorphicSelector! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test16NullClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:47'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector
	1 + 1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860384!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860414!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860419!
m1 anInstVar replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test17WhenThereAreNoVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:48'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860476!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860504!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860508!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test18WhenThereAreVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:50'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860565!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860593!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860597!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test19WhenIfNilCheckHasOneKeywordReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:51'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860654!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860684!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860688!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test20WhenIfNilCheckHasTwoKeywordsReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:52'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860745!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860775!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860779!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test21WhenIfNilCheckHasIsNilReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:53'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860836!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860866!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860870!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test22PolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:22:55'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860926!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860956!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860960!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test23PolymorphicMessageIsAddedToTheConcreteClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:22:56'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861017!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861047!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861051!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test24PolymorphicMessageIsAddedToTheConcreteClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:22:57'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:58'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861108!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861138!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861142!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test25ReplacesIfNilIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:59'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
m1 anInstVar ifNotNil: [ self isNil ] ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861198!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861228!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861232!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test26ReplacesIfNotNilIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:00'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861288!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861316!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861320!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test27ReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:01'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
m1 anInstVar ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861376!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861405!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861409!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test28ReplacesIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:02'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
m1 anInstVar isNil ifTrue: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861465!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861493!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861497!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test29ReplacesIsNilIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:04'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
m1 anInstVar isNil ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861553!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861582!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861586!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test30ReplacesIsNilIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:05'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
m1 anInstVar isNil ifTrue: [self isNil] ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861642!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861672!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861676!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test31ReplacesIsNilIfTrueIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:06'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
m1 anInstVar isNil ifFalse: [self isNil] ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861733!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861763!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861767!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test32ReplacesIsNilIfFalseIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:08'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861824!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861854!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861858!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test33PolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:09'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861914!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861944!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861948!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test34PolymorphicMessageIsAddedToTheNullClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:23:10'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862005!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862035!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862039!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test35PolymorphicMessageIsAddedToTheNullClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:23:12'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
m1 anInstVar isNil ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862096!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862125!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862129!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test36WhenNoNullBlockIsPresentEmptyPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:13'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
m1 anInstVar isNil ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862186!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862214!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862218!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test37WhenNoConcreteBlockIsPresentEmptyPolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
m1 anInstVar ifNil: [1+1. 2+2]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862275!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862305!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862310!
m1 anInstVar unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test38WhenThereAreMultipleStatementsPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:16'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862367!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862397!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862403!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test39ReplacesNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:17'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862461!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862492!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862498!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test40ReplacesMultipleNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:18'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862558!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862589!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862595!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test41ReplacesAssignmentWithNullObject stamp: 'HAW 10/2/2020 16:23:19'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862655!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862687!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862695!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test42ReplacesMultipleAssignmentsInTheSameMethodWithNullObject stamp: 'HAW 10/2/2020 16:23:21'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m11
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m12
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862760!
m11
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862790!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862794!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862767!
m12
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862799!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862816!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862824!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862832!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test43ReplacesMultipleAssignmentsInMultipleMethodsWithNullObject stamp: 'HAW 10/2/2020 16:23:22'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
m1
	anInstVar ifNil: [1+1. 2+2].
	^anInstVar! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862905!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862935!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862940!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar nilIfNullObject! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test44ReplacesReturnOfIvarWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:24'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
m1
	anInstVar ifNil: [1+1. 2+2].
	self do: anInstVar.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50862998!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863028!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863034!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar nilIfNullObject.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test45ReplacesIvarAsParamWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:25'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil. anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil. self isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863092!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863122!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863126!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test46WhenIvarAppearsInNotNilBlockAsReceiverReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:26'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 sendIvar: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863183!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863213!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863217!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test47WhenIvarAppearsInNotNilBlockAsArgumentReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:28'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
m1 anInstVar isNil ifFalse: [ self isNil ] ifTrue: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 sendIvar: self nilIfNullObject! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863274!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863305!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863309!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test48WhenIvarAppearsInNilBlockAsArgumentReplacesIvarWithSelfNilIfNullObject stamp: 'HAW 10/2/2020 16:23:29'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:30'!
m1 self ifNil: [1 + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test01WhenThereAreNoVariablesToExtractFindsNothing stamp: 'HAW 10/2/2020 16:23:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:31'!
m1 self ifNil: [| a | a := 2. a + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test02WhenThereAreOnlyTemporariesFindsNothing stamp: 'HAW 10/2/2020 16:23:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a + self]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test03WhenABlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a ifNil: [ self + 2]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test04WhenANestedBlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:33'!
m1 self ifNil: [| a | a := nil]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test05NilIsNotFound stamp: 'HAW 10/2/2020 16:23:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [false or: [true]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test06TrueAndFalseAreNotFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [| a | a := 2. a + anInstVar]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test07WhenABlockReferencesInstanceVariablesTheyAreFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:35'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test08WhenABlockReferencesArgumentsTheyAreFound stamp: 'HAW 10/2/2020 16:23:35'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:36'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test09ExcludingVariablesAreNotIncludedInTheResult stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test01AbstractClassClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test02AbstractClassClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:37'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test03AbstractClassClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test04AbstractClassClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test05AbstractClassClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:39'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test06NullObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test07NullObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test08NullObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:41'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test09NullObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:42'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test10NullObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test11CreatesAbstractClass stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:44'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test12CreatesAbstractClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:44'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:45'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:45'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:46'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test13CreatesAbstractClassAsSubclassOfConcreteClassPreviousSuperclass stamp: 'HAW 10/2/2020 16:23:46'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47' overrides: 50863949!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test14AbstractClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48' overrides: 50864013!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test15AbstractClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:49'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49' overrides: 50864078!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test16AbstractClassMethodsDelegateResponsibility stamp: 'HAW 10/2/2020 16:23:49'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:50'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:50'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:51'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test17CreatesNullObjectClass stamp: 'HAW 10/2/2020 16:23:51'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:52'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test18CreatesNullObjectClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:52'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:53'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test19CreatesNullObjectClassClassAsSubclassOfAbstractClass stamp: 'HAW 10/2/2020 16:23:53'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54' overrides: 50864297!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test20NullObjectClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:55'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:55'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56' overrides: 50864361!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test21NullObjectClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:57'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57' overrides: 50864426!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test22NullObjectClassMethodsAreEmpty stamp: 'HAW 10/2/2020 16:23:57'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:58'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test23ConcreteClassSubclassesTheAbstractClass stamp: 'HAW 10/2/2020 16:23:58'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:59'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59' overrides: 50864542!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test24ConcreteClassMethodsArePreserved stamp: 'HAW 10/2/2020 16:23:59'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:24:00'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:24:00'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:24:00'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 self ifNil: [1 + 1].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m2 1 + 1.! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test01MessageNodeMustBelongToTheMethodNode stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 anInstVar ifTrue: [1 + 1].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test02MessageNodeMustRepresentASupportedMessageSent stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:02'!
m1 anInstVar ifNil: [self isNil]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test03AllVariablesToParametrizeHaveACorrespondingKeyword stamp: 'HAW 10/2/2020 16:24:02'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test04AllKeywordsMustHaveACorrespondingVariableToParametrize stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test05CreatesReplaceIfNilWithPolymorphismParameters stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:04'!
m1 anInstVar ifNil: [self or: [true]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test06ReplaceIfNilWithPolymorphismParametersOnBlocksWithBooleanConstants stamp: 'HAW 10/2/2020 16:24:04'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1 anInstVar ifNil: [ | tempVar | tempVar := 1 + 1. self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test07ParameterNamesMustNotBeEqualToABlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1
		anInstVar ifNil: [self ifNil: [ | tempVar | tempVar := 1 + 1]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test08ParameterNamesMustNotBeEqualToANestedBlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:06'!
m1
		anInstVar ifNil: [self allInstVarNames collect: [:arg | arg asSymbol]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test09ParameterNamesMustNotBeEqualToNestedBlocksArguments stamp: 'HAW 10/2/2020 16:24:06'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test10RangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNotNil: [1 + 1] ifNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test11RangeOfMessageSendForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:08'!
m1 anInstVar ifNotNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test12RangeOfMessageSendForIfNotNil stamp: 'HAW 10/2/2020 16:24:08'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar ifNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test13RangeOfMessageSendForIfNil stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar isNil ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test14RangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:10'!
m1 anInstVar isNil ifTrue: [1 + 1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test15RangeOfMessageSendForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:10'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:11'!
m1 anInstVar       ifNil: [1 + 1]          ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test16WhenThereAreExtraSpacesRangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:11'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar    isNil       ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test17WhenThereAreExtraSpacesRangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test18ConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:13'!
m1 anInstVar ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test19ConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:13'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test20ConcreteBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar isNil ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test21ConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:15'!
m1 anInstVar isNil ifTrue: [1+1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test22ConcreteBlockSourceCodeForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:15'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test23NullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test24NullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:17'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test25NullBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:17'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test26NullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifFalse: [2+2] ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test27NullBlockSourceCodeForIsNilIfFalseIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:19'!
m1 anInstVar ifNotNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test28NullBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:19'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNil: [1] ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test29WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test30WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:21'!
m1 anInstVar isNil ifFalse: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test31WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:21'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test32WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test33WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:23'!
m1 anInstVar isNil ifTrue: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test34WhenThereAreMultipleStatementsNullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:23'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test01ParameterNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test02ParameterNameMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test03ParameterNameMustNotContainSeparators stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test04KeywordMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test05KeywordMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test06CreatesADefinition stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:26'!
m1! !

!testRun: #VariablesToExtractFinderTest #test01WhenTheMethodHasNoVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:27'!
m1
		| aTempVar |

		aTempVar := 2.

		^aTempVar.! !

!testRun: #VariablesToExtractFinderTest #test02WhenTheMethodHasOnlyTemporaryVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1

		self m2.! !

!testRun: #VariablesToExtractFinderTest #test03WhenTheMethodReferencesSelfPseudoVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1: anArg

		^anArg + 2! !

!testRun: #VariablesToExtractFinderTest #test04WhenTheMethodHasArgumentsTheyAreIncludedAsVariablesToExtract stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:29'!
m1

		^anInstVar isNil! !

!testRun: #VariablesToExtractFinderTest #test05WhenTheMethodReferencesAnInstanceVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:29'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1

		^AClassVar isNil! !

!testRun: #VariablesToExtractFinderTest #test06WhenTheMethodReferencesAClassVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ASharedPool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1
		^APoolVariable isNil! !

!testRun: #VariablesToExtractFinderTest #test07WhenTheMethodReferencesAPoolVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:31'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!

!classRemoval: #ASharedPool stamp: 'HAW 10/2/2020 16:24:31'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:31'!
m1

		^true not! !

!testRun: #VariablesToExtractFinderTest #test08DoesNotFindPseudoVariablesButSelf stamp: 'HAW 10/2/2020 16:24:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:32'!
m1
		^anInstVar! !

!testRun: #VariablesToExtractFinderTest #test09WhenReturnsAnInstVarFindsIt stamp: 'HAW 10/2/2020 16:24:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Object! !

!testRun: #VariablesToExtractFinderTest #test10DoesNotFindClasses stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Smalltalk! !

!testRun: #VariablesToExtractFinderTest #test11DoesNotFindGlobals stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test01SelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test02SelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test03SelectorMustNotStartWithInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test04CreatesVariablesToParametrizeKeywordsDefinitionsWithSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test05FirstKeywordMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test06ParameterNamesMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test07VariablesToParametrizeMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test08CreatesVariablesToParametrizeKeywordsDefinitionsWithDefinitions stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test09WhenNoVariablesToParametrizeBuildsSelector stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test10WhenVariablesToParametrizeBuildsSelectorFromKeywordsInOrder stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test11WhenVariablesToParametrizeBuildsMessageSending stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test12WhenNoVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test13WhenVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865803!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:40'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865844!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:41'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'HAW 10/2/2020 16:24:42'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43' prior: 50865992!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:43'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:43'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:44'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44' prior: 50866050!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:44'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45' prior: 50866114!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46' prior: 50866179!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47' prior: 50866233!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:47'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48' prior: 50866281!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:48'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49' prior: 50866341!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:49'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:24:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50' prior: 50866387!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:50'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:24:51'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52' prior: 50866487!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'HAW 10/2/2020 16:24:52'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53' prior: 50866533!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54' prior: 50866632!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:54'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:55'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55' prior: 50866692!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:55'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56' prior: 50866758!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:56'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57' prior: 50866825!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:57'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58' prior: 50866882!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:58'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59' prior: 50866932!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:59'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00' prior: 50866994!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:00'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01' prior: 50867043!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:02'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03' prior: 50867146!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'HAW 10/2/2020 16:25:03'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04' prior: 50867191!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:04'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05' prior: 50867287!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:05'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:25:05'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:06'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06' prior: 50867346!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:25:06'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07' prior: 50867410!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:25:07'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08' prior: 50867475!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:25:08'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09' prior: 50867529!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:09'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:09'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10' prior: 50867577!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:10'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:25:10'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11' prior: 50867637!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:11'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:11'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12' prior: 50867683!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:12'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:12'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:13'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:14'!
PASSED!

----QUIT----(2 October 2020 16:25:14) CuisUniversity-4384.image priorSource: 16021447!

----STARTUP---- (2 November 2020 18:40:12) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Ejercicio.st----!

----STARTUP---- (2 November 2020 18:54:19) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:44'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:48'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:13:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:32'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'HAW 5/23/2019 15:20:46'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:15'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'NR 11/2/2020 17:14:01'!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25' overrides: 16881508!
value 

	self subclassResponsibility ! !

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction class
	instanceVariableNames: ''!

!classDefinition: 'AccountTransaction class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction class
	instanceVariableNames: ''!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'NR 10/17/2019 03:22:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !
!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38' overrides: 50868103!
value

	^ value! !

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Deposit class
	instanceVariableNames: ''!

!classDefinition: 'Deposit class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Deposit class
	instanceVariableNames: ''!
!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !
!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33' overrides: 50868103!
value

	^ value! !

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Withdraw class
	instanceVariableNames: ''!

!classDefinition: 'Withdraw class' category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Withdraw class
	instanceVariableNames: ''!
!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 18:54:28'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'NR 10/17/2019 15:06:56' overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
register: aTransaction

	transactions add: aTransaction 
! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'HAW 5/23/2019 15:19:32'!
balance

	^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'NR 10/17/2019 03:28:43'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:08:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 19:08:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:08:21'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:09:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:09:18'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:16:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 19:16:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:16:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/2/2020 19:18:20' prior: 50868231!
balance

	^transactions sum: [ :aTransaction | 
		
		(aTransaction isKindOf: Withdraw) ifTrue:  [aTransaction value negated ] ifFalse: [aTransaction value ]
		
	 ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:18:21'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 19:18:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 19:18:25'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'DB 11/2/2020 19:24:30'!
valueForbalance 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 19:24:44' overrides: 50868349!
valueForbalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'DB 11/2/2020 19:24:54' overrides: 50868349!
valueForbalance

	^ value negated ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/2/2020 19:25:50' prior: 50868310!
balance

	^transactions sum: [ :aTransaction | aTransaction valueForBalance ] ifEmpty: [ 0 ]! !
!AccountTransaction methodsFor: 'value' stamp: 'DB 11/2/2020 19:26:09'!
valueForBalance 

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 19:26:09' overrides: 50868368!
valueForBalance

	^ value! !
!Withdraw methodsFor: 'value' stamp: 'DB 11/2/2020 19:26:09' overrides: 50868368!
valueForBalance

	^ value negated ! !

!methodRemoval: AccountTransaction #valueForbalance stamp: 'DB 11/2/2020 19:26:09'!
valueForbalance 

	self subclassResponsibility !

!methodRemoval: Deposit #valueForbalance stamp: 'DB 11/2/2020 19:26:09'!
valueForbalance

	^ value!

!methodRemoval: Withdraw #valueForbalance stamp: 'DB 11/2/2020 19:26:09'!
valueForbalance

	^ value negated !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 19:26:14'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 19:28:57'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 19:30:38'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'DB 11/2/2020 19:30:24'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:30:50'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:30:50'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:30:59'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:31:05' prior: 50868451!
balance
	^0! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:31:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:39:50'!
test02AddReceptiveAccountToEmptyPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
		
	
		
	self assert: 100 equals: account balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:44:50' prior: 50868463!
test02AddReceptiveAccountToEmptyPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:44:56'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:44:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:45:03'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/2/2020 19:46:51'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:46:48' prior: 50868490!
add: aReceptiveAccount 
	
	assets add: aReceptiveAccount! !

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:46:53'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:47:13'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:47:39'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:47:39'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:47:39'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:47:51' prior: 50868473!
test02AddReceptiveAccountToEmptyPortfolio

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:47:55'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:47:55'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:48:53' overrides: 16896425!
initialize
	
	assets := OrderedCollection new! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:49:05'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:49:05'!
FAILURE!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:49:05'!
FAILURE!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:49:56'!
FAILURE!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:50:04'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:51:00' prior: 50868456!
balance
	^assets sum: [:aReceptiveAccount | aReceptiveAccount balance ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:51:05'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:51:05'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:51:05'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:51:13'!
ERROR!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:51:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:51:13'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:53:30' prior: 50868564!
balance
	^assets sum: [:aReceptiveAccount | aReceptiveAccount balance ]  ifEmpty: [ 0 ]! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 19:53:34'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 19:53:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:58:30'!
test04AddPortfolioToAPortfolio

	| portfolio account childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolio balance.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: 100 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 19:58:37'!
test03AddPortfolioToAPortfolio

	| portfolio account childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolio balance.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: 100 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 19:58:37'!
test04AddPortfolioToAPortfolio

	| portfolio account childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolio balance.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: 100 equals: portfolio balance.
!

!testRun: #PortfolioTest #test03AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 19:58:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 20:01:52'!
test04hasRegistered

	| portfolio account  |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: ((account transactions) at: 0)).
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:02:04'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 20:02:04'!
PASSED!

!testRun: #PortfolioTest #test03AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 20:02:04'!
PASSED!

!testRun: #PortfolioTest #test04hasRegistered stamp: 'DB 11/2/2020 20:02:04'!
ERROR!

!testRun: #PortfolioTest #test04hasRegistered stamp: 'DB 11/2/2020 20:02:04'!
ERROR!

account transactions!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 20:02:37' prior: 50868650!
test04hasRegistered

	| portfolio account  |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: ((account transactions) at: 1)).
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:02:39'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 20:02:39'!
PASSED!

!testRun: #PortfolioTest #test03AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 20:02:39'!
PASSED!

!testRun: #PortfolioTest #test04hasRegistered stamp: 'DB 11/2/2020 20:02:39'!
ERROR!

!testRun: #PortfolioTest #test04hasRegistered stamp: 'DB 11/2/2020 20:02:39'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 20:02:47'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'value' stamp: 'DB 11/2/2020 20:11:45'!
addToBalance: aBalance

	^ aBalance - value ! !
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 20:12:11'!
addToBalance: aBalance
	^aBalance + value! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 20:14:57' prior: 50868590!
balance

	^assets sum: [:aReceptiveAccount | aReceptiveAccount balance ]  ifEmpty: [ 0 ]! !

----SNAPSHOT----(2 November 2020 20:26:59) CuisUniversity-4384.image priorSource: 17155564!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 20:27:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 20:27:24'!
PASSED!
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 20:33:09'!
colaborateToBalance: aBalance
	^aBalance + value! !

!methodRemoval: Deposit #addToBalance: stamp: 'DB 11/2/2020 20:33:15'!
addToBalance: aBalance
	^aBalance + value!
!AccountTransaction methodsFor: 'value' stamp: 'DB 11/2/2020 20:34:13'!
contributeToBalance: aBalance 

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #valueForBalance stamp: 'DB 11/2/2020 20:34:19'!
valueForBalance 

	self subclassResponsibility !
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 20:34:33' prior: 50868750!
colaborateToBalance: aBalance
	^aBalance + value! !

!methodRemoval: Deposit #valueForBalance stamp: 'DB 11/2/2020 20:34:40'!
valueForBalance

	^ value!
!Withdraw methodsFor: 'value' stamp: 'DB 11/2/2020 20:34:49'!
colaborateToBalance: aBalance

	^ aBalance - value ! !

!methodRemoval: Withdraw #addToBalance: stamp: 'DB 11/2/2020 20:34:55'!
addToBalance: aBalance

	^ aBalance - value !

!methodRemoval: Withdraw #valueForBalance stamp: 'DB 11/2/2020 20:35:01'!
valueForBalance

	^ value negated !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/2/2020 20:36:27' prior: 50868362!
balance

	| balance |
	
	balance := 0
	
	transactions do: [ :aTransaction | aTransaction contributeToBalance: balance].
	
	^balance ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/2/2020 20:36:46' prior: 50868786!
balance

	| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | aTransaction contributeToBalance: balance].
	
	^balance ! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:36:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:36:52'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 20:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 20:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 20:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 20:36:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:37:04'!
ERROR!
!Deposit methodsFor: 'value' stamp: 'DB 11/2/2020 20:38:10' overrides: 50868758!
contributeToBalance: aBalance
	^aBalance + value! !

!methodRemoval: Deposit #colaborateToBalance: stamp: 'DB 11/2/2020 20:38:10'!
colaborateToBalance: aBalance
	^aBalance + value!
!Withdraw methodsFor: 'value' stamp: 'DB 11/2/2020 20:38:25' overrides: 50868758!
contributeToBalance: aBalance

	^ aBalance - value ! !

!methodRemoval: Withdraw #colaborateToBalance: stamp: 'DB 11/2/2020 20:38:25'!
colaborateToBalance: aBalance

	^ aBalance - value !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:38:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:38:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 20:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 20:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 20:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 20:38:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:38:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:38:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:38:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 20:38:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 20:38:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 20:38:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 20:38:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:38:58'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/2/2020 20:39:37' prior: 50868793!
balance

	| balance |
	
	balance := 0.
	
	transactions do: [ :aTransaction | balance := aTransaction contributeToBalance: balance].
	
	^balance ! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:39:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/2/2020 20:39:42'!
PASSED!

!methodRemoval: PortfolioTest #test04hasRegistered stamp: 'DB 11/2/2020 20:58:57'!
test04hasRegistered

	| portfolio account  |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: ((account transactions) at: 1)).
!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 21:01:34'!
test03AddMoreThanOneAccountToPortfolio

	| portfolio primary secondary  |
	
	portfolio := Portfolio new.
	
	primary := ReceptiveAccount  new.
	Deposit register: 100 on: primary.
	
	secondary := ReceptiveAccount new.
	Withdraw register: 75 on: primary. 
	
	portfolio add: primary.
	portfolio add: secondary.
	
	self assert: 25 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/2/2020 21:01:42'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 21:02:15'!
test04AddPortfolioToAPortfolio

	| portfolio account childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolio balance.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: 100 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test03AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 21:02:15'!
test03AddPortfolioToAPortfolio

	| portfolio account childPortfolio |
	
	portfolio := Portfolio new.
	childPortfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolio balance.
	
	childPortfolio add: account.
	portfolio add: childPortfolio.
	
	self assert: 100 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/2/2020 21:10:13'!
test05

	| portfolio account account2 |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).
	self deny: (portfolio hasRegistered: (account2 transactions at: 1)).
! !

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:10:18'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:10:18'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 21:10:53'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 21:10:53'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/2/2020 21:10:53'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 21:10:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:10:53'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:10:53'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 21:11:28' prior: 50868703!
hasRegistered: aTransaction 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 21:13:08' prior: 50869037!
hasRegistered: aTransaction 

	^true
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/2/2020 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/2/2020 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/2/2020 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/2/2020 21:13:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:13:17'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/2/2020 21:13:17'!
ERROR!

----QUIT----(3 November 2020 09:36:51) CuisUniversity-4384.image priorSource: 17186267!

----STARTUP---- (3 November 2020 17:57:38) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:02:58'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:02:58'!
ERROR!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:03:26' prior: 50868999!
test05

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).
! !

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:03:33'!
PASSED!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:03:52'!
test06

	| portfolio account account2 |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).
	self deny: (portfolio hasRegistered: (account2 transactions at: 1)).
! !

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:04:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:04:03'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:04:22'!
ERROR!

account2 transactions!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:05:27' prior: 50869089!
test06

	| portfolio account account2 |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.

	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).
	self deny: (portfolio hasRegistered: (account2 transactions at: 1)).
! !

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:05:35'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:05:35'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:07:54' prior: 50869042!
hasRegistered: aTransaction 

	| response |
	response := false.
	
	
 	self assets do: [
		
	].

	^response.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:09:04' prior: 50869132!
hasRegistered: aTransaction 

	| response |
	response := false.
	
	
	assets do: [:aReceptiveAccount | response := (aReceptiveAccount includes: aTransaction) or: response 
	].

	^response.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:09:27' prior: 50869139!
hasRegistered: aTransaction 

	| response |
	response := false.
	
	assets do: [:aReceptiveAccount | response := (aReceptiveAccount transactions includes: aTransaction) or: response ].

	^response.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:10:47' prior: 50869148!
hasRegistered: aTransaction 

	| response |
	response := false.
	
	assets do: [:aReceptiveAccount | response := response or: (aReceptiveAccount transactions includes: aTransaction)  ].

	^response.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:16:11' prior: 50869158!
hasRegistered: aTransaction 

	| response |
	response := false.
	

	
	assets do: [:aReceptiveAccount |   
		 (aReceptiveAccount transactions includes: aTransaction) ifTrue: [^true]	
	].

	^response.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:17:10' prior: 50869168!
hasRegistered: aTransaction 

	assets do: [:aReceptiveAccount |   
		 (aReceptiveAccount transactions includes: aTransaction) ifTrue: [^true]	
	].

	^false.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:17:17'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 18:17:36'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 18:17:36'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 18:17:36'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 18:17:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:17:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:17:36'!
PASSED!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:18:43' prior: 50869112!
test06

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).

! !
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:18:54' prior: 50869222!
test06

	| portfolio account |
	
	portfolio := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 50 on: account.
	portfolio add: account.
	
	self assert: (portfolio hasRegistered: (account transactions at: 1)).
	self assert: (portfolio hasRegistered: (account transactions at: 2)).

! !
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:20:19' prior: 50869234!
test06

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio hasRegistered: (account1 transactions at: 1)).
	self assert: (portfolio hasRegistered: (account2 transactions at: 2)).

! !

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:20:23'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:20:23'!
ERROR!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:20:31' prior: 50869248!
test06

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self assert: (portfolio hasRegistered: (account1 transactions at: 1)).
	self assert: (portfolio hasRegistered: (account2 transactions at: 1)).

! !

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:20:35'!
PASSED!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:23:04'!
test07

	| portfolio1 portfolio2 account1 account2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio1 add: account1.
	portfolio2 add: account2.
	portfolio1 add: portfolio2.
	
	self assert: (portfolio1 hasRegistered: (account1 transactions at: 1)).
	self assert: (portfolio1 hasRegistered: (account2 transactions at: 1)).
	self assert: (portfolio2 hasRegistered: (account2 transactions at: 1)).

! !

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:23:07'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:23:07'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:26:38'!
transactions
	
	| allTransactions |
	
	
	assets do: [:anAsset | 
		allTransactions  := anAsset transactions copy
		
		
	]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:27:26' prior: 50869312!
transactions
	
	| allTransactions |
	
	
	assets do: [:anAsset | 
		allTransactions  add: (anAsset transactions copy)
	].

	^allTransactions 
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:28:50' prior: 50869319!
transactions
	
	| allTransactions |
	
	allTransactions := OrderedCollection new.
	assets do: [:anAsset | 
		allTransactions addAllLast: (anAsset transactions copy)
	].

	^allTransactions 
	! !

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:29:13'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:29:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:29:18'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:30:55' prior: 50869178!
hasRegistered: aTransaction 

	assets do: [:anAssets |   
		 (anAssets transactions includes: aTransaction) ifTrue: [^true]	
	].

	^false.
	! !

----SNAPSHOT----(3 November 2020 18:46:18) CuisUniversity-4384.image priorSource: 17197219!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:53:44'!
test08

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [portfolio add: portfolio.] raise: Error withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 18:53:50' prior: 50869369!
test08

	| portfolio |
	
	portfolio := Portfolio new.

	self should: [portfolio add: portfolio.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:53:53'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:53:53'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:54:04'!
duplicatedAccountOrPortfolioErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:54:33' prior: 50869392!
duplicatedAccountOrPortfolioErrorDescription
	^'Duplicated account or portfolio'! !

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:54:39'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:54:39'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:56:30' prior: 50868502!
add: anAsset 
	
	
	self = anAsset ifTrue: [self class signal duplicateAccountOrPortfolio].
	
	assets add: anAsset
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:56:38' prior: 50869409!
add: anAsset 
	
	
	self = anAsset ifTrue: [self class signal duplicateAccountOrPortfolio].
	
	assets add: anAsset.
	! !

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:56:39'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:57:10'!
signalDuplicatedAccountOrPortfolio
	self error: self duplicatedAccountOrPortfolioErrorDescription ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:57:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:57:18'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:57:18'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:58:19' prior: 50869416!
add: anAsset 
	
	
	self = anAsset ifTrue: [^self class signal duplicateAccountOrPortfolio].
	
	assets add: anAsset.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:58:36' prior: 50869456!
add: anAsset 
	
	
	self = anAsset ifTrue: [self class signalDuplicateAccountOrPortfolio].
	
	assets add: anAsset.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:58:59' prior: 50869463!
add: anAsset 
	
	
	self = anAsset ifTrue: [self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 18:59:03' prior: 50869470!
add: anAsset 
	
	
	self = anAsset ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 18:59:07'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 18:59:07'!
PASSED!
!PortfolioTest methodsFor: 'balance test' stamp: 'DB 11/3/2020 19:00:01'!
test09

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio  add: account.

	self should: [portfolio add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 19:00:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'DB 11/3/2020 19:00:10'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'DB 11/3/2020 19:00:10'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/3/2020 19:01:09' prior: 50869477!
add: anAsset 
	
	
	self = anAsset ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	(assets includes: anAsset) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	! !

!testRun: #PortfolioTest #test09 stamp: 'DB 11/3/2020 19:01:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test02AddReceptiveAccountToEmptyPortfolio stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test03AddMoreThanOneAccountToPortfolio stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test04AddPortfolioToAPortfolio stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'DB 11/3/2020 19:01:21'!
PASSED!

----QUIT----(3 November 2020 19:02:40) CuisUniversity-4384.image priorSource: 17206895!

----STARTUP---- (4 November 2020 19:43:51) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


----QUIT----(4 November 2020 19:44:09) CuisUniversity-4384.image priorSource: 17213782!

----STARTUP---- (4 November 2020 19:47:00) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!classRemoval: #ReceptiveAccount stamp: 'DB 11/4/2020 19:47:46'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DB 11/4/2020 19:47:46'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'DB 11/4/2020 19:47:46'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DB 11/4/2020 19:47:46'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DB 11/4/2020 19:47:47'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DB 11/4/2020 19:47:47'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DB 11/4/2020 19:47:47'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 19:49:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:31'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:38'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 19:49:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:49:38'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/4/2020 19:55:35' prior: 50869854!
balance

	
	^transactions sum: [ :aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
		
		(aTransaction isKindOf: Withdraw) ifTrue: [aTransaction value negated]
		
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:55:37'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:55:51'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:55:58'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:56:05'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 19:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:56:30'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:56:30'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 19:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 19:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 19:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 19:56:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:56:33'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/4/2020 19:57:22' prior: 50869928!
balance

	
	^transactions sum: [ :aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [^aTransaction value].
		
		(aTransaction isKindOf: Withdraw) ifTrue: [^aTransaction value negated]
		
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:57:34'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/4/2020 19:57:49' prior: 50869983!
balance

	
	^transactions sum: [ :aTransaction | 
		
		(aTransaction isKindOf: Deposit) ifTrue: [aTransaction value].
		
		(aTransaction isKindOf: Withdraw) ifTrue: [aTransaction value negated]
		
	] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/4/2020 19:58:53' prior: 50869997!
balance

	
	^transactions sum: [ :aTransaction | 
		
		(aTransaction isKindOf: Deposit ) ifTrue: [aTransaction value] ifFalse: [aTransaction value negated ]
		
	] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:59:10'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 19:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 19:59:16'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/4/2020 20:02:55' prior: 50870007!
balance

	| balance |
	balance := 0.
	
	transactions do: [ :aTransaction |
		balance := aTransaction contributeToBalance: balance.
	].
	
	^balance.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:03:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:03:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:03:01'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 20:03:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 20:03:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 20:03:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 20:03:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:03:03'!
ERROR!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:03:18'!
ERROR!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:03:31'!
contributeToBalance: aSmallInteger 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:03:42' prior: 50870088!
contributeToBalance: aBalance 
	self subclassResponsibility .! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:03:44' prior: 50870094!
contributeToBalance: aBalance 
	self subclassResponsibility.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:03:48' overrides: 50870100!
contributeToBalance: aSmallInteger 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:04:05' prior: 50870105 overrides: 50870100!
contributeToBalance: aBalance 
	^aBalance + value! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:19'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:26'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:04:36' overrides: 50870100!
contributeToBalance: aSmallInteger 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:04:51' prior: 50870128 overrides: 50870100!
contributeToBalance: aBalance 
	^aBalance - value! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:04:53' prior: 50870134 overrides: 50870100!
contributeToBalance: aBalance 
	^aBalance - value.! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'DB 11/4/2020 20:04:58'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'DB 11/4/2020 20:05:48'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/4/2020 20:06:14'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'DB 11/4/2020 20:06:06'!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:06:22'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:06:22'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:06:32'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:06:37' prior: 50870207!
balance
	^0! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:06:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:09:37'!
test02PortfolioHasTheSameBalanceAsTheReceptiveAccount

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:10:17' prior: 50870219!
test02PortfolioHasTheSameBalanceAsTheReceptiveAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio add: account.
		
	self assert: 100 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:10:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:10:49'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:10:49'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:10:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:10:55'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:10:55'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:11:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:11:27'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:11:27'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:11:32'!
add: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/4/2020 20:12:36'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:12:33' prior: 50870271!
add: anAsset 
	assets add: anAsset.! !

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:12:38'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:12:56'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:12:56'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:12:56'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:13:30' overrides: 16896425!
initialize
	
	assets := OrderedCollection new! !

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:14:53'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:14:53'!
FAILURE!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:15:06'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'DB 11/4/2020 20:30:09' prior: 50870212!
balance

	(assets isEmpty) ifTrue: [^0].
	
	^100.
	
	
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:30:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:30:15'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:44:14'!
test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount

	| portfolio  account1 account2 |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
		
	self assert: 100 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:44:31' prior: 50870330!
test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount

	| portfolio  account1 account2 |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 50 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
		
	self assert: 150 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:44:33'!
FAILURE!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:44:33'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'DB 11/4/2020 20:45:14' prior: 50870318!
balance

	(assets isEmpty) ifTrue: [^0].
	
	(assets size = 1) ifTrue: [^100].
	
	^150.
	
	
	! !

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:45:14'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:45:17'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:45:17'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:45:17'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:46:35'!
test04PortfolioHasTheSameBalanceAsThePortfolioChild

	| portfolio  child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account..
	
	
	child add: account.
	portfolio add: child.
		
	self assert: 150 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:46:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:46:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:46:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:46:38'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:46:38'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:47:06'!
FAILURE!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:47:14' prior: 50870396!
test04PortfolioHasTheSameBalanceAsThePortfolioChild

	| portfolio  child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 75 on: account..
	
	
	child add: account.
	portfolio add: child.
		
	self assert: 75 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:47:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:47:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:47:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:47:18'!
FAILURE!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:47:18'!
FAILURE!
!Portfolio methodsFor: 'balance' stamp: 'DB 11/4/2020 20:48:45' prior: 50870375!
balance

	^assets sum: [:anAssets |  anAssets balance.] ifEmpty: [0]

	
	! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:48:58' prior: 50870431!
test04PortfolioHasTheSameBalanceAsThePortfolioChild

	| portfolio  child account |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account := ReceptiveAccount  new.
	Deposit register: 75 on: account..
	
	child add: account.
	portfolio add: child.
		
	self assert: 75 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:49:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:49:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:49:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:49:13'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:50:55'!
test05PortfolioHasTheSameBalanceWithMoreThanOneAsset

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
! !

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 20:50:58'!
PASSED!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:52:38'!
test06PortfolioHasTheSameBalanceWithMoreThanOneAsset

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:53:18'!
test06HasRegisteredReturnsFalseWithAnEmptyPortfoio

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test06PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 20:53:18'!
test06PortfolioHasTheSameBalanceWithMoreThanOneAsset

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/4/2020 20:53:36'!
test06HasRegisteredReturnsFalseWithAnEmptyPortfolio

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
! !

!methodRemoval: PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfoio stamp: 'DB 11/4/2020 20:53:36'!
test06HasRegisteredReturnsFalseWithAnEmptyPortfoio

	| portfolio  child account1 account2 |
	
	portfolio := Portfolio new.
	child := Portfolio new.
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	account2 := ReceptiveAccount new.
	Deposit register: 30 on: account2.
	
	child add: account1.
	portfolio add: child.
	portfolio add: account2.
		
	self assert: 105 equals: portfolio balance.
!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:55:21' prior: 50870564!
test06HasRegisteredReturnsFalseWithAnEmptyPortfolio

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:55:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:55:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:55:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:55:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 20:55:24'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 20:55:24'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 20:55:24'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:55:32'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:55:41' prior: 50870635!
hasRegistered: aDeposit 
	^false! !

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 20:55:42'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:56:29'!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:56:40' prior: 50870648!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:56:44' prior: 50870661!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 20:56:47'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 20:56:47'!
FAILURE!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 20:56:47'!
FAILURE!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 20:57:09'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:57:48' prior: 50870640!
hasRegistered: aDeposit 

	(assets isEmpty) ifTrue: [^false]
	^true! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 20:57:50' prior: 50870723!
hasRegistered: aDeposit 

	(assets isEmpty) ifTrue: [^false].
	^true! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 20:57:54'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 20:57:54'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:58:14'!
test07HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:59:30'!
test08HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].! !

!methodRemoval: PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 20:59:30'!
test07HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 20:59:57'!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].! !

!methodRemoval: PortfolioTest #test08HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 20:59:57'!
test08HasRegisteredReturnsTrueWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 21:01:08' prior: 50870802!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account2 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:01:13'!
FAILURE!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:01:13'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:03:04' prior: 50870729!
hasRegistered: aTransaction 

	assets do: [:anAssets | 
		(anAssets transactions includes: aTransaction) ifTrue: [^true]
	].
	^false.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:03:07' prior: 50870858!
hasRegistered: aTransaction 

	assets do: [:anAssets | 
		(anAssets transactions includes: aTransaction) ifTrue: [^true]
	].

	^false.! !

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:03:08'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:03:11'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:03:11'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 21:04:55'!
test09TransactionsReturnsEmptyWhenAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty)! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:05:04'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsReturnsEmptyWhenAnEmptyPortfolio stamp: 'DB 11/4/2020 21:05:04'!
ERROR!

!testRun: #PortfolioTest #test09TransactionsReturnsEmptyWhenAnEmptyPortfolio stamp: 'DB 11/4/2020 21:05:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:05:12'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:05:29' prior: 50870954!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test09TransactionsReturnsEmptyWhenAnEmptyPortfolio stamp: 'DB 11/4/2020 21:06:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:06:05'!
PASSED!

!testRun: #PortfolioTest #test09TransactionsReturnsEmptyWhenAnEmptyPortfolio stamp: 'DB 11/4/2020 21:06:05'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:08:00'!
test09PortfolioHaveZeroTransactionsWhenIsCreated

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty)! !

!methodRemoval: PortfolioTest #test09TransactionsReturnsEmptyWhenAnEmptyPortfolio stamp: 'DB 11/4/2020 21:08:00'!
test09TransactionsReturnsEmptyWhenAnEmptyPortfolio

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty)!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:08:06'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:08:38'!
test10PortfolioHaveTheSameTransactionsThanYoursChilds

	| portfolio  |
	
	portfolio := Portfolio new.
	
	self assert: (portfolio transactions isEmpty)! !
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:10:44' prior: 50871020!
test10PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self assert: (	account1 transactions includesAll: (portfolio transactions )).
	self assert: (account2 transactions includesAll: (portfolio transactions )).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:10:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:10:47'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:10:47'!
ERROR!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:11:00' prior: 50871028!
test10PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self assert: (	account1 transactions includesAllOf: (portfolio transactions )).
	self assert: (account2 transactions includesAllOf: (portfolio transactions )).! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:11:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:11:03'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:15:58' prior: 50871090!
test10PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:16:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:16:01'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:16:01'!
ERROR!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:16:15' prior: 50871148!
test10PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:16:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:16:18'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:16:18'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:18:20' prior: 50870959!
transactions
	assets do: [:anAsset | 
		^anAsset transactions
	]! !
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:18:44'!
_test11PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:18:59'!
test10PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!methodRemoval: PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:18:59'!
test10PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:19:35' prior: 50871302!
test10PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio  account |
	
	portfolio := Portfolio new.

	account := ReceptiveAccount  new.
	
	Deposit register: 89 on: account.
	Deposit register: 78 on: account.
	Deposit register: 56 on: account.
	
	portfolio add: account.
	
	account transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:19:42'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:19:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:19:42'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:20:27'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:20:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:20:27'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:21:06' prior: 50871275!
transactions
	assets do: [:anAsset | 
		^anAsset transactions
	].
	^OrderedCollection new.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:21:31' prior: 50871414!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		^anAsset transactions
	].
	^transactions.! !

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:21:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:21:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:21:36'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:21:49'!
test11PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!methodRemoval: PortfolioTest #_test11PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:21:49'!
_test11PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:22:03'!
test11PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!methodRemoval: PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:22:03'!
test11PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:22:09'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:22:09'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:22:09'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:22:31' prior: 50871420!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		transactions := anAsset transactions
	].
	^transactions.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:22:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:22:38'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:22:38'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:23:30' prior: 50871603!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		transactions addAllLast: (anAsset transactions copy)
	].
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:23:34' prior: 50871657!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		transactions addAllLast: (anAsset transactions)
	].
	^transactions.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:23:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:23:37'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:23:38'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:23:50'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:23:50'!
FAILURE!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:24:38'!
FAILURE!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:24:58' prior: 50871513!
test11PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	account1 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].
	
	account2 transactions do: [:aTransaction |
		self assert: (portfolio transactions includes: aTransaction )
	].	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:25:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:25:01'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/4/2020 21:26:19'!
test12DuplicatedAccountOrPortfolioError
	
	| portfolio |
	
	portfolio := Portfolio new.

	self should: [portfolio add: portfolio.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:26:28'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:26:28'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:26:28'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:26:40'!
duplicatedAccountOrPortfolioErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:27:12' prior: 50871855!
duplicatedAccountOrPortfolioErrorDescription
	^'Duplicated account or portfolio'! !

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:27:16'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/4/2020 21:27:57'!
signalDuplicatedAccountOrPortfolio
	self error: self duplicatedAccountOrPortfolioErrorDescription ! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/4/2020 21:28:30' prior: 50870283!
add: anAsset 

	anAsset = self ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	assets add: anAsset.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:28:32'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:28:32'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/4/2020 21:30:46'!
test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio  add: account.

	self should: [portfolio add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:30:49'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:30:49'!
FAILURE!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:30:49'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/4/2020 21:32:09' prior: 50871876!
add: anAsset 

	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].

	assets add: anAsset.! !

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:32:10'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:32:13'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:32:13'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/4/2020 21:32:23'!
test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio  add: account.

	self should: [portfolio add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!methodRemoval: PortfolioTest #test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:32:23'!
test12DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio  add: account.

	self should: [portfolio add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/4/2020 21:32:27'!
PASSED!

----SNAPSHOT----(4 November 2020 21:33:03) CuisUniversity-4384.image priorSource: 17214001!

----SNAPSHOT----(4 November 2020 21:37:32) CuisUniversity-4384.image priorSource: 17295438!

----QUIT----(4 November 2020 21:37:35) CuisUniversity-4384.image priorSource: 17295531!

----STARTUP---- (6 November 2020 18:08:30) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/6/2020 18:09:25' prior: 50872056!
test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.

	self should: [portfolio add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:09:30'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:09:30'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/6/2020 18:16:30'!
test14TwoPortfoliosCantContaintEachother 

"DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice"
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:16:35'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:16:35'!
FAILURE!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:16:35'!
FAILURE!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:17:37'!
FAILURE!

anAsset!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:20:48'!
include: anAsset 

	^true! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:21:25' prior: 50871995!
add: anAsset 

	((anAsset = self) or: (assets includes: anAsset) or: (anAsset include: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:21:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:21:31'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:21:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:21:31'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:21:31'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:21:31'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:22:02' prior: 50872283!
include: anAsset 

	^(assets  includes: anAsset)! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:22:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:22:05'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:22:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:22:05'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:22:05'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:22:05'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:23:44' prior: 50872349!
include: anAsset 

	(anAsset isKindOf: Portfolio) ifTrue: [^(assets  includes: anAsset)]

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:23:56' prior: 50872407!
include: anAsset 

	(anAsset isKindOf: Portfolio) ifTrue: [^(assets  includes: anAsset)].
	^false.

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:24:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:24:07'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:24:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:24:07'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:24:07'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:24:07'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:24:15'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:25:45' prior: 50872413!
include: anAsset 

	 ^(assets  includes: anAsset)

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:27:11' prior: 50872287!
add: anAsset 
	
	((anAsset isKindOf: Portfolio) and: (anAsset include: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.! !

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:27:19'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:28:32' prior: 50872481!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.! !

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:28:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:28:40'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:28:40'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/6/2020 18:29:58'!
test15TwoPortfoliosCantContaintEachother 

"DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:03'!
FAILURE!

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:03'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:23'!
PASSED!

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:23'!
FAILURE!

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:23'!
FAILURE!

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:30:30'!
PASSED!

anAsset!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:35:27' prior: 50872476!
include: anAsset 

	 ^(assets includes: anAsset)

	! !

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:35:57'!
FAILURE!

assets includes: anAsset!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:40:10' prior: 50872652!
include: anAsset 

	

	assets do: [ :aChildAsset | 
		(aChildAsset isKindOf: Portfolio) ifTrue: [
			^aChildAsset include: anAsset 	
		]
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:40:22' prior: 50872661!
include: anAsset 

	assets do: [ :aChildAsset | 
		(aChildAsset isKindOf: Portfolio) ifTrue: [
			^aChildAsset include: anAsset 	
		]
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/6/2020 18:41:32' prior: 50872669!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset isKindOf: Portfolio) ifTrue: [
			^aChildAsset include: anAsset 	
		]
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:42:25'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

!testRun: #PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 18:42:29'!
PASSED!

----SNAPSHOT----(6 November 2020 18:51:13) CuisUniversity-4384.image priorSource: 17295624!

----QUIT----(6 November 2020 18:51:18) CuisUniversity-4384.image priorSource: 17315039!

----STARTUP---- (6 November 2020 19:03:04) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/6/2020 19:04:41' prior: 50872208!
test14TwoPortfoliosCantContaintEachother 
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

----SNAPSHOT----(6 November 2020 19:05:15) CuisUniversity-4384.image priorSource: 17315132!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/6/2020 19:06:22'!
test16TwoPortfoliosCantContaintEachother 

"DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice"
	
	| portfolio1 portfolio2 portfolio3 portfolio4 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio4 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	portfolio3 add: portfolio4.

	self should: [portfolio4 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test16TwoPortfoliosCantContaintEachother stamp: 'DB 11/6/2020 19:06:26'!
PASSED!

----STARTUP---- (7 November 2020 16:58:48) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/7/2020 17:00:28'!
test15Cycle 

"DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!methodRemoval: PortfolioTest #test15TwoPortfoliosCantContaintEachother stamp: 'DB 11/7/2020 17:00:28'!
test15TwoPortfoliosCantContaintEachother 

"DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice"
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/7/2020 17:04:46'!
test16Cycle 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:04:50'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:04:50'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/7/2020 17:04:57'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:04:57'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:04:57'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 17:07:09' prior: 50872677!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset isKindOf: Portfolio)  ifTrue: [
			^aChildAsset include: anAsset 	
		] ifFalse: [^ anAsset = aChildAsset ]
	
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/7/2020 17:07:19'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:07:19'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 17:07:19'!
FAILURE!

portfolio1!

self!

Object subclass: #Portfolio
	instanceVariableNames: 'assets root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 17:22:23'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 17:23:08'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions root'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/7/2020 17:23:54'!
setRootAs: aPortfolio

	root := aPortfolio ! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 17:25:02' prior: 50872496!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	
	anAsset setRootAs: self.! !

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 17:37:43'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/7/2020 17:39:47'!
addParent: aPortfolio

	parents add: aPortfolio ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 11/7/2020 17:40:08' prior: 50869840 overrides: 16896425!
initialize

	transactions := OrderedCollection new.
	
	parents := OrderedCollection new.! !

Object subclass: #Portfolio
	instanceVariableNames: 'assets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 17:40:30'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 17:40:57'!
addParent: aPortfolio

	parents add: aPortfolio ! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 17:41:16' prior: 50872990!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 17:41:26' prior: 50873045!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 18:33:54'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'DB 11/7/2020 18:34:25' prior: 50870302 overrides: 16896425!
initialize
	
	assets := OrderedCollection new.
	
	parents := OrderedCollection new.! !

anAsset!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 18:35:27'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 18:36:14' prior: 50873058!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	(anAsset parent = self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/7/2020 18:36:28'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/7/2020 18:36:28'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/7/2020 18:36:28'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/7/2020 18:36:28'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/7/2020 18:36:28'!
ERROR!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 18:36:28'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/7/2020 18:37:05' prior: 50873083!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	

	(anAsset parent = self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/7/2020 18:37:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/7/2020 18:37:15'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/7/2020 18:37:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/7/2020 18:37:15'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/7/2020 18:37:15'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/7/2020 18:37:17'!
ERROR!

!methodRemoval: ReceptiveAccount #setRootAs: stamp: 'DB 11/7/2020 18:37:52'!
setRootAs: aPortfolio

	root := aPortfolio !

Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 18:38:09'!
Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset methodsFor: 'nil' stamp: 'DB 11/7/2020 18:38:36' overrides: 16896425!
initialize 
	parents := OrderedCollection new.! !
!Asset methodsFor: 'as yet unclassified' stamp: 'DB 11/7/2020 18:38:56'!
parents 
	^parents ! !
!Asset methodsFor: 'as yet unclassified' stamp: 'DB 11/7/2020 18:39:25'!
addParent: aParent
	parents add: aParent ! !

----SNAPSHOT----(7 November 2020 18:40:04) CuisUniversity-4384.image priorSource: 17315763!

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 18:40:10'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: ReceptiveAccount #addParent: stamp: 'DB 11/7/2020 18:40:24'!
addParent: aPortfolio

	parents add: aPortfolio !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 11/7/2020 18:40:49' prior: 50873022 overrides: 16896425!
initialize

	transactions := OrderedCollection new.! !

Object subclass: #Asset
	instanceVariableNames: 'asset parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 11/7/2020 18:41:19'!
Object subclass: #Asset
	instanceVariableNames: 'asset parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Asset methodsFor: 'initialization' stamp: 'DB 11/7/2020 18:41:45'!
initializeWith: anAsset 
	parents := OrderedCollection new.
	
	asset := anAsset! !

!methodRemoval: Asset #initialize stamp: 'DB 11/7/2020 18:41:58'!
initialize 
	parents := OrderedCollection new.!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/7/2020 18:42:22' prior: 50870866!
hasRegistered: aTransaction 

	assets do: [:anAssets | 
		(anAssets value transactions includes: aTransaction) ifTrue: [^true]
	].

	^false.! !
!Asset methodsFor: 'operations' stamp: 'DB 11/7/2020 18:42:38'!
asset  
	^asset ! !

----QUIT----(7 November 2020 19:31:41) CuisUniversity-4384.image priorSource: 17331468!

----STARTUP---- (8 November 2020 11:01:56) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Asset category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 11:10:03'!
Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Asset #asset stamp: 'DB 11/8/2020 11:21:49'!
asset  
	^asset !
!Asset methodsFor: 'initialization' stamp: 'DB 11/8/2020 11:22:04' overrides: 16896425!
initialize

	parents := OrderedCollection new.! !

!methodRemoval: Asset #initializeWith: stamp: 'DB 11/8/2020 11:22:12'!
initializeWith: anAsset 
	parents := OrderedCollection new.
	
	asset := anAsset!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!methodRemoval: Portfolio #addParent: stamp: 'DB 11/8/2020 11:23:14'!
addParent: aPortfolio

	parents add: aPortfolio !

Object subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 11:23:31'!
Object subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 11:24:32'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 11:24:42'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:25:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:25:16'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:25:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:25:16'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:25:16'!
ERROR!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:25:16'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 11:25:48' prior: 50873156!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].

	"(anAsset parent = self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]."
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:25:53'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:25:53'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:25:57'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:26:44'!
ERROR!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:27:18'!
ERROR!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'DB 11/8/2020 11:28:11' prior: 50873280 overrides: 50873337!
initialize

	transactions := OrderedCollection new.
	super initialize ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:28:20'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:28:20'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:28:20'!
FAILURE!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:28:30'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:28:30'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:28:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:28:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:28:33'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:28:33'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:28:38'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:28:38'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:28:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:28:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:28:38'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:28:42'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:28:42'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:28:42'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:28:42'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:28:42'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:28:42'!
FAILURE!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:30:36'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:30:36'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:30:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:30:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:30:42'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:30:42'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:30:45'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:30:45'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:30:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:30:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:30:45'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:30:52'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:30:52'!
FAILURE!

anAsset!
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:33:34'!
isRoot 
	^parents size = 0! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:35:17'!
roots 
	^parents! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:35:45' prior: 50873720!
roots 
	^parents ! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:36:02' prior: 50873724!
roots 
	^parents at: 1! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:36:38' prior: 50873728!
roots 
	^parents! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 11:38:52' prior: 50873458!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].

	"(anAsset parent = self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]."
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: anAsset) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 11:39:32'!
include: anAsset
	^false! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:41:03'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:41:03'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 11:50:05'!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 portfolio6 account |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	rootPortfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	portfolio6 := Portfolio new.
	
	account := ReceptiveAccount new.
	

	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	
	
	

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 11:50:28' prior: 50873816!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 account |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	rootPortfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 11:51:00' prior: 50873839!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 account |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	rootPortfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 11:51:05'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:51:05'!
ERROR!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:51:05'!
ERROR!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:51:24'!
ERROR!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:51:40'!
ERROR!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:52:00'!
ERROR!

Asset subclass: #Portfolio
	instanceVariableNames: 'name assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 11:52:37'!
Asset subclass: #Portfolio
	instanceVariableNames: 'name assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'DB 11/8/2020 11:53:12'!
initializeWith: aName
	
	assets := OrderedCollection new.
	
	parents := OrderedCollection new.
	
	name := aName ! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 11:54:13' prior: 50873859!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:54:21'!
ERROR!
!Portfolio class methodsFor: 'nil' stamp: 'DB 11/8/2020 11:55:05'!
initializeWith: aName
	
	! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 11:57:03' prior: 50874012!
initializeWith: aName
	
	self new initializeWith: aName! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 11:57:12' prior: 50874016!
initializeWith: aName
	
	^self new initializeWith: aName! !

anAsset!

anAsset!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 11:59:39'!
ERROR!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 11:59:57' prior: 50873979!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:01:21'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:02:39' prior: 50873736!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].

	"(anAsset parent = self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]."
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:03:10'!
FAILURE!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:03:35'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:03:35'!
FAILURE!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:03:35'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:03:44'!
FAILURE!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 12:05:02' prior: 50872808!
test16Cycle 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio initializeWith: 'P1'.
	
	portfolio2 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:05:03'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:08:03'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:08:17'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:08:17'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:08:54' prior: 50874063!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

(assets includes: anAsset)!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:11:39' prior: 50874174!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: self) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:13:45' prior: 50874192!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: anAsset ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:13:48'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:13:51'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:13:51'!
ERROR!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:13:51'!
ERROR!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:14:10'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:15:21' prior: 50874209!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset parents do: [:aParentAsset | 
		(aParentAsset include: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:15:35'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:15:35'!
FAILURE!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:15:35'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:15:39'!
FAILURE!

anAsset parents!

self at: 1!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:22:46' prior: 50872888 overrides: 50873755!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset isKindOf: Portfolio)  ifTrue: [^aChildAsset include: anAsset 	].
		(aChildAsset isKindOf: ReceptiveAccount ) ifTrue: [(aChildAsset  = anAsset ) ifTrue: [^true.].].
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:23:19'!
PASSED!

----SNAPSHOT----(8 November 2020 12:23:40) CuisUniversity-4384.image priorSource: 17333267!
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:30:17' prior: 50873252!
parents 
	^parents! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:30:30' prior: 50874295!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aParentAsset | 
		(aParentAsset include: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:30:42' prior: 50874398!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset include: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset include: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:32:17' prior: 50873732!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		roots := aParent roots. 
	]! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:32:30' prior: 50874432!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		roots add: aParent roots. 
	]! !

----SNAPSHOT----(8 November 2020 12:33:23) CuisUniversity-4384.image priorSource: 17367697!
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:34:47' prior: 50874439!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		(aParent isRoot) ifTrue: [ roots add: aParent ] ifFalse: [ aParent roots]
	]! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:34:50' prior: 50874449!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		(aParent isRoot) ifTrue: [ roots add: aParent ] ifFalse: [ aParent roots ]
	]! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:35:03' prior: 50874457!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		(aParent isRoot) ifTrue: [ roots add: aParent ] ifFalse: [ aParent roots ]
	].

	^roots.! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:35:40' prior: 50874465!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		(aParent isRoot) ifTrue: [ roots add: aParent ] ifFalse: [ roots addAll: aParent roots ]
	].

	^roots.! !

----SNAPSHOT----(8 November 2020 12:35:49) CuisUniversity-4384.image priorSource: 17369428!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:36:03'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:39:31'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:39:31'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 12:40:37' prior: 50874029!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 12:40:53' prior: 50874607!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 12:41:11' prior: 50874640!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [portfolio5 add: rootPortfolio1 .] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:41:15'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:41:15'!
PASSED!
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:42:35'!
add: anAsset
	^self subclassResponsibility ! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:43:05'!
balance
	^self subclassResponsibility ! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:44:20'!
register: aTransaction
	^self subclassResponsibility ! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:44:43'!
transactions
	^self subclassResponsibility ! !
!Asset methodsFor: 'operations' stamp: 'DB 11/8/2020 12:45:22'!
hasRegistered: aTransaction
	^self subclassResponsibility ! !

!methodRemoval: Asset #register: stamp: 'DB 11/8/2020 12:47:40'!
register: aTransaction
	^self subclassResponsibility !

!methodRemoval: Asset #add: stamp: 'DB 11/8/2020 12:48:22'!
add: anAsset
	^self subclassResponsibility !

!methodRemoval: Asset #parents stamp: 'DB 11/8/2020 12:49:08'!
parents 
	^parents!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:49:12'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:49:12'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:51:34' prior: 50874377 overrides: 50873755!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		
		aChildAsset xxx: anAsset.
		
		"(aChildAsset isKindOf: Portfolio)  ifTrue: [^aChildAsset include: anAsset 	].
		(aChildAsset isKindOf: ReceptiveAccount ) ifTrue: [(aChildAsset  = anAsset ) ifTrue: [^true.].]."
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:52:06'!
xxx: anAsset 

	^self include: anAsset.
	
	
	

	! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/8/2020 12:52:37'!
xxx: anAsset		
	^self  = anAsset ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:52:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:52:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:52:53'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:52:53'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:52:53'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:52:53'!
FAILURE!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:52:53'!
FAILURE!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:52:53'!
FAILURE!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:52:53'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:53:23' prior: 50874865 overrides: 50873755!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		
		(aChildAsset xxx: anAsset) ifTrue: [^true]
		
		"(aChildAsset isKindOf: Portfolio)  ifTrue: [^aChildAsset include: anAsset 	].
		(aChildAsset isKindOf: ReceptiveAccount ) ifTrue: [(aChildAsset  = anAsset ) ifTrue: [^true.].]."
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 12:53:30'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 12:53:30'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 12:54:18' prior: 50874948 overrides: 50873755!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset xxx: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:01:31' prior: 50874878!
xxx: anAsset 

	(self = anAsset) ifTrue: [^true] ifFalse: [^self include: anAsset ]
	"^self include: anAsset."
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:01:42' prior: 50875023 overrides: 50873755!
include: anAsset 
	
	"(self = anAsset) ifTrue: [^true]."

	assets do: [ :aChildAsset | 
		(aChildAsset xxx: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 13:01:47'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 13:01:47'!
FAILURE!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 13:01:47'!
FAILURE!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:02:10' prior: 50875039 overrides: 50873755!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset xxx: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:02:28' prior: 50875031!
xxx: anAsset 

	^self include: anAsset 
	"^self include: anAsset."
	
	
	

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:02:30' prior: 50875120!
xxx: anAsset 

	^self include: anAsset 
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:02:35'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

!testRun: #PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 13:02:36'!
PASSED!

----SNAPSHOT----(8 November 2020 13:02:40) CuisUniversity-4384.image priorSource: 17370589!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:05:48' prior: 50872775!
test15Cycle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:06:59'!
test15CannotCreateOneWayCicle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!methodRemoval: PortfolioTest #test15Cycle stamp: 'DB 11/8/2020 13:06:59'!
test15Cycle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:07:09'!
test15CannotCreateOneWayCycle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!methodRemoval: PortfolioTest #test15CannotCreateOneWayCicle stamp: 'DB 11/8/2020 13:07:09'!
test15CannotCreateOneWayCicle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.

	self should: [portfolio3 add: portfolio1.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:09:03'!
test16ParentAndChildCannotContainSameTheAccount 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio initializeWith: 'P1'.
	
	portfolio2 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !

!methodRemoval: PortfolioTest #test16Cycle stamp: 'DB 11/8/2020 13:09:03'!
test16Cycle 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio initializeWith: 'P1'.
	
	portfolio2 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.

	self should: [portfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:09:41'!
test17CannotCreateACycleWithMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [portfolio5 add: rootPortfolio1 .] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.

	! !

!methodRemoval: PortfolioTest #test17CycleMultipleRoots stamp: 'DB 11/8/2020 13:09:41'!
test17CycleMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .

	self should: [rootPortfolio1 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio2 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [rootPortfolio3 add: account.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
		
	self should: [portfolio5 add: rootPortfolio1 .] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.

	!
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/8/2020 13:11:19'!
createEmptyPortfolioAndCheckBalance

	| portfolio |
	
	portfolio := Portfolio new.

	self assert: 0 equals: portfolio balance! !
!PortfolioTest methodsFor: 'balance' stamp: 'DB 11/8/2020 13:11:19' prior: 50870193!
test01PortfolioHaveZeroAsBalanceWhenCreated 

	self createEmptyPortfolioAndCheckBalance.
! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:12:14' prior: 50870675!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	account1 transactions do: [ :aTransaction |
		self assert: (portfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:21:10'!
xxx: anAccount xx: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:21:33' prior: 50870831!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self xxx: account2 xx: portfolio .! !

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:21:38'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:21:38'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:21:38'!
FAILURE!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:21:38'!
FAILURE!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:21:54'!
FAILURE!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:22:15'!
FAILURE!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:21:33' prior: 50875404!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self xxx: account2 xx: portfolio .! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 21:01:08' prior: 50875446!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account2 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/4/2020 21:01:08' prior: 50875463!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	account2 transactions do: [ :aTransaction |
		self deny: (portfolio hasRegistered: aTransaction )
	].! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:24:06'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:24:06'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:24:41'!
doesAccount: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].! !

!methodRemoval: PortfolioTest #xxx:xx: stamp: 'DB 11/8/2020 13:24:41'!
xxx: anAccount xx: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:25:05'!
doesAccountExist: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].! !

!methodRemoval: PortfolioTest #doesAccount:In: stamp: 'DB 11/8/2020 13:25:05'!
doesAccount: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:25:24'!
doesAccountDontExist: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self deny: (aPortfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:25:48' prior: 50870597!
test06HasRegisteredReturnsFalseWithAnEmptyPortfolio

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	self doesAccountDontExist: account1 In: portfolio.! !

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:25:52'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:26:19' prior: 50875383!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	self doesAccountExist: account1 In: portfolio .! !

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:26:22'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:26:22'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:26:22'!
PASSED!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 13:26:56' prior: 50875482!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self doesAccountDontExist: account2 In: portfolio .! !

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:27:00'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:27:00'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:27:00'!
PASSED!
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/8/2020 13:28:24' prior: 50871732!
test11PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self doesAccountExist: account1 In: portfolio .
	self doesAccountExist: account2 In: portfolio.! !
!PortfolioTest methodsFor: 'transactions' stamp: 'DB 11/8/2020 13:28:46' prior: 50871346!
test10PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio  account |
	
	portfolio := Portfolio new.

	account := ReceptiveAccount  new.
	
	Deposit register: 89 on: account.
	Deposit register: 78 on: account.
	Deposit register: 56 on: account.
	
	portfolio add: account.
	
	self doesAccountExist: account In: portfolio .! !

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:28:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:28:52'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:28:52'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:30:48'!
xx:  anAsset1 in: anAsset2
	

	self should: [anAsset1 add: anAsset2.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:30:52' prior: 50875711!
xx:  anAsset1 in: anAsset2
	
	self should: [anAsset1 add: anAsset2.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:31:10' prior: 50871796!
test12DuplicatedAccountOrPortfolioError
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self xx: portfolio in: portfolio.! !

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:31:13'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:31:13'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:31:13'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:31:13'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:31:13'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:31:13'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:31:34' prior: 50872146!
test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self xx: portfolio in: account.! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:31:56' prior: 50872756!
test14TwoPortfoliosCantContaintEachother 
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self xx: portfolio2 in: portfolio1 .
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:32:12' prior: 50875235!
test15CannotCreateOneWayCycle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	self xx: portfolio3 in: portfolio1.! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:32:35' prior: 50875264!
test16ParentAndChildCannotContainSameTheAccount 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio initializeWith: 'P1'.
	
	portfolio2 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.
	
	self xx: portfolio2 in: account.
	! !
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:33:44' prior: 50875294!
test17CannotCreateACycleWithMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .
	
	self xx: rootPortfolio1 in: account.
	self xx: rootPortfolio2 in: account.
	self xx: rootPortfolio3 in: account.
	self xx: portfolio5 in: rootPortfolio1 .! !

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:33:49'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:33:49'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:33:49'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:33:49'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:33:49'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:33:49'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:35:45'!
checkNoDuplicatedAsset:  anAsset1 in: anAsset2
	
	self should: [anAsset1 add: anAsset2.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875787!
test16ParentAndChildCannotContainSameTheAccount 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio initializeWith: 'P1'.
	
	portfolio2 := Portfolio initializeWith: 'P2'.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.
	
	self checkNoDuplicatedAsset: portfolio2 in: account.
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875800!
test17CannotCreateACycleWithMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio initializeWith: 'P1'.
	rootPortfolio2 := Portfolio initializeWith: 'P2'.
	rootPortfolio3 := Portfolio initializeWith: 'P3'.
	portfolio4 := Portfolio initializeWith: 'P4'.
	portfolio5 := Portfolio initializeWith: 'P5'.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .
	
	self checkNoDuplicatedAsset: rootPortfolio1 in: account.
	self checkNoDuplicatedAsset: rootPortfolio2 in: account.
	self checkNoDuplicatedAsset: rootPortfolio3 in: account.
	self checkNoDuplicatedAsset: portfolio5 in: rootPortfolio1 .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875727!
test12DuplicatedAccountOrPortfolioError
	
	| portfolio |
	
	portfolio := Portfolio new.
	
	self checkNoDuplicatedAsset: portfolio in: portfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875775!
test15CannotCreateOneWayCycle 
	
	| portfolio1 portfolio2 portfolio3 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio3 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	portfolio2 add: portfolio3.
	
	self checkNoDuplicatedAsset: portfolio3 in: portfolio1.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875765!
test14TwoPortfoliosCantContaintEachother 
	
	| portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	portfolio1 add: portfolio2.
	
	self checkNoDuplicatedAsset: portfolio2 in: portfolio1 .
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:35:45' prior: 50875755!
test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice
	
	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	portfolio add: account.
	
	self checkNoDuplicatedAsset: portfolio in: account.! !

!methodRemoval: PortfolioTest #xx:in: stamp: 'DB 11/8/2020 13:35:45'!
xx:  anAsset1 in: anAsset2
	
	self should: [anAsset1 add: anAsset2.] 
		raise: Error 
		withMessageText: Portfolio duplicatedAccountOrPortfolioErrorDescription.
	!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:35:54'!
PASSED!

!methodRemoval: Portfolio class #initializeWith: stamp: 'DB 11/8/2020 13:37:11'!
initializeWith: aName
	
	^self new initializeWith: aName!

!methodRemoval: Portfolio #initializeWith: stamp: 'DB 11/8/2020 13:37:20'!
initializeWith: aName
	
	assets := OrderedCollection new.
	
	parents := OrderedCollection new.
	
	name := aName !

Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'DB 11/8/2020 13:37:28'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:37:32'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:37:32'!
ERROR!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:37:32'!
ERROR!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:37:48' prior: 50875856!
test16ParentAndChildCannotContainSameTheAccount 

	
	| portfolio1 portfolio2 account |
	
	portfolio1 := Portfolio new.
	
	portfolio2 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	portfolio1 add: account.
	
	portfolio1 add: portfolio2.
	
	self checkNoDuplicatedAsset: portfolio2 in: account.
	! !

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:37:49'!
PASSED!
!PortfolioTest methodsFor: 'tree' stamp: 'DB 11/8/2020 13:38:12' prior: 50875870!
test17CannotCreateACycleWithMultipleRoots

	
	| rootPortfolio1 rootPortfolio2 rootPortfolio3 portfolio4 portfolio5 account |
	
	rootPortfolio1 := Portfolio new.
	rootPortfolio2 := Portfolio new.
	rootPortfolio3 := Portfolio new.
	portfolio4 := Portfolio new.
	portfolio5 := Portfolio new.
	
	account := ReceptiveAccount new.
	
	rootPortfolio1 add: portfolio4 .
	rootPortfolio2 add: portfolio4 .
	rootPortfolio3 add: portfolio4 .
	
	portfolio4 add: account .
	portfolio4 add: portfolio5 .
	
	self checkNoDuplicatedAsset: rootPortfolio1 in: account.
	self checkNoDuplicatedAsset: rootPortfolio2 in: account.
	self checkNoDuplicatedAsset: rootPortfolio3 in: account.
	self checkNoDuplicatedAsset: portfolio5 in: rootPortfolio1 .! !

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:38:12'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:38:16'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:38:16'!
PASSED!
!Asset methodsFor: 'tree' stamp: 'DB 11/8/2020 13:39:09'!
includes: anAsset
	^false! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:39:09' overrides: 50876163!
includes: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset xxx: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:39:09' prior: 50874415!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset includes: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset include: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 13:39:10' prior: 50875126!
xxx: anAsset 

	^self includes: anAsset 
	
	

	! !

!methodRemoval: Asset #include: stamp: 'DB 11/8/2020 13:39:10'!
include: anAsset
	^false!

!methodRemoval: Portfolio #include: stamp: 'DB 11/8/2020 13:39:10'!
include: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset xxx: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:39:32'!
include: anAsset 

	^self includes: anAsset 
	
	

	! !

!methodRemoval: Portfolio #xxx: stamp: 'DB 11/8/2020 13:39:32'!
xxx: anAsset 

	^self includes: anAsset 
	
	

	!
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/8/2020 13:39:53'!
include: anAsset		
	^self  = anAsset ! !

!methodRemoval: ReceptiveAccount #xxx: stamp: 'DB 11/8/2020 13:39:53'!
xxx: anAsset		
	^self  = anAsset !
!Asset methodsFor: 'tree' stamp: 'DB 11/8/2020 13:40:17'!
include: anAsset
	^self subclassResponsibility ! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:40:24'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:40:24'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:40:24'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:40:24'!
FAILURE!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:40:24'!
FAILURE!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:40:24'!
FAILURE!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:40:24'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:40:43' prior: 50876167 overrides: 50876163!
includes: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset include: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:40:46'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:40:46'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:43:34'!
anySatisfy: anAsset 

	^self includes: anAsset 
	
	

	! !
!Asset methodsFor: 'tree' stamp: 'DB 11/8/2020 13:43:34'!
anySatisfy: anAsset
	^self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/8/2020 13:43:34' overrides: 50876364!
anySatisfy: anAsset		
	^self  = anAsset ! !

!methodRemoval: Portfolio #include: stamp: 'DB 11/8/2020 13:43:34'!
include: anAsset 

	^self includes: anAsset 
	
	

	!

!methodRemoval: Asset #include: stamp: 'DB 11/8/2020 13:43:34'!
include: anAsset
	^self subclassResponsibility !

!methodRemoval: ReceptiveAccount #include: stamp: 'DB 11/8/2020 13:43:34'!
include: anAsset		
	^self  = anAsset !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:43:57'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:43:57'!
ERROR!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:43:57'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:43:57'!
FAILURE!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:43:57'!
FAILURE!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:43:57'!
FAILURE!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:43:57'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:44:12' prior: 50876289 overrides: 50876163!
includes: anAsset 
	
	(self = anAsset) ifTrue: [^true].

	assets do: [ :aChildAsset | 
		(aChildAsset anySatisfy: anAsset) ifTrue: [^true]
	].

	^false.
	
	
	

	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:44:19'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:44:19'!
FAILURE!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:44:19'!
ERROR!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:44:55'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:44:55'!
FAILURE!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:44:55'!
ERROR!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:44:58'!
ERROR!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:45:21'!
ERROR!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:45:46' prior: 50876175!
add: anAsset 
	
	((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset includes: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:45:54'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:45:57'!
PASSED!

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:46:04'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:46:04'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:51:43' prior: 50876589!
add: anAsset 
	
	"((anAsset isKindOf: Portfolio)) ifTrue: [
		(anAsset includes: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ]
	]."

	(anAsset includes: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:51:47'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:51:47'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:51:58' prior: 50876676!
add: anAsset 
	
	(anAsset includes: self) ifTrue:  [^self class signalDuplicatedAccountOrPortfolio ].
	
	((anAsset = self) or: (assets includes: anAsset)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:52:18' prior: 50876759!
add: anAsset 
	

	((anAsset = self) or: (assets includes: anAsset) or: (anAsset includes: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:52:20' prior: 50876775!
add: anAsset 
	
	((anAsset = self) or: (assets includes: anAsset) or: (anAsset includes: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].
	
	assets add: anAsset.
	anAsset addParent: self.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:52:25'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:52:25'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:53:17'!
addTo: anAsset 

	assets add: anAsset.
	anAsset addParent: self.! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:53:33' prior: 50876789!
add: anAsset 
	
	((anAsset = self) or: (assets includes: anAsset) or: (anAsset includes: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].

	self addTo: anAsset .! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:53:39'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:53:39'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:54:09'!
assertNoDuplicated: anAsset 
	
	((anAsset = self) or: (assets includes: anAsset) or: (anAsset includes: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:54:41' prior: 50876870!
add: anAsset 

	self assertNoDuplicated: anAsset.
	
	self addTo: anAsset.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:54:46'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:54:46'!
PASSED!
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:55:54'!
assertNoDuplicatedFromRoots: anAsset 
	
	anAsset roots do: [:aRootAsset | 
		(aRootAsset includes: self ) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ]
	].

	! !
!Portfolio methodsFor: 'operations' stamp: 'DB 11/8/2020 13:56:08' prior: 50876945!
assertNoDuplicated: anAsset 
	
	((anAsset = self) or: (assets includes: anAsset) or: (anAsset includes: self)) ifTrue: [^self class signalDuplicatedAccountOrPortfolio ].
	
	self assertNoDuplicatedFromRoots: anAsset.
	! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 13:56:24'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 13:56:24'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 13:56:24'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 13:56:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 13:56:24'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 13:56:25'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 13:56:25'!
PASSED!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/8/2020 14:01:44' prior: 50871666 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		
		transactions addAll: (anAsset transactions)
	].
	^transactions.! !

!testRun: #PortfolioTest #test01PortfolioHaveZeroAsBalanceWhenCreated stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioHasTheSameBalanceAsTheReceptiveAccount stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioHasTheSameBalanceWithMoreThanOneReceptiveAccount stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioHasTheSameBalanceAsThePortfolioChild stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasTheSameBalanceWithMoreThanOneAsset stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test06HasRegisteredReturnsFalseWithAnEmptyPortfolio stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioHaveZeroTransactionsWhenIsCreated stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioHaveTheSameTransactionsThanYoursChild stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioHaveTheSameTransactionsThanYoursChilds stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test12DuplicatedAccountOrPortfolioError stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test13DuplicatedAccountOrPortfolioErrorWhenTryingToAddTheSameAccountTwice stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test14TwoPortfoliosCantContaintEachother stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test15CannotCreateOneWayCycle stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test16ParentAndChildCannotContainSameTheAccount stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

!testRun: #PortfolioTest #test17CannotCreateACycleWithMultipleRoots stamp: 'DB 11/8/2020 14:01:48'!
PASSED!

----SNAPSHOT----(8 November 2020 14:01:55) CuisUniversity-4384.image priorSource: 17393294!
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/8/2020 14:03:28' prior: 50877109 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | 
		transactions addAll: (anAsset transactions)
	].
	^transactions.! !

----QUIT----(8 November 2020 14:05:51) CuisUniversity-4384.image priorSource: 17456940!

----STARTUP---- (8 November 2020 21:22:48) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!Asset methodsFor: 'tree' stamp: 'DB 11/8/2020 21:25:13' prior: 50874473!
roots 
	| roots |	
	
	roots := OrderedCollection new.
	
	parents do: [:aParent | 
		(aParent isRoot) ifTrue: [ roots add: aParent ] ifFalse: [ roots addAllFirst: aParent roots ]
	].

	^roots.! !
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 21:34:45'!
allTransactionOf: anAccount NotIn: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self deny: (aPortfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 21:34:45' prior: 50875600!
test06HasRegisteredReturnsFalseWithAnEmptyPortfolio

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	self allTransactionOf: account1 NotIn: portfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 21:34:45' prior: 50875639!
test08HasRegisteredReturnsFalseWhenPortfolioHasMoreThanOneTransaction

	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	
	self allTransactionOf: account2 NotIn: portfolio .! !

!methodRemoval: PortfolioTest #doesAccountDontExist:In: stamp: 'DB 11/8/2020 21:34:45'!
doesAccountDontExist: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self deny: (aPortfolio hasRegistered: aTransaction )
	].!
!PortfolioTest methodsFor: 'hasRegistered' stamp: 'DB 11/8/2020 21:35:12'!
allTransactionsOf: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 21:35:12' prior: 50875687!
test10PortfolioHaveTheSameTransactionsThanYoursChild
	
	| portfolio  account |
	
	portfolio := Portfolio new.

	account := ReceptiveAccount  new.
	
	Deposit register: 89 on: account.
	Deposit register: 78 on: account.
	Deposit register: 56 on: account.
	
	portfolio add: account.
	
	self allTransactionsOf: account In: portfolio .! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 21:35:12' prior: 50875668!
test11PortfolioHaveTheSameTransactionsThanYoursChilds
	
	| portfolio account1 account2 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	account2:= ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	Deposit register: 89 on: account2.
	Deposit register: 78 on: account2.
	Deposit register: 56 on: account2.
	
	portfolio add: account1.
	portfolio add: account2.
	
	self allTransactionsOf: account1 In: portfolio .
	self allTransactionsOf: account2 In: portfolio.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'DB 11/8/2020 21:35:12' prior: 50875615!
test07HasRegisteredReturnsTrueWhenPortfolioHasOneTransaction

	| portfolio account1 |
	
	portfolio := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 75 on: account1.
	
	portfolio add: account1.
	
	self allTransactionsOf: account1 In: portfolio .! !

!methodRemoval: PortfolioTest #doesAccountExist:In: stamp: 'DB 11/8/2020 21:35:12'!
doesAccountExist: anAccount In: aPortfolio

	anAccount transactions do: [ :aTransaction |
		self assert: (aPortfolio hasRegistered: aTransaction )
	].!

----SNAPSHOT----(8 November 2020 21:36:49) CuisUniversity-4384.image priorSource: 17457317!

----QUIT----(8 November 2020 21:36:51) CuisUniversity-4384.image priorSource: 17461118!

----STARTUP---- (9 November 2020 15:14:52) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


----QUIT----(9 November 2020 15:15:26) CuisUniversity-4384.image priorSource: 17461211!

----STARTUP---- (9 November 2020 17:13:21) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:06' prior: 50877184 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	assets do: [:anAsset | transactions addAll: (anAsset transactions)].
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:11' prior: 50877328 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	assets do: [:anAsset | transactions addAll: (anAsset transactions)].
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 17:57:27' prior: 50877337 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	assets do: [:anAsset | transactions addAll: anAsset transactions].
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:03:04' prior: 50877346 overrides: 50874785!
transactions

	| transactions |
	transactions := OrderedCollection new.
	
	"assets do: [:anAsset | transactions addAll: anAsset transactions]."
	assets do: [:anAsset |anAsset addTransactionsTo: transactions.]
	
	^transactions.! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:04:17'!
addTransactionsTo: aCollectionOfTransactionss

	aCollectionOfTransactionss addAll: self transactions ! !
!Portfolio methodsFor: 'transactions' stamp: 'DB 11/9/2020 18:04:26' prior: 50877365!
addTransactionsTo: aCollectionOfTransactionss

	aCollectionOfTransactionss addAll: self transactions ! !

!classRemoval: #ReceptiveAccount stamp: 'DB 11/9/2020 18:58:34'!
Asset subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Portfolio stamp: 'DB 11/9/2020 18:58:34'!
Asset subclass: #Portfolio
	instanceVariableNames: 'assets'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Asset stamp: 'DB 11/9/2020 18:58:34'!
Object subclass: #Asset
	instanceVariableNames: 'parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Withdraw stamp: 'DB 11/9/2020 18:58:35'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Deposit stamp: 'DB 11/9/2020 18:58:35'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #AccountTransaction stamp: 'DB 11/9/2020 18:58:35'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #ReceptiveAccountTest stamp: 'DB 11/9/2020 18:58:35'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #PortfolioTest stamp: 'DB 11/9/2020 18:58:36'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TestTransfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:19:16'!
TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:24:10'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'nil' stamp: 'DB 11/9/2020 19:24:21'!
test01 

	| receiver sender transfer |
	transfer := Transfer new.
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:25:17' prior: 50878166!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer from: sender to: receiver amount: 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:26:32' prior: 50878174!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:28:33' prior: 50878183!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: sender on: 300.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:29:05' prior: 50878194!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: 300 on: sender.
	
	transfer := Transfer from: sender to: receiver amount: 200.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:30:35' prior: 50878207!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Deposit register: 300 on: sender.
	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:33:08'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:38:48' prior: 50878220!
test01 

	| receiver sender transfer |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	
	Transfer register: 200 from: sender to: receiver.
	
	transfer := Transfer new.
	transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:41:41' prior: 50878245!
test01 

	| receiver sender |
	
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:42:05'!
ERROR!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:42:05'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 19:42:23'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 19:44:40' prior: 50878274!
register: amount from: aSender to: aReceiver

	Deposit register: amount on: aReceiver. 
	Withdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:44:55'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:44:58' prior: 50878259!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:45:02'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:48:04' prior: 50878296!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:07' prior: 50878309!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	
	Transfer register: 200 from: receiver to: sender.
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:17' prior: 50878320!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	
	Transfer register: 200 from: receiver to: sender.
	self assert: sender balance = 0.
	self assert: receiver balance = 0.
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:50:21'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:50:38' prior: 50878333!
test01 

	| receiver sender |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.

	Transfer register: 200 from: sender to: receiver.
	
	self assert: sender balance = -200.
	self assert: receiver balance = 200.
	
	Transfer register: 200 from: receiver to: sender.
	self assert: sender balance = 0.
	self assert: receiver balance = 0.
	! !

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:51:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions transfers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 19:51:49'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:53:46'!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary
	
	self assert: report isEmpty ! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:54:17' prior: 50878390!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:20'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:20'!
ERROR!
!Account methodsFor: 'reports' stamp: 'DB 11/9/2020 19:54:46'!
summary
	self shouldBeImplemented.! !
!Account methodsFor: 'reports' stamp: 'DB 11/9/2020 19:54:56' prior: 50878409!
summary
	self subclassResponsibility .! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:54:57'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 19:55:37' overrides: 50878413!
summary

	^OrderedCollection new.! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:55:44'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:55:55'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:55:55'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:57:59' prior: 50878398!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	Deposit register: 200 on: account.
	
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:58:10'!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	Deposit register: 200 on: account.
	
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:53:46' prior: 50878431!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:58:39'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:58:39'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:58:39'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:58:58'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 19:59:18' prior: 50878450!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: report isEmpty ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 19:59:23'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 19:59:23'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:59:23'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 19:59:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:00:40' prior: 50878420 overrides: 50878413!
summary

	| sum |
	sum := OrderedCollection new.
	
	sum add: 'Deposit for 200'.
	
	^sum! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:00:52' prior: 50878484 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Deposit for 200'.
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:01:35' prior: 50878491 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	transactions ifEmpty: [^summary].
	
	summary add: 'Deposit for 200'.
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:01:40'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:01:40'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:01:40'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:01:40'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:18' prior: 50878440!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:02:21'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:59' prior: 50878515!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:03:18' prior: 50878531!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:03:30'!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:02:59' prior: 50878541!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:03:43'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:03:43'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:03:43'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:05:55' prior: 50878498 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	transactions ifEmpty: [^summary].
	
	((transactions at: 1) isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for 200'.].
	((transactions at: 1) isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for 200'.].

	
	^summary! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:05:56'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:00'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:06:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:00'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:06:21' prior: 50878560!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:06:27'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:08:07'!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:08:33' prior: 50878626!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Extraction for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:09:29' prior: 50878637!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:09:54' prior: 50878649!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:09:57'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:09:57'!
FAILURE!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:09:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:01' prior: 50878582 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions ifEmpty: [^summary].
	
	((transactions at: 1) isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for 200'.].
	((transactions at: 1) isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for 200'.].

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	]
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:13' prior: 50878689 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	]
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:12:19' prior: 50878709 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value.].
	].
	
	^summary! !

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:12:23'!
ERROR!

'hols' , 'chau'!

'hols' , 200!

'hols' , 200 asString !

'hols ' , 200 asString !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:13:59' prior: 50878723 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
	].
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:14:04'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:15:48'!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:17:51' prior: 50878767!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:18:20' prior: 50878786!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender  to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 20:18:38' prior: 50878801!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 20:18:46'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 20:18:46'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 20:18:46'!
FAILURE!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:26:01'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 20:27:20' prior: 50878742 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !

AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:27:34'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:28:00'!
AccountTransaction subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:34:54'!
Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:59:19'!
ProtoObject subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 20:59:30'!
ProtoObject subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 20:58:58' prior: 50878286!
register: amount from: aSender to: aReceiver



	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 20:59:36' prior: 50878933!
register: amount from: aSender to: aReceiver

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:16'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:22'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:00:25'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:03:08' prior: 50878866 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: '', aTransaction value asString]
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:03:39' prior: 50878989 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString]
		" (aTransaction isKindOf: Transfer) "
	].
	
	^summary! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:04:18' prior: 50879008 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:04:26'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:04:26'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:04:26'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:04:39'!
ERROR!
!TransferDeposit class methodsFor: 'nil' stamp: 'DB 11/9/2020 21:05:58'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferWithdraw class methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:03'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/9/2020 21:06:29'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:37'!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:06:44'!
initializeFor: aValue

	value := aValue ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:06:48'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:06:48'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:06:48'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:06:52'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:07:17' prior: 50879086!
initializeFor: aValue

	value := aValue ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:07:22' prior: 50879090!
initializeFor: aValue

	value := aValue ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:07:25'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:07:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:25'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:28'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:07:55'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:08:04'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:08:55' overrides: 50878044!
value

	^ value! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:02' overrides: 50878044!
value

	^ value! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:06'!
ERROR!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:06'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:06'!
ERROR!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:32' overrides: 50878048!
affectBalance: aBalance

	^aBalance + value ! !
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/9/2020 21:09:44' overrides: 50878048!
affectBalance: aBalance

	^aBalance - value ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:52'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:09:59'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:09:59'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:10:50' prior: 50878818!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 1.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:12:06' prior: 50879027 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].

	summary add: 'Balance = ' , self balance asString 
	
	^summary! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:12:14'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:12:14'!
ERROR!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:12:14'!
ERROR!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:13:20' prior: 50878467!
test02 

	| account  report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
	
	self assert: 1 equals: report size. 
	self assert: 'Balance = 0' equals: (report at: 1).! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:13:23'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/9/2020 21:13:35' prior: 50879224 overrides: 50878413!
summary

	| summary |
	summary := OrderedCollection new.
	
	

	transactions do: [:aTransaction |
		
		(aTransaction isKindOf: Withdraw) ifTrue: [summary add: 'Extraction for ', aTransaction value asString.].
		(aTransaction isKindOf: Deposit ) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [summary add: 'Entry by transfer of ', aTransaction value asString].
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [summary add: 'Output by transfer ', aTransaction value asString]
		
	].

	summary add: 'Balance = ' , self balance asString.
	
	^summary! !

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:13:36'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:15:08' prior: 50878608!
test03 

	| account  report |
	
	account := ReceptiveAccount new.
	Deposit register: 200 on: account.
	
	report := account summary.

	self assert: 2 equals: (report size).
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.! !

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:15:09'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:15:30' prior: 50878550!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 2 equals: (report size).
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 1) equals: 'Extraction for 200'.! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:15:35'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:15:35'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:05' prior: 50879313!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 1) equals: 'Deposit for 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:24' prior: 50879340!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 1) equals: 'Deposit for 200'.
	self assert: (report at: 2) equals: 'Extraction for 200'.
	self assert: (report at: 3) equals: 'Balance = 0'.! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:16:27'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:16:27'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:51' prior: 50879354!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 3 equals: (report size).
	
	self assert: (report at: 2) equals: 'Extraction for 200'.
	self assert: (report at: 3) equals: 'Balance = -200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:16:58' prior: 50879373!
test04

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	
	report := account summary.
	
	self assert: 2 equals: (report size).
	
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Balance = -200'.! !

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:17:04'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:28' prior: 50878661!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 3.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	self assert: (report at: 2) equals: 'Balance = 200'.! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:30' prior: 50879401!
test05

	| account  report |
	
	account := ReceptiveAccount new.
	Withdraw register: 200 on: account.
	Deposit register: 400 on: account.
	
	report := account summary.

	self assert: report size = 3.
	self assert: (report at: 1) equals: 'Extraction for 200'.
	self assert: (report at: 2) equals: 'Deposit for 400'.
	self assert: (report at: 3) equals: 'Balance = 200'.! !

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:17:33'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:38'!
FAILURE!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:38'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:17:51' prior: 50879206!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Output by transfer 200'.

	! !

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:17:54'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:18:27' prior: 50879439!
test06SalidaTransferencia

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.
	
	report := sender summary.
	self assert: report size = 2.
	self assert: (report at: 1) equals: 'Output by transfer 200'.
	self assert: (report at: 2) equals: 'Balance = -200'.
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:18:31'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:18:31'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:21:21'!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Entry by transfer of 200'.
	self assert: (report at: 2) equals: 'Balance = 200'.

	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:23:15' prior: 50879493!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 3) equals: 'Entry by transfer of 30'.
	self assert: (report at: 3) equals: 'Balance = 60'.

	! !

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:23:18'!
FAILURE!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:23:18'!
FAILURE!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:24:23' prior: 50879511!
test07

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.

	! !

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:24:24'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:24:35'!
PASSED!
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/9/2020 21:27:35'!
affectTransfer: aNeto

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'DB 11/9/2020 21:27:57' overrides: 50879566!
affectTransfer: aNeto

	^aNeto ! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:28:22' overrides: 50879566!
affectTransfer: aNeto

	^aNeto + value ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:28:36' overrides: 50879566!
affectTransfer: aNeto

	^aNeto - value ! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/9/2020 21:29:19'!
transferNet

	^transactions 
		inject: 0
		into: [ :transferNet :transaction | transaction affectTransfer: transferNet ]! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:30:10'!
test08

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet )

	! !

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:30:14'!
ERROR!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:30:14'!
ERROR!
!Withdraw methodsFor: 'balance' stamp: 'DB 11/9/2020 21:30:54' overrides: 50879566!
affectTransfer: aNeto
	^aNeto! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:31:00'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:32:49'!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.


	Transfer register: 200 from: account to: account.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:32:54' prior: 50879644!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	Transfer register: 200 from: account to: account.
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:36:43' prior: 50879651!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	
	
	self should: [Transfer register: 200 from: account to: account.] 
	 	raise: Error  
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription 
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:36:50' prior: 50879658!
test02Transfer

	| account  |
	
	account := ReceptiveAccount new.

	self should: [Transfer register: 200 from: account to: account.] 
	 	raise: Error  
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription 
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:36:53'!
ERROR!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:36:53'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:36:53'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:37:09'!
senderAndReceiverCantBeTheSameAccountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:37:38' prior: 50879703!
senderAndReceiverCantBeTheSameAccountErrorDescription
	^'sender and receiver can be the same account'! !

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:37:40'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:38:19'!
signalSenderAndReceiverCantBeTheSameAccount
	self error: self senderAndReceiverCantBeTheSameAccountErrorDescription ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:38:25'!
FAILURE!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:38:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:38:25'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:39:04' prior: 50878941!
register: amount from: aSender to: aReceiver


	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:39:07'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:39:10'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:17'!
test03zero

	| account  |
	
	account := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account to: account.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:40:25'!
ERROR!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:40:25'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:40:25'!
ERROR!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:37'!
cantTransferNegativeOrZeroAmountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:40:59' prior: 50879819!
cantTransferNegativeOrZeroAmountErrorDescription
	^'cant transfer negative or zeor amount'! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:01'!
PASSED!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:41:32'!
signalCantTransferNegativeOrZeroAmount
	^self error: self cantTransferNegativeOrZeroAmountErrorDescription ! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:41:36'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:41:44'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:42:02'!
PASSED!
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:15' prior: 50879783!
test03zero

	| account1  account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account2 to: account2.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !
!TestTransfer methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:19' prior: 50879890!
test03zero

	| account1  account2 |
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	self should: [Transfer register: 0 from: account1 to: account2.] 
	 	raise: Error  
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription 
	
	! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:24'!
FAILURE!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:24'!
FAILURE!
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/9/2020 21:43:50' prior: 50879825!
cantTransferNegativeOrZeroAmountErrorDescription
	^'cant transfer negative or zero amount'! !

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:55'!
FAILURE!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:43:55'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:43:55'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:44:46' prior: 50879749!
register: amount from: aSender to: aReceiver


	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/9/2020 21:44:50' prior: 50879952!
register: amount from: aSender to: aReceiver

	aSender= aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].

	TransferDeposit register: amount on: aReceiver. 
	TransferWithdraw register: amount on: aSender.
	
	! !

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:44:53'!
PASSED!

!testRun: #TestTransfer #test01 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test02 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test02Transfer stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test03 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test03zero stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test04 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test05 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test06SalidaTransferencia stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test07 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

!testRun: #TestTransfer #test08 stamp: 'DB 11/9/2020 21:44:59'!
PASSED!

----SNAPSHOT----(9 November 2020 22:45:33) CuisUniversity-4384.image priorSource: 17461430!

----QUIT----(9 November 2020 22:45:35) CuisUniversity-4384.image priorSource: 17547287!

----STARTUP---- (10 November 2020 19:39:45) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!classRemoval: #Transfer stamp: 'DB 11/10/2020 19:42:49'!
Object subclass: #Transfer
	instanceVariableNames: 'sender receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Withdraw stamp: 'DB 11/10/2020 19:42:49'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferWithdraw stamp: 'DB 11/10/2020 19:42:49'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferDeposit stamp: 'DB 11/10/2020 19:42:50'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TransferTransaction stamp: 'DB 11/10/2020 19:42:50'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Deposit stamp: 'DB 11/10/2020 19:42:50'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #AccountTransaction stamp: 'DB 11/10/2020 19:42:50'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccount stamp: 'DB 11/10/2020 19:42:51'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Portfolio stamp: 'DB 11/10/2020 19:42:51'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #Account stamp: 'DB 11/10/2020 19:42:51'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #TestTransfer stamp: 'DB 11/10/2020 19:42:51'!
TestCase subclass: #TestTransfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #ReceptiveAccountTest stamp: 'DB 11/10/2020 19:42:52'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTest stamp: 'DB 11/10/2020 19:42:52'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/18-Portfolio1/Portfolio-Solucion.st----!

TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTest category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 19:44:38'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 19:46:46'!
Object subclass: #Transfer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'nil' stamp: 'DB 11/10/2020 19:46:40'!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:46:49' prior: 50880836!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:48:28'!
test01TransferAffectBalance

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !

!methodRemoval: TransferTest #test01 stamp: 'DB 11/10/2020 19:48:28'!
test01

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:48:38'!
ERROR!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:48:38'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:48:50'!
register: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeRegister: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:51:13' prior: 50880885!
register: amount from: aSender to: aReceiver
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:51:14'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:51:17'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:51:44'!
test02SenderAndReceiverCantBeTheSameAccount

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 200 from: sender to: receiver.
	
	self assert: -200 equals: sender balance.
	self assert: 200 equals: receiver balance.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:53:19' prior: 50880910!
test02SenderAndReceiverCantBeTheSameAccount

	| account |
	
	account := ReceptiveAccount new.
	
	self should: [Transfer register: 200 from: account to: account]
		raise: Error 
		description: Transfer senderAndReceiverCantBeTheSameAccountErrorDescription.! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:53:24'!
ERROR!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:53:24'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:53:41'!
senderAndReceiverCantBeTheSameAccountErrorDescription
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:54:05' prior: 50880940!
senderAndReceiverCantBeTheSameAccountErrorDescription
	^'Sender and receiver cant be the same account'! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:54:07'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 19:56:34' prior: 50880897!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalSenderAndReceiverCantBeTheSameAccount].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:56:37'!
PASSED!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:57:01'!
signalAndReceiverCantBeTheSameAccount
	^self error: self senderAndReceiverCantBeTheSameAccountErrorDescription 
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:57:07'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:57:07'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 19:58:39'!
test03TransferAmountCantBeZeroOrNegative

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	self should: [Transfer register: 0 from: sender to: receiver]
		raise: Error 
		description: Transfer signalCantTransferNegativeOrZeroAmount.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 19:58:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 19:58:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:58:49'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:58:49'!
ERROR!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:58:57'!
signalCantTransferNegativeOrZeroAmount
	self shouldBeImplemented.! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 19:59:33' prior: 50881007!
signalCantTransferNegativeOrZeroAmount
	^'Cant transfer zero or negative amount'! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 19:59:34'!
FAILURE!
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:03'!
CantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:29' prior: 50881013!
signalCantTransferNegativeOrZeroAmount
	^self error: self CantTransferNegativeOrZeroAmountErrorDescription ! !
!Transfer class methodsFor: 'error handling' stamp: 'DB 11/10/2020 20:00:40'!
cantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:00:40' prior: 50881028!
signalCantTransferNegativeOrZeroAmount
	^self error: self cantTransferNegativeOrZeroAmountErrorDescription ! !

!methodRemoval: Transfer class #CantTransferNegativeOrZeroAmountErrorDescription stamp: 'DB 11/10/2020 20:00:40'!
CantTransferNegativeOrZeroAmountErrorDescription
	^'Cant transfer zero or negative amount'!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:00:47'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:00:47'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:47'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:47'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:00:55'!
ERROR!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:01:01'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:02:02' prior: 50880982!
test03TransferAmountCantBeZeroOrNegative

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	self should: [Transfer register: 0 from: sender to: receiver]
		raise: Error 
		description: Transfer cantTransferNegativeOrZeroAmountErrorDescription .! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:02:45' prior: 50880956!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount < 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:02:46'!
FAILURE!

amount < 0!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:03:45' prior: 50881087!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:03:48'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:03:51'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:03:51'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:03:51'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:07:14'!
test04

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:10:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:10:46'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:10:46'!
ERROR!
!Transfer class methodsFor: 'accessing' stamp: 'DB 11/10/2020 20:10:56'!
withdrawTransaction
	self shouldBeImplemented.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:13:46'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:13:46'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:13:46'!
ERROR!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:14:57'!
Transfer class
	instanceVariableNames: 'withdrawTransaction'!
!Transfer class methodsFor: 'accessing' stamp: 'DB 11/10/2020 20:14:55' prior: 50881155!
withdrawTransaction
	^withdrawTransaction! !

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:14:59'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:15:18'!
FAILURE!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:15:18'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'DB 11/10/2020 20:17:27'!
initializeFrom: aSenderAccoutn to: aReceiverAccount


	! !

Transfer class
	instanceVariableNames: 'depositTransaction withdrawTransaction'!

!classDefinition: 'Transfer class' category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:17:40'!
Transfer class
	instanceVariableNames: 'depositTransaction withdrawTransaction'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:18:04' prior: 50881190!
initializeFrom: aSenderAccount to: aReceiverAccount

	



	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:18:25'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:28'!
Object subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:32'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction depositTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:20:36'!
Object subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:20:19' prior: 50881203!
initializeFrom: aSenderAccount to: aReceiverAccount

	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	! !

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:07'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:14'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferWithdraw category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:22:19'!
TransferTransaction subclass: #TransferWithdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:23:36'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTransaction class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:26:25' overrides: 50880732!
register: aTransfer on: account

	| transaction |
	
	transaction := self for: aTransfer.
	account register: transaction.
		
	^ transaction! !
!TransferDeposit class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:26:53'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !
!TransferWithdraw class methodsFor: 'nil' stamp: 'DB 11/10/2020 20:27:15'!
for: aTransfer

	^ self new initializeFor: aTransfer ! !

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:27:50'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferDeposit methodsFor: 'nil' stamp: 'DB 11/10/2020 20:27:48'!
initializeFor: aTransfer 
	transfer := aTransfer ! !

TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferDeposit category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:28:02'!
TransferTransaction subclass: #TransferDeposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferTransaction category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:28:07'!
AccountTransaction subclass: #TransferTransaction
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferWithdraw methodsFor: 'nil' stamp: 'DB 11/10/2020 20:28:21'!
initializeFor: aTransfer 
	transfer := aTransfer ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:28:54' overrides: 50880718!
affectBalance: aBalance

	^aBalance - transfer value! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:29:14' overrides: 50880718!
affectBalance: aBalance
	^aBalance + transfer value! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'DB 11/10/2020 20:29:57'!
Object subclass: #Transfer
	instanceVariableNames: 'withdrawTransaction depositTransaction amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:30:03'!
initializeWith: anAmount From: aSenderAccount to: aReceiverAccount

	amount := anAmount.
	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	! !

!methodRemoval: Transfer #initializeFrom:to: stamp: 'DB 11/10/2020 20:30:11'!
initializeFrom: aSenderAccount to: aReceiverAccount

	withdrawTransaction := TransferWithdraw register: self on: aSenderAccount .
	depositTransaction := TransferDeposit register: self on: aReceiverAccount.
	
	!
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:30:22' prior: 50881103!
register: amount from: aSender to: aReceiver

	

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
 
	Deposit register: amount on: aReceiver.
	Withdraw register: amount on: aSender.! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:31:02' prior: 50881400!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:31:21' prior: 50881412!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	
! !
!Transfer class methodsFor: 'instance creation' stamp: 'DB 11/10/2020 20:32:36' prior: 50881422!
register: amount from: aSender to: aReceiver

	aSender = aReceiver ifTrue: [^self signalAndReceiverCantBeTheSameAccount ].
	
	amount <= 0 ifTrue: [^self signalCantTransferNegativeOrZeroAmount ].
	
	^self new initializeWith: amount From: aSender to: aReceiver.
	
! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:34:06'!
ERROR!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:34:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:34:06'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:34:06'!
ERROR!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:34:10'!
ERROR!
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:34:53' prior: 50881362 overrides: 50880718!
affectBalance: aBalance

	^aBalance - transfer amount! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:35:01' prior: 50881367 overrides: 50880718!
affectBalance: aBalance
	^aBalance + transfer amount! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:35:21'!
amount
	^amount
	
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:35:27'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:35:27'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:35:27'!
ERROR!

!methodRemoval: Transfer class #withdrawTransaction stamp: 'DB 11/10/2020 20:35:45'!
withdrawTransaction
	^withdrawTransaction!
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:36:05'!
withdrawTransaction

	^withdrawTransaction 
	
	
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:36:16'!
depositTransaction

	^depositTransaction 
	
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:36:24'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'DB 11/10/2020 20:36:24'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:38:08'!
test04TransferTransactionesWereRegisteredInTheAccounts

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

!methodRemoval: TransferTest #test04 stamp: 'DB 11/10/2020 20:38:08'!
test04

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:44:12'!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	
	self assert: (sender hasRegistered: transfer withdrawTransaction).
	self assert: (receiver hasRegistered: transfer depositTransaction).! !

----SNAPSHOT----(10 November 2020 20:46:52) CuisUniversity-4384.image priorSource: 17547380!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:49:29' prior: 50881541!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	
	self assert: 1 equals: sender transactions.
	self assert: 1 equals: receiver transactions.
	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:49:35'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:35'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:49:53'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:50:02' prior: 50881557!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions.
	self assert: 1 equals: receiver transactions.
	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:50:06'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:06'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:06'!
FAILURE!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:50:18'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:18'!
FAILURE!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:50:18'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:51:32' prior: 50881594!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:51:34'!
ERROR!
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:51:56'!
transfer
	self shouldBeImplemented.
	^transfer! !
!TransferTransaction methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:52:02' prior: 50881666!
transfer
	^transfer! !

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:52:04'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:52:08'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'DB 11/10/2020 20:52:08'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:53:00'!
test05SenderAndReceiverHaveTheSameTransfer

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	! !

!methodRemoval: TransferTest #test05 stamp: 'DB 11/10/2020 20:53:00'!
test05

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	transfer := Transfer register: 200 from: sender to: receiver.
	
	self assert: 1 equals: sender transactions size.
	self assert: 1 equals: receiver transactions size.
 	
	self assert: transfer equals: (sender transactions at: 1) transfer.
	self assert: transfer equals: (receiver transactions at: 1) transfer.
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:55:48'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:55:58'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:55:58'!
ERROR!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:55:58'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:56:07'!
summary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:56:49' prior: 50881761!
summary
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Balance = 0'.
	^summary.! !

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:56:53'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:56:56'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:56:56'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:57:46'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	
	report := account summary.
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:58:08' prior: 50881797!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 20:58:49' prior: 50881808!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 20:58:52'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 20:58:52'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 20:58:52'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:00:01' prior: 50881766!
summary
	| summary |
	summary := OrderedCollection new.
	
	summary add: 'Deposit for 100'.
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:00:02'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:00:13' prior: 50881820!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:00:18'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:00:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:00:18'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:01:12' prior: 50881862!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions ifNotEmpty: [summary add: 'Deposit for 100'.]
	
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:01:15' prior: 50881916!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions ifNotEmpty: [summary add: 'Deposit for 100'.].
	
	
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:01:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:01:20'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:04:17'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:04:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:04:21'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:04:21'!
FAILURE!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:04:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:06:45' prior: 50881926!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value.].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value.]
		
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:06:53'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:06:53'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:06:53'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:07:04'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:20'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:28'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:08:32'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:09:06' prior: 50882007!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value asString.].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value asString.]
		
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:09:14' prior: 50882065!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: ['Deposit for ' , aTransaction value asString].
		(aTransaction isKindOf: Withdraw ) ifTrue: ['Extraction for ', aTransaction value asString].
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:09:18'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:09:18'!
FAILURE!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:09:18'!
FAILURE!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:09:21'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:10:10' prior: 50882080!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction |
		(aTransaction isKindOf: Deposit) ifTrue: [summary add: 'Deposit for ' , aTransaction value asString].
		(aTransaction isKindOf: Withdraw ) ifTrue: [summary add: 'Extraction for ', aTransaction value asString].
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:10:15'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:10:20'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:11:13'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := account summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:12:39' prior: 50882149!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:14:08' prior: 50882163!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output bytransfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 30' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:14:14'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:14:14'!
FAILURE!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:14:14'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:16:53' prior: 50882127!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		
		summary add: aMessage, aTransaction value asString.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:16:57' prior: 50882244!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:16:58'!
ERROR!
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:17:29' overrides: 50880714!
value
	^transfer amount! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:17:46' overrides: 50880714!
value
	^transfer amount! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:17:49'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:17:49'!
FAILURE!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:17:49'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:02' prior: 50882185!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 30' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:18:04'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:17' prior: 50882338!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := sender summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := receiver summary.
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:18:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:18:20'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:18:35' prior: 50882266!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].

	summary add: 'Balance = ' , self balance asString .
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:20:12'!
transferNet

	| net |
	
	
	
	transactions do: [ :aTransaction | | aMessage |
	
	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
	
	].

	^net.! !

!methodRemoval: ReceptiveAccount #transferNet stamp: 'DB 11/10/2020 21:20:27'!
transferNet

	| net |
	
	
	
	transactions do: [ :aTransaction | | aMessage |
	
	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
	
	].

	^net.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:06'!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for of 50'.
	self assert: (report at: 3) equals: 'Output by transfer 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:21:10'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:10'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:10'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:29' prior: 50882463!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:21:33'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:33'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:21:33'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:21:41'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:25:48' prior: 50882590!
transferNet
	| net |
	net := 0.
	
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [net := net + aTransaction value].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [net := net - aTransaction value].		
	].
	^net.! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:25:52'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:27:16' prior: 50882527!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 30 from: receiver to: sender.
	Transfer register: 20 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (receiver transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:27:20'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:20'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:20'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/10/2020 21:27:34' prior: 50882609!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.

	report := receiver summary.	
	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/10/2020 21:27:36'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/10/2020 21:27:37'!
PASSED!

----SNAPSHOT----(10 November 2020 21:27:41) CuisUniversity-4384.image priorSource: 17596892!

----QUIT----(10 November 2020 21:27:43) CuisUniversity-4384.image priorSource: 17634637!

----STARTUP---- (12 November 2020 17:39:19) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:14:33'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #SummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReport category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:14:47'!
Report subclass: #SummaryReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Report methodsFor: 'nil' stamp: 'DB 11/12/2020 21:16:21'!
xxxDeposit: aDeposit
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:16:40'!
xxxTransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:17:33'!
xxxTransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:17:39'!
xxxWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'nil' stamp: 'DB 11/12/2020 21:18:02'!
summary

	^OrderedCollection new.! !

Object subclass: #Report
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:19:26'!
Object subclass: #Report
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReport category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:22:39'!
Report subclass: #SummaryReport
	instanceVariableNames: 'summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:22:37' prior: 50882785!
summary

	
	summary := OrderedCollection new.
	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:22:44' prior: 50882809!
summary

	summary := OrderedCollection new.
	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:23:35' overrides: 50882765!
xxxDeposit: aDeposit
	summary! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:25:23' prior: 50882825 overrides: 50882765!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:25:38' overrides: 50882780!
xxxWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:00' overrides: 50882775!
xxxTransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:15' overrides: 50882770!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:26:19' prior: 50882887 overrides: 50882770!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/12/2020 21:26:42'!
xxx: aReport

	self subclassResponsibility ! !
!Deposit methodsFor: 'balance' stamp: 'DB 11/12/2020 21:27:42' overrides: 50882913!
xxx: aReport
	aReport xxxDeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:28:14' overrides: 50882913!
xxx: aReport
	aReport xxxTransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:28:38' overrides: 50882913!
xxx: aReport
	aReport xxxTransferWithdraw: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/12/2020 21:28:53' overrides: 50882913!
xxx: aReport
	aReport xxxWithdraw: self! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:29:19' prior: 50882817!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'nil' stamp: 'DB 11/12/2020 21:29:31' overrides: 16896425!
initialize

	summary := OrderedCollection new.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:31:27'!
initializeWith: aTransactions

	summary := OrderedCollection new.
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:31:36' prior: 50882949!
initializeWith: aTransactions

	summary := OrderedCollection new.
	transactions := aTransactions 
	! !
!SummaryReport class methodsFor: 'nil' stamp: 'DB 11/12/2020 21:33:29'!
with: transactions

	| report |
	report := self new initializeWith: transactions
	^report.! !
!SummaryReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:33:38' prior: 50882961!
with: transactions

	| report |
	report := self new initializeWith: transactions.
	^report.! !
!SummaryReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:33:59' prior: 50882968!
with: transactions

	^self new initializeWith: transactions.! !

!methodRemoval: SummaryReport #initialize stamp: 'DB 11/12/2020 21:34:10'!
initialize

	summary := OrderedCollection new.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:10' prior: 50881726!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	
	report := (SummaryReport with: account transactions) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:15' prior: 50882984!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account transactions) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:38' prior: 50882938!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^summary.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:35:55' prior: 50883008!
summary

	transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	summary add: 'Balance = ' , self balance asString .
	^summary.! !

Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:36:26'!
Object subclass: #Report
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:36:43' prior: 50882955!
initializeWith: anAccount

	summary := OrderedCollection new.
	account := anAccount 
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:00' prior: 50883014!
summary

	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	summary add: 'Balance = ' , account balance asString .
	^summary.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:12'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:37:12'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:12'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:23' prior: 50882996!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:25'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:37:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:50' prior: 50881874!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:37:54' prior: 50881960!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:38:16' prior: 50882364!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:38:20'!
PASSED!

!methodRemoval: ReceptiveAccount #summary stamp: 'DB 11/12/2020 21:39:20'!
summary
	| summary |
	summary := OrderedCollection new.
	
	transactions do: [ :aTransaction | | aMessage |
		(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString.
	].

	summary add: 'Balance = ' , self balance asString .
	^summary.!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:39:27'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:39:27'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:39:27'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:40:04' prior: 50882673!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:40:09'!
PASSED!

Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:40:55'!
Report subclass: #TransferNet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'nil' stamp: 'DB 11/12/2020 21:42:07'!
transferNet
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:42:32' prior: 50883330!
transferNet
	
	account do: [
		
	]! !

Report subclass: #TransferNet
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'DB 11/12/2020 21:42:45'!
Report subclass: #TransferNet
	instanceVariableNames: 'net'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:02' prior: 50883334!
transferNet
	
	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	
	^net.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:08' prior: 50883350!
transferNet
	
	account transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].
	^net.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:29' overrides: 50882765!
xxxDeposit: aDeposit
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:43:57' overrides: 50882770!
xxxTransferDeposit: aDeposit
	net := net + aDeposit value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:44:44' overrides: 50882775!
xxxTransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:44:54' overrides: 50882780!
xxxWithdraw: aDeposit
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:45:10' prior: 50883253!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (Transfer sender transferNet ).
	
	! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:45:31'!
initializeWith: anAccount

	net := 0.
	account := anAccount 
	! !
!TransferNet class methodsFor: 'nil' stamp: 'DB 11/12/2020 21:46:11'!
with: anAccount

	^self new initializeWith: anAccount.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:50:42' prior: 50883384!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: (TransferNet with: sender transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:50:45'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:50:45'!
FAILURE!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:50:45'!
FAILURE!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'DB 11/12/2020 21:51:39'!
transferNet
	| net |
	net := 0.
	
	transactions do: [ :aTransaction | 
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [net := net + aTransaction value].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [net := net - aTransaction value].		
	].
	^net.!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:51:47'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:51:47'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:51:47'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:52:54'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:53:10' prior: 50883420!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNet with: sender) transferNet ).
	
	! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:13'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:53:37' prior: 50883536!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNet with: receiver) transferNet ).
	
	! !

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:39'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:53:42'!
PASSED!

!classRenamed: #TransferNet as: #TransferNetReport stamp: 'DB 11/12/2020 21:56:24'!
Smalltalk renameClassNamed: #TransferNet as: #TransferNetReport!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/12/2020 21:56:25' prior: 50883566!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNetReport with: receiver) transferNet ).
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/12/2020 21:56:41'!
PASSED!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/2020-2c/14-Numeros/Solucion/Numero-Solution-3.st----!

----QUIT----(13 November 2020 10:04:31) CuisUniversity-4384.image priorSource: 17634731!

----STARTUP---- (14 November 2020 15:32:16) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!

!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:38:25' prior: 50882830 overrides: 50882765!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:39:00' prior: 50883040!
summary

	account xxx: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:39:36'!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: self.
	].! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:39:49'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:39:49'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:39:53'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:40:13'!
ERROR!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:41:16' prior: 50884630!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:41:22'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:41:24'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:41:25'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:41:25'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:41:30'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:41:30'!
PASSED!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:41:57' prior: 50883357!
transferNet

	account xxx: self.
	^net.! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:42:00'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:42:00'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:43:20'!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	

	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:43:52' prior: 50884775!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.

	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:43:55'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:43:55'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:44:00' prior: 50884786!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:44:57'!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:45:51' prior: 50884844!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: '' equals: (report at: 1). 
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:46:17' prior: 50884857!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 0' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:46:19'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:19'!
FAILURE!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:19'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:46:25' prior: 50884871!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:46:28'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:46:29'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:46:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:47:38'!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:48:44' prior: 50884984!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:49:03' prior: 50885007!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 15:49:06'!
PASSED!
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxDeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxTransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport
	aReport xxxTransferWithdraw: self! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/14/2020 15:53:18'!
doit: aReport

	self subclassResponsibility ! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:53:18' overrides: 50885114!
doit: aReport
	aReport xxxWithdraw: self! !

!methodRemoval: Deposit #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxDeposit: self!

!methodRemoval: TransferDeposit #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxTransferDeposit: self!

!methodRemoval: TransferWithdraw #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxTransferWithdraw: self!

!methodRemoval: AccountTransaction #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport

	self subclassResponsibility !

!methodRemoval: Withdraw #xxx: stamp: 'DB 11/14/2020 15:53:18'!
xxx: aReport
	aReport xxxWithdraw: self!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:53:45'!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50884735!
transferNet

	account doit: self.
	^net.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50884624!
summary

	account doit: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!Account methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:53:45' prior: 50885141!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !

!methodRemoval: Account #xxx: stamp: 'DB 11/14/2020 15:53:45'!
xxx: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 15:56:04'!
reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:04' prior: 50885153!
summary

	account reportTo: self.
	summary add: 'Balance = ' , account balance asString .
	^summary.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:04' prior: 50885148!
transferNet

	account reportTo: self.
	^net.! !

!methodRemoval: Account #doit: stamp: 'DB 11/14/2020 15:56:04'!
doit: aReport

	self transactions do: [ :aTransaction | 
		aTransaction xxx: aReport.
	].!
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxDeposit: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxWithdraw: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport
	aReport xxxTransferDeposit: self! !
!AccountTransaction methodsFor: 'balance' stamp: 'DB 11/14/2020 15:56:28'!
reportTo: aReport

	self subclassResponsibility ! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:56:28' overrides: 50885206!
reportTo: aReport
	aReport xxxTransferWithdraw: self! !

!methodRemoval: Deposit #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxDeposit: self!

!methodRemoval: Withdraw #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxWithdraw: self!

!methodRemoval: TransferDeposit #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxTransferDeposit: self!

!methodRemoval: AccountTransaction #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport

	self subclassResponsibility !

!methodRemoval: TransferWithdraw #doit: stamp: 'DB 11/14/2020 15:56:28'!
doit: aReport
	aReport xxxTransferWithdraw: self!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10'!
reportADeposit: aDeposit
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10' overrides: 50885234!
reportADeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:10' overrides: 50885234!
reportADeposit: aDeposit
	! !

!methodRemoval: Report #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	self subclassResponsibility !

!methodRemoval: SummaryReport #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	summary add: 'Deposit for ', aDeposit value asString.!

!methodRemoval: TransferNetReport #xxxDeposit: stamp: 'DB 11/14/2020 15:57:10'!
xxxDeposit: aDeposit
	!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32'!
reportATransferDeposit: aTransferDeposit
	self subclassResponsibility ! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32' overrides: 50885261!
reportATransferDeposit: aDeposit
	net := net + aDeposit value.! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:32' overrides: 50885261!
reportATransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .! !

!methodRemoval: Report #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aTransferDeposit
	self subclassResponsibility !

!methodRemoval: TransferNetReport #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aDeposit
	net := net + aDeposit value.!

!methodRemoval: SummaryReport #xxxTransferDeposit: stamp: 'DB 11/14/2020 15:57:32'!
xxxTransferDeposit: aDeposit
	summary add: 'Entry by transfer of ', aDeposit value asString .!
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52'!
reportATransferWithdraw: aTransferWithdraw
	self subclassResponsibility ! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52' overrides: 50885294!
reportATransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:57:52' overrides: 50885294!
reportATransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.! !

!methodRemoval: Report #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aTransferWithdraw
	self subclassResponsibility !

!methodRemoval: SummaryReport #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."!

!methodRemoval: TransferNetReport #xxxTransferWithdraw: stamp: 'DB 11/14/2020 15:57:52'!
xxxTransferWithdraw: aTransferWithdraw
	net := net - aTransferWithdraw value.!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aDeposit
	! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."! !
!Report methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:09'!
reportAWithdraw: aTransferWithdraw
	self subclassResponsibility ! !

!methodRemoval: TransferNetReport #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aDeposit
	!

!methodRemoval: SummaryReport #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .
	
	"(aTransaction isKindOf: Deposit) ifTrue: [aMessage := 'Deposit for '].
		(aTransaction isKindOf: Withdraw ) ifTrue: [aMessage := 'Extraction for '].	
		(aTransaction isKindOf: TransferWithdraw ) ifTrue: [aMessage := 'Output by transfer of '].
		(aTransaction isKindOf: TransferDeposit ) ifTrue: [aMessage := 'Entry by transfer of '].		
		summary add: aMessage, aTransaction value asString."!

!methodRemoval: Report #xxxWithdraw: stamp: 'DB 11/14/2020 15:58:09'!
xxxWithdraw: aTransferWithdraw
	self subclassResponsibility !
!Deposit methodsFor: 'balance' stamp: 'DB 11/14/2020 15:58:35' prior: 50885192 overrides: 50885206!
reportTo: aReport
	aReport reportADeposit: self! !
!TransferDeposit methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:44' prior: 50885201 overrides: 50885206!
reportTo: aReport
	aReport reportATransferDeposit: self! !
!TransferWithdraw methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:58:52' prior: 50885211 overrides: 50885206!
reportTo: aReport
	aReport reportATransferWithdraw: self! !
!Withdraw methodsFor: 'initialization' stamp: 'DB 11/14/2020 15:59:02' prior: 50885196 overrides: 50885206!
reportTo: aReport
	aReport reportAWithdraw: self! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 15:59:07'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 15:59:07'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 15:59:10'!
ERROR!
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:59:51' prior: 50885357 overrides: 50885375!
reportAWithdraw: aDeposit
	summary add: 'Extraction for ', aDeposit value asString .! !
!SummaryReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 15:59:56' prior: 50885300 overrides: 50885294!
reportATransferWithdraw: aDeposit
	summary add: 'Output by transfer of ', aDeposit value asString .! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 16:00:03'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 16:00:03'!
ERROR!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:05'!
ERROR!
!Account methodsFor: 'transactions' stamp: 'DB 11/14/2020 16:00:30' prior: 50885169!
reportTo: aReport

	self transactions do: [ :aTransaction | 
		aTransaction reportTo: aReport.
	].! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test10Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test11Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!

!testRun: #TransferTest #test12Summary stamp: 'DB 11/14/2020 16:00:34'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:01:52'!
test10SummaryReportPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10Summary stamp: 'DB 11/14/2020 16:01:52'!
test10Summary

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:02:11'!
test10SummaryPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10SummaryReportPortfolioWithoutAccounts stamp: 'DB 11/14/2020 16:02:11'!
test10SummaryReportPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:03:22'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !

!methodRemoval: TransferTest #test10SummaryPortfolioWithoutAccounts stamp: 'DB 11/14/2020 16:03:22'!
test10SummaryPortfolioWithoutAccounts

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:06:56'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !

!methodRemoval: TransferTest #test11Summary stamp: 'DB 11/14/2020 16:06:56'!
test11Summary

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:07:54'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!methodRemoval: TransferTest #test12Summary stamp: 'DB 11/14/2020 16:07:54'!
test12Summary

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:20:06'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:20:40'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:20:53' prior: 50885742!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:06'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:20'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:33'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:21:46'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:22:06'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:22:21'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	! !

!methodRemoval: TransferTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:22:29'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!

!methodRemoval: TransferTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:22:34'!
test07SummaryReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:22:39'!
test08SummaryReportForWithdrawReturnsBalanceAndWithdraw

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:22:42'!
test09SummaryReportForTransferReturnsBalanceAndTransferTransaction

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test09TransferNet stamp: 'DB 11/14/2020 16:22:45'!
test09TransferNet

	| receiver sender report |
	
	receiver := ReceptiveAccount new.
	sender := ReceptiveAccount new.
	
	Deposit register: 100 on: receiver.
	Withdraw register:  50 on: receiver.
	Transfer register: 20 from: receiver to: sender.
	Transfer register: 30 from: sender to: receiver.
	
	report := (SummaryReport with: receiver) summary. 

	self assert: report size = 5.
	self assert: (report at: 1) equals: 'Deposit for 100'.
	self assert: (report at: 2) equals: 'Extraction for 50'.
	self assert: (report at: 3) equals: 'Output by transfer of 20'.
	self assert: (report at: 4) equals: 'Entry by transfer of 30'.
	self assert: (report at: 5) equals: 'Balance = 60'.
	
	self assert: 10 equals: ((TransferNetReport with: receiver) transferNet ).
	
	!

!methodRemoval: TransferTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 16:22:49'!
test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	
	!

!methodRemoval: TransferTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 16:22:51'!
test11SummaryOfPortfolioWithOneAccount

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	!

!methodRemoval: TransferTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 16:22:56'!
test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (SummaryReport with: composedPortofolio) summary. 
 	
	self assert: 3 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Extraction for 50' equals: (report at: 2).
	self assert: 'Balance = 50' equals: (report at: 3)
	
	!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 16:23:00'!
PASSED!

!testRun: #ReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

!testRun: #ReportTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 16:23:04'!
PASSED!

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:23:36'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #PortfolioReportTest as: #PortfolioBinaryTreeReportTest stamp: 'DB 11/14/2020 16:23:58'!
Smalltalk renameClassNamed: #PortfolioReportTest as: #PortfolioBinaryTreeReportTest!

!classRenamed: #PortfolioBinaryTreeReportTest as: #PortfolioTreeReportTest stamp: 'DB 11/14/2020 16:24:31'!
Smalltalk renameClassNamed: #PortfolioBinaryTreeReportTest as: #PortfolioTreeReportTest!
!PortfolioTreeReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:24:44'!
test01! !

!methodRemoval: PortfolioTreeReportTest #test01 stamp: 'DB 11/14/2020 16:25:03'!
test01!
!PortfolioTreeReportTest methodsFor: 'nil' stamp: 'DB 11/14/2020 16:26:32'!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (SummaryReport with: account) summary. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:34:18'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:31:59' prior: 50886091!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:35:15'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:35:15'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:36:03'!
named: aName

	^self new 
		named: aName.! !

Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:37:11'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'DB 11/14/2020 16:38:20'!
initializeWith: aName

	accounts := OrderedCollection new.
	parents := OrderedCollection new.
	name := aName ! !

----SNAPSHOT----(14 November 2020 16:38:37) CuisUniversity-4384.image priorSource: 17694697!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:38:47' prior: 50886130!
named: aName

	^self new initializeWith: aName.! !
!ReceptiveAccount class methodsFor: 'no messages' stamp: 'DB 11/14/2020 16:39:22'!
named: aName

	^self new initializeWith: aName.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/14/2020 16:39:54'!
initializWith: aName
	name  := aName ! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:40:16'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:40:16'!
ERROR!
!FamilyTreeReport class methodsFor: 'nil' stamp: 'DB 11/14/2020 16:40:57'!
with: aPortfolio

	^self initializeWith: aPortfolio 
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 16:41:31'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!FamilyTreeReport methodsFor: 'nil' stamp: 'DB 11/14/2020 16:41:29'!
initializaWith: aPortfolio
	portfolio := aPortfolio .! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:42:15'!
report 
	^OrderedCollection new.! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:42:22'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:42:22'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:42:59'!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !

!methodRemoval: FamilyTreeReport #initializaWith: stamp: 'DB 11/14/2020 16:42:59'!
initializaWith: aPortfolio
	portfolio := aPortfolio .!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:09'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:09'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:43:50' prior: 50886207!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:55'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:43:55'!
ERROR!
!FamilyTreeReport class methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:44:29' prior: 50886178!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:44:37'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:44:37'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:48:02' prior: 50886195!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.

	^report! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 16:48:29' overrides: 16882612!
name

	^name! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'DB 11/14/2020 16:48:34' overrides: 16882612!
name

	^name! !
!Account methodsFor: 'balance' stamp: 'DB 11/14/2020 16:48:47' overrides: 16882612!
name

	self subclassResponsibility ! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 16:49:07'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:51:46'!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  'Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 17:01:46'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:01:46'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:01:46'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'DB 11/14/2020 17:02:16'!
initializeWith: aName
	name  := aName ! !

!methodRemoval: ReceptiveAccount #initializWith: stamp: 'DB 11/14/2020 17:02:16'!
initializWith: aName
	name  := aName !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/14/2020 17:02:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:02:32'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/14/2020 17:02:32'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:13:57' prior: 50886253!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.
	report add: portfolio children 

	^report! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:14:49' prior: 50886326!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.
	
	portfolio xxx: self.
	
	

	^report! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:15:41'!
addMe: aName in: aParent

	aParent add: aName! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 17:16:30' prior: 50886341!
addMe: aName in: aParent

	| childs dic |
	childs := dic found: aParent

	childs add: aName! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:20:14'!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: anAccount name to: self name].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:20:54' prior: 50886352!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:24:20'!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/14/2020 17:37:51' prior: 50886375!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport myParent: self name]
				
	].
	! !

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 18:03:41'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/14/2020 18:14:03'!
PASSED!

!testRun: #ReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!testRun: #ReportTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/14/2020 18:14:24'!
PASSED!

!classRenamed: #ReportTest as: #SummaryReportTest stamp: 'DB 11/14/2020 18:15:06'!
Smalltalk renameClassNamed: #ReportTest as: #SummaryReportTest!

TestCase subclass: #TransferNetReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReportTest category: 'Portfolio-Solucion' stamp: 'DB 11/14/2020 18:15:16'!
TestCase subclass: #TransferNetReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

----SNAPSHOT----(14 November 2020 18:15:34) CuisUniversity-4384.image priorSource: 17744048!

----QUIT----(14 November 2020 18:15:41) CuisUniversity-4384.image priorSource: 17754435!

----STARTUP---- (16 November 2020 10:53:49) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-Portfolio1/CuisUniversity-4384.image!


!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 10:58:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 10:58:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 10:58:12'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 10:58:12'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/14/2020 16:48:02' prior: 50886334!
report 
	| report |
	report := OrderedCollection new.
	
	report add: portfolio name.

	^report! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:00:01'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:00:01'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:00:01'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:01:54' prior: 50886277!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '			Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:02:30' prior: 50886523!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '			Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:03:11'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:03:11'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:03:11'!
FAILURE!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:04:44' prior: 50886504!
report 

	portfolio xxx: self.
	
	! !

!classDefinition: #FamilyTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 11:05:17'!
Object subclass: #FamilyTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:05:15' prior: 50886225!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:05:52' prior: 50886570!
report 

	portfolio xxx: self.
	
	
	! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:06:27' prior: 50886589!
report 

	portfolio xxx: self.
	^report.
	! !
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:07:55'!
addMeAsParent: name.

	report add name.

	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:13:40' prior: 50886364!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('		',anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport]
				
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:14:43'!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,anAccount name) to: (self name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:14:55' prior: 50886615!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name) to: (self name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:15:04' prior: 50886625!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	! !

!methodRemoval: Portfolio #xxx:myParent: stamp: 'DB 11/16/2020 11:15:42'!
xxx: aReport myParent: myParent

	aReport  addMe: (self name) to: myParent
	accounts do: [:anAccount |
		
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (anAccount name) to: (self name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount xxx: aReport myParent: self name]
				
	].
	!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:16:04' prior: 50886604!
xxx: aReport

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:16:20' prior: 50886656!
xxx: aReport

	aReport addMe: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !

!methodRemoval: FamilyTreeReport #addMe:in: stamp: 'DB 11/16/2020 11:35:56'!
addMe: aName in: aParent

	| childs dic |
	childs := dic found: aParent

	childs add: aName!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:36:25'!
addMe: name.

	report add name.

	! !

!methodRemoval: FamilyTreeReport #addMeAsParent: stamp: 'DB 11/16/2020 11:36:25'!
addMeAsParent: name.

	report add name.

	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:07'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:37:07'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:09'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:37:41'!
ERROR!
!FamilyTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:39:06' prior: 50886679!
addMe: name.

	report add: name.

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:12'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:39:12'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:14'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:39:56'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:40:53' prior: 50886665!
xxx: aReport

	aReport addMe: (self name).
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:41:03' prior: 50886725!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: ('-',anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:41:20'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:20'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:20'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:41:35' prior: 50886540!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '	-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:41:39'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:39'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:41:39'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:42:48' prior: 50886755!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '	-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:43:01'!
FAILURE!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:43:17' prior: 50886785!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  '-Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:43:20'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:43:20'!
PASSED!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:44:56' prior: 50886734!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString,anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:45:40'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:45:40'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:45:40'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:46:33' prior: 50886832!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: Character tab asString,(anAccount name)].
	]
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:46:39'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:46:39'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:46:39'!
FAILURE!

Character tab asString,(anAccount name)!

Character tab asString!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:48:51' prior: 50886853!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: '<t>',(anAccount name)].
	]
	! !

'<t>',(anAccount name)!

(String tab),(anAccount name)!

'Name ', String tab, ' Age ', String tab, ' Occupation'!

 String tab!

'Here is<t>a tab and<n>a blank line'!

	'Here is<t>a tab and<n>a blank line'!

	Character tab.!

	Character tab asString.!

	String tab!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 11:55:56' prior: 50886876!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:56:08' prior: 50886807!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:56:10'!
PASSED!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 11:56:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 11:56:14'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:56:37'!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (FamilyTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 11:59:16' prior: 50886933!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report childAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)
	
	Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:00:19' prior: 50886952!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report childAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,Character tab asString,'Portfolio de hijos' equals: (report at: 2).	
	
Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:02:55' prior: 50886978!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	
	
Portfolio de la familia
   Cuenta Mia
   Portfolio de hijos
      Cuenta de Juan
      Cuenta de Angeles

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:03:28' prior: 50887008!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (FamilyTreeReport with: familyPorfolio) report. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:03:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
FAILURE!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:03:32'!
FAILURE!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:24:05' prior: 50886893!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !

!classRenamed: #FamilyTreeReport as: #PortfolioTreeReport stamp: 'DB 11/16/2020 12:24:53'!
Smalltalk renameClassNamed: #FamilyTreeReport as: #PortfolioTreeReport!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50886903!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) report. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50887051!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) report. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:24:53' prior: 50886110!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) report. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15'!
familyTreeReport 

	portfolio xxx: self.
	^report.
	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887143!
test03TreeReportForPortfolioWithMoreThanOneChildReturnsA

	|  familyPorfolio childPortfolio report  angelesAccount childAccount juansAccount |
	
	familyPorfolio :=  Portfolio named: 'Portfolio de la familia'.
	childPortfolio := Portfolio named: 'Portfolio de hijos'.
	
	childAccount := ReceptiveAccount named: 'Cuenta mia'.
	juansAccount := ReceptiveAccount named: 'Cuenta de Juan'.
	angelesAccount := ReceptiveAccount named: 'Cuenta de Angeles'.
	
	childPortfolio add: juansAccount.
	childPortfolio add: angelesAccount.
	
	familyPorfolio add: childAccount.
	familyPorfolio add: childPortfolio.
	
	report := (PortfolioTreeReport with: familyPorfolio) familyTreeReport. 
 	
	self assert: 5 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2).
	self assert:  Character tab asString,'Portfolio de hijos' equals: (report at: 3).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Juan' equals: (report at: 4).	
	self assert:  Character tab asString,Character tab asString,'Cuenta de Angeles' equals: (report at: 5).	


	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887182!
test01TreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:15' prior: 50887124!
test02TreeReportForPortfolioWithOneChildReturnsA

	|  portfolio report myAccount |
	
	portfolio :=  Portfolio named: 'Portfolio de la familia'.
	
	myAccount := ReceptiveAccount named: 'Cuenta mia'.
	portfolio add: myAccount.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 2 equals: report size.
	self assert:  'Portfolio de la familia' equals: (report at: 1).
	self assert:  Character tab asString,'Cuenta mia' equals: (report at: 2)

	! !

!methodRemoval: PortfolioTreeReport #report stamp: 'DB 11/16/2020 12:25:15'!
report 

	portfolio xxx: self.
	^report.
	!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:25:39' prior: 50887194!
familyTreeReport 

	portfolio xxx: self tabs: ''.
	^report.
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:26:38' prior: 50887106!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:27:06' prior: 50887276!
familyTreeReport 

	portfolio familyTree: self tabs: ''.
	^report.
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:27:46'!
familyTree: aReport tabs: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	! !

!methodRemoval: Portfolio #xxx:with: stamp: 'DB 11/16/2020 12:27:46'!
xxx: aReport with: tabs

	aReport addMeAsParent: aReport name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (tabs,'-',anAccount name)].
	]
	!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:28:26' prior: 50887299!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:29:18' prior: 50887317!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:29:34'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:29:34'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:29:34'!
PASSED!
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:31:14'!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTreeReport: aPortfolio tabs: tabs.

	! !
!PortfolioTreeReport methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:31:36' prior: 50887356!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTree: aPortfolio tabs: tabs.

	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:32:06' prior: 50887330!
familyTree: aReport tabs: tabs

	aReport addMeAsParent: self tabs: tabs.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!methodRemoval: Portfolio #xxx: stamp: 'DB 11/16/2020 12:32:50'!
xxx: aReport

	aReport addMe: self name.
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [aReport addMe: (Character tab asString),(anAccount name)].
	].
	
	
	
	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:33:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:33:00'!
ERROR!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:33:01'!
ERROR!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:33:05'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:37:12' prior: 50887371!
familyTree: aReport tabs: tabs


	aReport addMe: tabs,self name.
	"aReport addMe: self name tabs: tabs."
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !
!Portfolio methodsFor: 'accounts management' stamp: 'DB 11/16/2020 12:37:14' prior: 50887412!
familyTree: aReport tabs: tabs

	aReport addMe: tabs,self name.
	"aReport addMe: self name tabs: tabs."
	accounts do: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [aReport addMe: tabs,(Character tab asString),(anAccount name)].
		(anAccount isKindOf: Portfolio) ifTrue: [anAccount familyTree: aReport tabs: tabs,(Character tab asString)].
	].
	! !

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 12:37:37'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 12:37:37'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 12:37:37'!
PASSED!
!TransferNetReportTest methodsFor: 'nil' stamp: 'DB 11/16/2020 12:41:06'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) net. 
 	
	self assert: 1 equals: report size.
	self assert: 'Balance = 0' equals: (report at: 1)
	! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:41:45' prior: 50887453!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!testRun: #TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:41:49'!
PASSED!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:42:33'!
test02TransferNetReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:42:39'!
test02TransferNetReportForDepositReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !

!methodRemoval: TransferNetReportTest #test02TransferNetReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/16/2020 12:42:42'!
test02TransferNetReportForDepositReturnsBalanceAndDeposit

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:43:04' prior: 50887494!
test02TransferNetReportForDepositReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.	! !

!testRun: #TransferNetReportTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:43:07'!
PASSED!

!testRun: #TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:43:07'!
PASSED!
!TransferNetReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:43:17'!
test01SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!methodRemoval: TransferNetReportTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:43:17'!
test06SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	!

!classRenamed: #TransferNetReportTest as: #ReportTransferNetTest stamp: 'DB 11/16/2020 12:43:56'!
Smalltalk renameClassNamed: #TransferNetReportTest as: #ReportTransferNetTest!

!classRenamed: #SummaryReportTest as: #ReportSummaryTest stamp: 'DB 11/16/2020 12:44:10'!
Smalltalk renameClassNamed: #SummaryReportTest as: #ReportSummaryTest!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:20'!
test03TransferNetReportForWithdrawReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (TransferNetReport with: account) transferNet . 
 	
	self assert: 2 equals: report size.
	self assert: 'Extraction for 50' equals: (report at: 1).
	self assert: 'Balance = -50' equals: (report at: 2)
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:36' prior: 50887574!
test03TransferNetReportForWithdrawReturnsZero

	| account report |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	report := (TransferNetReport with: account) transferNet . 
 	
	self assert: 0 equals: report
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:45:50'!
test01TransferNetReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	! !

!methodRemoval: ReportTransferNetTest #test01SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:45:50'!
test01SummaryReportForEmptyAccountReturnsOnlyBalance

	| account report |
	
	account := ReceptiveAccount new.
	
	report := (TransferNetReport with: account) transferNet. 
 	
	self assert: 0 equals: report.
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:46:47'!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (SummaryReport with: sender) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Output by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = -60' equals: (report at: 2).
	
	report := (SummaryReport with: receiver) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Entry by transfer of 60' equals: (report at: 1).
	self assert: 'Balance = 60' equals: (report at: 2)
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:47:35' prior: 50887620!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (TransferNetReport with: sender) summary. 
 	
	self assert: -60 equals: report.
	
	report := (TransferNetReport with: receiver) summary. 
 	
	self assert: 60 equals: report.
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:47:38'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:38'!
ERROR!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:38'!
ERROR!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:47:48' prior: 50887644!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	report := (TransferNetReport with: sender) transferNet . 
 	
	self assert: -60 equals: report.
	
	report := (TransferNetReport with: receiver) transferNet. 
 	
	self assert: 60 equals: report.
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:47:51'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:47:51'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:48:58'!
test10TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:49:08'!
test5TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!methodRemoval: ReportTransferNetTest #test10TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:08'!
test10TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:49:13'!
test05TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!methodRemoval: ReportTransferNetTest #test5TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:13'!
test5TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio report |
	
	portfolio := Portfolio new.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	!

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:49:19'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:49:19'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:50:18'!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:50:41' prior: 50887784!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (TransferNetReport with: portfolio) transferNet. 
 	
	self assert: 0 equals: report.
	
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 12:50:43'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 12:50:43'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:51:47'!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio report |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	report := (SummaryReport with: portfolio) summary. 
 	
	self assert: 2 equals: report size.
	self assert: 'Deposit for 100' equals: (report at: 1).
	self assert: 'Balance = 100' equals: (report at: 2)
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:54:04' prior: 50887839!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (TransferNetReport with: composedPortofolio) transferNet. 
 	
	self assert: 10 equals: report size.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:58:03'!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	Withdraw register: 50 on: simplePortfolioAccount.
	
	
	! !

!methodRemoval: ReportTransferNetTest #test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 12:58:13'!
test07TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio report |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	report := (TransferNetReport with: composedPortofolio) transferNet. 
 	
	self assert: 10 equals: report size.
	!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:05' prior: 50887879!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender reciever receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:19' prior: 50887916!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 12:59:41' prior: 50887930!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:00:18' prior: 50887944!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:00:49' prior: 50887960!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver transfer report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	transfer := Transfer register: 20 from: sender to: receiver.
	transfer := Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	self assert: 10 equals: report.
	
	
	
	
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:01:00' prior: 50887978!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver report |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	Transfer register: 20 from: sender to: receiver.
	Transfer register: 30 from: receiver to: sender.	
	
	report := (TransferNetReport with: sender) transferNet.
	
	self assert: 10 equals: report.
	
	
	
	
	
	! !

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:08'!
PASSED!

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:11'!
PASSED!

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:01:11'!
PASSED!
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:07'!
assertTransferNetAccount: anAccount value: expectedValue
 	
	self assert: expectedValue equals: (TransferNetReport with: anAccount) transferNet..
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:29' prior: 50887600!
test01TransferNetReportForEmptyAccountReturnsOnlyBalance

	| account |
	
	account := ReceptiveAccount new.
	
	self assertTransferNetAccount: account value: 0.! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:05:49' prior: 50887524!
test02TransferNetReportForDepositReturnsZero

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	self assertTransferNetAccount: account value: 0.! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:01' prior: 50887589!
test03TransferNetReportForWithdrawReturnsZero

	| account |
	
	account := ReceptiveAccount new.
	Withdraw register: 50 on: account.
	
	self assertTransferNetAccount: account value: 0.
	
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:37' prior: 50887680!
test04TransferNetReportForATransferReturnsNetBalance

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	
	Transfer register: 60 from: sender to: receiver.
	
	self assertTransferNetAccount: sender value: -60.
	self assertTransferNetAccount: receiver value: 60.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:06:51' prior: 50887743!
test05TransferNetOfAPortfolioWithoutAccountsReturnsZero

	| portfolio |
	
	portfolio := Portfolio new.
	
	self assertTransferNetAccount: portfolio value: 0.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:07:18' prior: 50887801!
test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
	portfolio := Portfolio with: account.
	
	self assertTransferNetAccount: portfolio value: 0.
	! !
!ReportTransferNetTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:07:39' prior: 50887997!
test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue

	| sender receiver |
	
	sender := ReceptiveAccount new.
	receiver := ReceptiveAccount new.
	Deposit register: 100 on: sender.
	Withdraw register: 50 on: sender.
	
	Transfer register: 20 from: sender to: receiver.
	Transfer register: 30 from: receiver to: sender.	
	
	self assertTransferNetAccount: sender value: 10.
	
	
	
	
	! !

!testRun: #ReportTransferNetTest #test01TransferNetReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test02TransferNetReportForDepositReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test03TransferNetReportForWithdrawReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test04TransferNetReportForATransferReturnsNetBalance stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test05TransferNetOfAPortfolioWithoutAccountsReturnsZero stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test06TransferNetOfAPortfolioWithOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportTransferNetTest #test07TransferNetOfAPortfolioWithMoreThanOneAccountReturnsTransferNetAccountValue stamp: 'DB 11/16/2020 13:07:43'!
PASSED!

!testRun: #ReportSummaryTest #test06SummaryReportForEmptyAccountReturnsOnlyBalance stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test07SummaryReportForDepositReturnsBalanceAndDeposit stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test08SummaryReportForWithdrawReturnsBalanceAndWithdraw stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test09SummaryReportForTransferReturnsBalanceAndTransferTransaction stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test10SummaryOfPortfolioWithoutAccountsHasOnlyBalance stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test11SummaryOfPortfolioWithOneAccount stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #ReportSummaryTest #test12SummaryOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'DB 11/16/2020 13:07:47'!
PASSED!

!testRun: #TransferTest #test01TransferAffectBalance stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test02SenderAndReceiverCantBeTheSameAccount stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test03TransferAmountCantBeZeroOrNegative stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test04TransferTransactionesWereRegisteredInTheAccounts stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!testRun: #TransferTest #test05SenderAndReceiverHaveTheSameTransfer stamp: 'DB 11/16/2020 13:07:51'!
PASSED!

!methodRemoval: PortfolioTreeReport #addMeAsParent:tabs: stamp: 'DB 11/16/2020 13:17:08'!
addMeAsParent: aPortfolio tabs: tabs

	report add: aPortfolio name.
	aPortfolio familyTree: aPortfolio tabs: tabs.

	!

!testRun: #PortfolioTreeReportTest #test01TreeReportForEmptyPortfolioReturnsEmptyReport stamp: 'DB 11/16/2020 13:17:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test02TreeReportForPortfolioWithOneChildReturnsA stamp: 'DB 11/16/2020 13:17:14'!
PASSED!

!testRun: #PortfolioTreeReportTest #test03TreeReportForPortfolioWithMoreThanOneChildReturnsA stamp: 'DB 11/16/2020 13:17:14'!
PASSED!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:17:40'!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioTreeReport with: portfolio) familyTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!classDefinition: #PortfolioSpeicalTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:18:04'!
Object subclass: #PortfolioSpeicalTreeReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:17:59' prior: 50888230!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpeicalTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

!classRenamed: #PortfolioSpeicalTreeReport as: #PortfolioSpecialTreeReport stamp: 'DB 11/16/2020 13:18:27'!
Smalltalk renameClassNamed: #PortfolioSpeicalTreeReport as: #PortfolioSpecialTreeReport!
!PortfolioTreeReportTest methodsFor: 'as yet unclassified' stamp: 'DB 11/16/2020 13:18:28' prior: 50888252!
test04SpecialTreeReportForEmptyPortfolioReturnsEmptyReport

	|  portfolio report |
	
	portfolio :=  Portfolio named: 'Empty Portfolio'.
	
	report := (PortfolioSpecialTreeReport with: portfolio) specialTreeReport. 
 	
	self assert: 1 equals: report size.
	self assert:  'Empty Portfolio' equals: (report at: 1)

	! !

----SNAPSHOT----(16 November 2020 13:28:35) CuisUniversity-4384.image priorSource: 17754529!
!PortfolioSpecialTreeReport class methodsFor: 'no messages' stamp: 'DB 11/16/2020 13:35:55'!
with: aPortfolio

	^self new initializeWith: aPortfolio 
	! !

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:36:36'!
Object subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioSpecialTreeReport category: 'Portfolio-Solucion' stamp: 'DB 11/16/2020 13:36:39'!
Object subclass: #PortfolioSpecialTreeReport
	instanceVariableNames: 'portfolio report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioSpecialTreeReport methodsFor: 'nil' stamp: 'DB 11/16/2020 13:36:34'!
initializeWith: aPortfolio
	portfolio := aPortfolio.
	report := OrderedCollection new.! !

----SNAPSHOT----(16 November 2020 13:41:55) CuisUniversity-4384.image priorSource: 17812283!