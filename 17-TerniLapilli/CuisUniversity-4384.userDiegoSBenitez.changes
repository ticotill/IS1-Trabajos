

----QUIT----(2 October 2020 16:13:01) CuisUniversity-4384.image priorSource: 12433414!

----STARTUP---- (2 October 2020 16:13:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4384.image!


!testRun: #ArithmeticObjectIntervalStrategyTest #testSingleton stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAdd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAddToCollection stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testComparing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testCopyAndGrowBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDeepCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testFirst stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testIncludes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidAt stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testLast stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReject stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testReverseDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSelect stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testShallowCopy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testSize stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #ArithmeticObjectIntervalTest #testStoreOn stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMax stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testMin stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToReverse stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #IntervalAwareMagnitudeTest #testToYourself stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #NumberToArithmeticObjectAdapterTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #UndefinedArithmeticObjectValueExceptionTest #testSignal stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testConverging stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testEqual stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testGoing stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testHash stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testIsIncidentTo stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #EdgeTest #testStarting stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testGraphPathNotFoundException stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testInvalidPath stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToFarAwayPlaces stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testPathToNeighborPlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testSamePlace stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphPathFinderTest #testWithLoops stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testAccessImmutability stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testApplyUsingDepthFistSearch stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testConvergingEdges stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithInvalidEdge stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithUnconnectedNodes stamp: 'HAW 10/2/2020 16:13:07'!
PASSED!

!testRun: #GraphTest #testCreateGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testCreationImmutability stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEdgesConvergingToSelf stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqual stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testEqualsDifferentGraphs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testGraphCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testHash stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIncludesNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsAcyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsAcyclicWhenGraphIsCyclic stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesAdjacentTo stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNodesWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testNotEmpty stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodeWithInvalidNode stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testRemoveNodes stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testSameNodesAs stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #GraphTest #testStartingEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testCreateWithCyclicGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValue stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testValueWithAnotherGraph stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #TopologicalSortTest #testWithGraphWithoutEdges stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByDivideUnitSameDomainDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testName stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameFor stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNameForUndefinedAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:08'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #BaseUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtBegin stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testDistanceToFrom stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNext stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testNextANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPrevious stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testPreviousANumberOfSomething stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CircularReadStreamTest #testRelativeDistanceFromTo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAdd stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddBags stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddEquality stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddExistingUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAddNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithBaseUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testAtSameBaseUnitAsWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCompoundMeasureImmutability stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testCreationWithMeasuresCopiesCollection stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivideByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivision stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionDistributivity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testDivisionMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeButRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testEqualWithDifferentBagSizeIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashAllNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testHashOneNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testInvalidTruncated stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsCompoundMeasurement stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModulo stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloCompoundMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByMeasure stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationByZero stamp: 'HAW 10/2/2020 16:13:09'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationCommutativity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplicationDistributivity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testMultiplyMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedDistribution stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNegatedZeroBag stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testNumberOfMeasures stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainder stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtract stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractBags stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractEquality stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractExistingUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractMeasureByCompoundMeasure stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testSubtractNothing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithBaseUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testWithWithDerivedUnits stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroDivision stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #CompoundMeasureTest #testZeroEqualsTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessing stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAccessingImmutability stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testAddUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testBreakEquivalence stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testConvertsTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testDerivedUnitIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testFromToUse stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraph stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testGraphChange stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testIsEquivalentTo stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testNoUnitConversionRule stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testRemove stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #ConversionTableTest #testUnitConversionRuleUniqueness stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:10'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #DividedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testMultiply stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #EvaluationTest #testTruncated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCanConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testCompoundMeasureConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testConvertToUsing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDefaultGraphPathFinder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testDirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testIndirectSearching stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testInvalidConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MeasureConverterTest #testSameDomainConversion stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:11'!
PASSED!

!testRun: #MinusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MinusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testDividedByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testEqualSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testFloatMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerDividedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testIntegerMultipliedByUnitTwice stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByFloat stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByInteger stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMinusInfinity stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSameDomainAsSameSimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #MultipliedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NotProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByDividedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testDivideBySimpleUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualBaseUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDerivedUnit stamp: 'HAW 10/2/2020 16:13:12'!
PASSED!

!testRun: #NullUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testName stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NullUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testConvertToIfSuccessfullDoIfFails stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #NumberMeasureProtocolTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAdd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testAmount stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBagCreationWithNumber stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testCompoundMeasureCreationWithMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivide stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testDivideMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testEqualsMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsCompoundMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMax stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMin stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModulo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testModuloMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplication stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyByUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testMultiplyMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNegative stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testPositive stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainder stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRemainderMeasure stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSameUnitAs stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testSubtract stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToBy stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToFromFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToInfinity stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testToToFixed stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testTruncated stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #PlusInfinityTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConversionFactor stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDenominator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDifferentDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDivideUnitSameDerivedUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByDividedUnitSameBaseUnitNumerator stamp: 'HAW 10/2/2020 16:13:13'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testDivideBySameDomainDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDerivedSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testEqualSameDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMeasureCreation stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyByNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testMultiplyBySimpleUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testName stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForMany stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNameForOne stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNothingAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNullMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testNumerator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testReciprocal stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDerivedUnitOfOtherDomain stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsDividedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsMultipliedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsNullUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsSameBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSameDomainAsUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalDerivedUnitTest #testSign stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testAccessing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testEqual stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testHash stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testInvalidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #ProportionalUnitConversionFunctionTest #testValidValues stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAbs stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddAssociativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddBaseUnitAndDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddCommutativity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDerivedUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentBaseUnits stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDifferentUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAddNumber stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmount stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFloat stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToFraction stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAmountCanBeConvertedToInteger stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testAtBaseUnitIfNone stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAnd stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testCompareGreaterThan stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertAmountToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertNothing stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertTo stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testConvertToBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDenominator stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivideMinusInfinity stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByDividedMeasure stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:14'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureBaseUnitOverDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByMeasureDerivedUnitOverBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testDivisionOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualDifferentBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNothingWhenRepresentSameEntity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testEqualNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testHash stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIntegerDivideCompoundMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidConvertTo stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanAgainstScalar stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidGreaterThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testInvalidNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsFraction stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testIsNothing stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThan stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testLessThanEquals stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMax stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMeasures stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMin stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testModuloOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfBaseUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplicationOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByDividedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMeasureAssociativity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyByNumber stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyFractionByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testMultiplyMinusInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegated stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNegative stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotEqual stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAnd stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNotInclusiveBetweenAndNotInclusive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testNumerator stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPositive stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForMany stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testPrintingForOne stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemFrom stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderByZero stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderCompoundMeasureByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderFloatByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderInfinity stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderIntegerByMeasure stamp: 'HAW 10/2/2020 16:13:15'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRemainderOfDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testRoundTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSameDomainAs stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsAddingWithZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSimplificationsDividingFromZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractAssociativity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractBaseUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDerivedUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractDividedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFloatWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractFractionWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractIntegerWithMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMinusInfinity stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testSubtractMultipliedMeasure stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTheZeroOfTheDomainIsEqualToZero stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAt stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToAtByNegative stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToBy stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToByDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToCollect stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToFirst stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToLast stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testToSize stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testTruncated stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnit stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testUnitNameOf stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #SimpleMeasureTest #testZeroIsEqualToTheZeroOfTheDomain stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testConvert stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocol stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEdgeProtocolBehavior stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testEqual stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #UnitConversionRuleToEdgeAdapterTest #testHash stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testFrom stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #AllDatesUniverseTest #testTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToTheNextMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayMovesToThePreviousMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #ArgentineLaw23555RuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testDifferentMonth stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayMovesToTheThirdMonday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testIncludesDayWhenDayIsSaturday stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #CardinalDayMonthRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DayOfMonthRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAdd stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAddRules stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAlwaysFulfills stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsOrderedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testAsSortedCollection stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testComposite stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testCreation stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testDo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludes stamp: 'HAW 10/2/2020 16:13:16'!
PASSED!

!testRun: #DefinedByRulesTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testInvalidDo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testIsEmpty stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveIfAbsent stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRemoveRule stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesCopy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testRulesThatInclude stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSize stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #DefinedByRulesTest #testSpecies stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testAccessing stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testEquals stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testNextFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPreviousFiltered stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSaturday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testSunday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #FilteredGregorianDateTest #testToday stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testInstanceCreating stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testPrintString stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #IntervalConstrainedInclusionRuleTest #testTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testName stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNegated stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #NegatedTimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAbsoluteDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAcceptAVisitor stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testDefaultIntervalIncrement stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIntervalStrategy stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:17'!
PASSED!

!testRun: #RelativeGregorianDateTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEvery stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDay stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #RelativeGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificDayRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testAccessing stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #SpecificObjectInclusionRuleTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testAtEnd stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testCurrent stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterStreamTest #testReset stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddArgentineLaw23555Rule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddCardinalDayMonthRuleRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFrom stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testAddRulesFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDateRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayOfMonthRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDayRule stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testDaysBetween stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testExcludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testFromString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludedIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testIncludesAll stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedIncludes stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNegatedNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextNegativeDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNextPositiveDuration stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testNumberOfDaysBetweenTwoDates stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testPrintOn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRemoveAllRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRuleFromTo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRules stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testRulesThatIncludeADate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #TimeLineFilterTest #testStream stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #UniverseTest #testDo stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FebruaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #test29OfFebruaryToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAsSmalltalkDate stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAt stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtMidnight stamp: 'HAW 10/2/2020 16:13:18'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtNoon stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testAtTimeOfDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testEqual stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testHash stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testImmutableValue stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsApril stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsJune stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testLessThan stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testMonthOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNext stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNextMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrevious stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousDayOfMonth stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInNumberOfDays stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPreviousInWeeks stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testPrintString stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTheBeginningAndTheEndOfTime stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testTo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToBy stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByDo stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningDifferentDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayBeginningSameDay stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:19'!
PASSED!

!testRun: #FixedGregorianDateTest #testToEveryDayOfMonth stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testTomorrow stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testVisitorAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYear stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #FixedGregorianDateTest #testYesterday stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAccessing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testAdd stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testComparing stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testHash stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testLessThan stamp: 'HAW 10/2/2020 16:13:20'!
PASSED!

!testRun: #GregorianDateTimeTest #testNow stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testReverse stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameDateAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSameTimeOfDayAs stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSpecialDateTimes stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testSubtract stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToByMinutesDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDay stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDateTimeTest #testWithDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testComparing stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDateOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testDivisionSymbolCanBeUseToCreateADate stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsFirstDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testIsLastDayOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNextANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromBeginningOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfMonth stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testNumberOfDaysToEndOfYear stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPreviousANumberOfDays stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumber stamp: 'HAW 10/2/2020 16:13:21'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToEveryDayNumbers stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayOfMonthTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testCommonDaysMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDayPositionedInWeek stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testDaysTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testInvalidNameCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsFriday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsMonday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSaturday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsThursday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsTuesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testIsWednesday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNextInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testNumberOfDaysSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPreviousInANumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testSinceSunday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianDayTest #testToday stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCardinalDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testDates stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testHash stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testName stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNext stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNextMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousANumberOfMonths stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPreviousMonthDefinedAs stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testTo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToByYearsDo stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthOfYearTest #testToReverse stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testApril stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testAugust stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testComma stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCommonMonthsMeasure stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testCurrent stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDecember stamp: 'HAW 10/2/2020 16:13:22'!
PASSED!

!testRun: #GregorianMonthTest #testDivisionSymbolCanBeUseToCreateADayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testFirstDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGlobalVariables stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIdentity stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsApril stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsAugust stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsDecember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testIsSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJanuary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJuly stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testJune stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLastDayOfMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMarch stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthCreation stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsFrom stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testMonthsTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNamed stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNextInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNovember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testNumberOfMonthsPerYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOctober stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOf stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testPreviousInANumberOfMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testSeptember stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToBy stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianMonthTest #testToReverse stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testAsInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanAfterATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testCanCreateATimespanBeforeATimeMeasure stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testFromInterval stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testPrintString stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianTimespanTest #testTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testCurrent stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDates stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDaysInFebruary stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testDistanceTo stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testEqual stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testFirstMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testHash stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesDateTime stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesMonthOfYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIncludesYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testInvalidYear stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testIsLeap stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDate stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastDay stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLastMonth stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testLessThan stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonths stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testMonthsOfYearsAccessing stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNext stamp: 'HAW 10/2/2020 16:13:23'!
PASSED!

!testRun: #GregorianYearTest #testNextANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNextLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDays stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testNumberOfDaysFromBaseDate stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousANumberOfYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPreviousLeapYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByDo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToByReverse stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testToNegativeBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsFrom stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testYearsTo stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #GregorianYearTest #testZeroYears stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNext stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysFromBeginningOfYear stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrevious stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #JanuaryGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #MoreThanOnePointInTimeIntervalStrategyTest #testIsValidIntervalFromToBy stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #NonSpecificThirtyOneDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testDayOfMonthCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testEqual stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testGreaterThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLastDayNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testLessThanFebruary stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testName stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumber stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysFromJanuaryFirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testNumberOfDaysIn stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyDaysGregorianMonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtieth stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #ThirtyOneDaysGregorianMonthTest #testThirtyfirst stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testAdd stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanCreateAsWrittenInEnglish stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCanNotCreateTimeOfDayWithSemiColonWhenReceiverHasSeconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testComparing stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationHour stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMilliseconds stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationMinute stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testCreationSecond stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testFirstTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testGreaterThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testHash stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testInvalidCreation stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLastTimeOfDay stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testLessThan stamp: 'HAW 10/2/2020 16:13:24'!
PASSED!

!testRun: #TimeOfDayTest #testNow stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testOneSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testPrintString stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testReverse stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testSubtract stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFrom stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeFromMidnight stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTimeToEndOfDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testToNegativeByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testTwentyFourHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeOfDayTest #testZeroHours stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testAllUnits stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testDay stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testHour stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMillisecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMinute stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testMonth stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testSecond stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testWeek stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #TimeUnitsTest #testYear stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindFirst stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickFindLast stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOf stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #BinarySearchTest #testquickIndexOfWithSemistableOrder stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testIdentitySet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testOrderedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSet stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaSeparatedOnWorksAsCommaStringAnd stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndDoesNotAddAnythingWhenHasOneElement stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithAndWhenTwoOneElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAsCommaStringAndSeparatesWithCommaButLastOneWithAndWhenMoreThanTwoElements stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageFailsWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyCalculatesItAsUsualWhenTheCollectionIsNotEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testAverageIfEmptyEvaluatesEmptyBlockWhenTheCollectionIsEmpty stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByHavingSelectsTheResultOfGroupBy stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testGroupByReturnsADictionaryThatGroupsACollectionByThePluggableKey stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testItMaintainsTheSameCollectionSpecies stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testSetEquality stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsASingleLevelOfElementsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsMoreThanTwoLevelsltReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringCollectionsItDoesNotFlattenTheStrings stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsStringsItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionContainsTwoLevelsOfElementsItReturnsTheElementsOfAllNestedCollections stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testWhenCollectionIsEmptyItReturnsTheSameCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #CollectionTest #testsAverageWorksWithABlock stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #DictionaryTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testAt stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeNumbersOutsideTheInInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludeObjectsThatAreNotNumbers stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStep stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testDoesNotIncludedNumbersThatAreInRangeButNotReachedByTheStepWithReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testFloatToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectAStepDifferentToOne stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludedNumbersRespectNegativeSteps stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIncludesNumbersInsideTheIntervalEvenForReversedIntervals stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerInterval stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntegerToByDo stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepBiggerThanOneIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndNegativeStepIncludeOnlyThatNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberAndStepBiggerThanOneIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:26'!
PASSED!

!testRun: #IntervalTest #testIntervalWithOneNumberIncludesOnlyTheNumber stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testStreamContentsWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedCollectionTest #testWriteStreamOnOrderedCollectionGrowsAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testOrder stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #OrderedDictionaryTest #testRemove stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoShouldEvaluateBlockWithEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testCombinationsAtATimeDoWorksAsExpected stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testFirstAvailableReturnsTheFirstRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedMoreThanTheSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsAllObjectsWhenRequestedTheReceiversSize stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testLastAvailableReturnsTheLastRequestedObjectsWhenTheyAreAvailable stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockForCollectionsOfOneElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNotValueSeparatedBlockOnLastElement stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #SequenceableCollectionTest #testWithIndexDoSeparatedByDoesNothingForEmptyCollection stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #TextTest #testIsText stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #WeakIdentitySetTest #test stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToInstVarReturnsAccessReceiversBranch stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllAccessToIsEmptyForVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllBroadAccessToReturnsAccessInAllHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToFailsWhenWantsToStopOnInvalidSuperclass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToPutsFirstSuperclassesFirst stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllSuperclassesUpToStopsOnRightClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testAllUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHasReferencesToInstanceVariableNamedLooksInClassOnly stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsReceiverWhenNoOtherSuperclassImplementsSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingReturnsTheTopSuperclassImplementingSelector stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testHighestClassImplementingValuesIfNoneBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testIsInstanceVariableNamedReferencedInHierarchyLooksReferencesInHierarchy stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testProtoObjectAllRegularInstVarNamesDoesNotFail stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testUnreferencedInstanceVariablesReturnsOnlyUnreferencedVariables stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #BehaviorTest #testWithAllSuperclassesUpToIncludesReceiverClass stamp: 'HAW 10/2/2020 16:13:27'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CategorizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithReplacesTheCategoryWithTheGivenOne stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #ClassTest #testDefinitionReplacingCategoryWithWorksWhenCategoryIsNil stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testDayOfWeek stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testIsDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testLessDateAndTime stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateAndTimeTest #testToByDo stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDate stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DateTest #testLessDuration stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #DurationTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #MonthTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testEqual stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testSqueakInquiries stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimeTest #testTimePartsArePositive stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #TimespanTest #testIsTimespan stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testInvalidOperations stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testPrintString stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #WeekTest #testWeekDayNames stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testCreation stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #YearTest #testIncluding stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01isGetterWhenSameSelectorAsInstanceVariableAndOnlyReturnsThatVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test01withPropertiesDoIfSelectorEvaluatesFirstBlockWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02isNotGetterWhenDifferentSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test02removePropertiesRestoresPenultimalLiteralToSelector stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03isNotGetterWhenSameSelectorAsInstanceVariableButDoesOtherThingBesidesReturningVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test03removePropertiesKeepsSelectorIfMethodDoesNotHaveProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04isSetterWhenSameKeywordSelectorAsInstanceVariableAndOnlySetsTheVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test04withPropertiesDoIfSelectorEvaluatesSecondBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05hasLiteralSuchThatTravelsListeralsWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test05isNotSetterWhenDifferentKeywordSelectorAsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06hasLiteralSuchThatTravelsListeralsWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test06isNotSetterWhenSameKeywordSelectorAsInstanceVariableButDoesNotAssignParameter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test0701withPropertiesDoReturnsNilIfMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07AccessorDescriptionIsGetterForAGetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test07withPropertiesDoEvaluatesBlockOnlyWhenMethodHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08AccessorDescriptionIsSetterForASetter stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test08hasLiteralThoroughReturnTrueWhenMethodHasPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09AccessorDescriptionIsReadForMethodThatReadsInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test09hasLiteralThoroughReturnFalseWhenMethodHasPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10AccessorDescriptionIsWriteForMethodThatWritesInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test10hasLiteralThoroughReturnTrueWhenMethodHasNoPropertiesAndHasLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11AccessorDescriptionIsWriteReadForMethodThatWritesAndReadInstanceVariable stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test11hasLiteralThoroughReturnFalseWhenMethodHasNoPropertiesAndHasNoLiteral stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test12pragmaAtReturnsPragmaIfExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test13pragmaAtReturnsNilIfPragmaDoesNotExist stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test14pragmasReturnsCollectionOfMethodPragmas stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test15pragmasReturnsEmptyCollectionWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test16propertiesReturnsAnNewAdditionalMethodStateWhenNoPropertiesHasBeenSet stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test17propertiesReturnsTheAlreadySetAdditionalMethodStateWhenHasProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test18propertyKeysAndValuesDoIteratesOverProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test19propertyKeysAndValuesDoDoesNotEvaluateBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test20propertyValueAtReturnsPropertyValueWhenSetted stamp: 'HAW 10/2/2020 16:13:28'!
PASSED!

!testRun: #CompiledMethodTest #test21propertyValueAtReturnsNilWhenPropertyIsNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test22propertyValueAtReturnsNilWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test23propertyValueAtIfAbsetReturnsPropertyValueWhenFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test24propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenNotFound stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test25propertyValueAtIfAbsetEvaluatesIfAbsentBlockWhenMethodHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test26propertyValueAtPutCreatesPropertiesWithNewOne stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test27propertyValueAtPutReplacesPropertyIfAlreadyExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test28propertyValueAtPutAddsNewPropertyIfPropertiesExisted stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test29selectorReturnsMethodSelectorWhenNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test30selectorReturnsMethodSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test31SettingSelectorWhenHasNoProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CompiledMethodTest #test32SettingSelectorWhenHasProperties stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testBounds stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiProcessWaitOnSameDelay stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #DelayTest #testMultiSchedule stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample1 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testExample2 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #MonitorTest #testMonitorNotGainingUnwantedSignalsDuringUnwinding stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #ProcessTest #testAtomicSuspend stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCritical stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testCriticalIfError stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaAfterCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testSemaInCriticalWait stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitAndWaitTimeoutTogether stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #SemaphoreTest #testWaitTimeoutMSecs stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testBecome stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!classDefinition: #BecomeTestExperiment category: 'BaseImageTests-Kernel' stamp: 'HAW 10/2/2020 16:13:29'!
Object subclass: #BecomeTestExperiment
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'BaseImageTests-Kernel'!

!testRun: #BecomeTest #testShapeMutation stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testAndAndTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testIsBoolean stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #BooleanTest #testOrOrTrueTable stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForCharacterNotIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsFalseForObjectsThatAreNotCharacters stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterSetTest #testIncludesReturnsTrueForCharacterIncluded stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'HAW 10/2/2020 16:13:29'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNilIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil0ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1Arg stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #IfNotNilTests #testIfNotNilIfNil1ArgAsVar stamp: 'HAW 10/2/2020 16:13:30'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessor stamp: 'HAW 10/2/2020 16:13:31'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForNoTimeout stamp: 'HAW 10/2/2020 16:13:33'!
PASSED!

!testRun: #ProcessorTest #testGrabProcessorOnlyForTimeout stamp: 'HAW 10/2/2020 16:13:34'!
PASSED!

!testRun: #ProcessorTest #testValueUnpreemptively stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testCollectionAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #SpecialSelectorsTest #testNumberAtSymbol stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFont stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StrikeFontTest #testBaseAndDerivedFontSanity stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateIfAbsentValuesIfAbsentBlockWhenNoAntepenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateReturnsAntepenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testAntepenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsBiggerThanSize stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testCanNotInsertShiftingRightWhenInsertionPointIsLessThanOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightLoosesLastElementAndKeepsPreviousOnes stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesElementWhenSizeIsOne stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testInsertShiftingRightReplacesLastElementWhenInsertingAtLastIndex stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsArray stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyReturnsLastWhenExist stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastIfEmptyValuesEmptyBlockWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testLastSignalsErrorWhenEmpty stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateIfAbsentValuesIfAbsentBlockWhenNoPenultimate stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateReturnsPenultimateIfExists stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #ArrayTest #testPenultimateSignalsErrorWhenCollectionIsNotBigEnough stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testIsType stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:36'!
PASSED!

!testRun: #Float32ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float32ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testIsCollection stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testSum stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroArrayDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDividend stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #Float64ArrayTest #testZeroDivisor stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testBlockClosuresCanBeUsedAsHandlingCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateFilterConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithExceptionTypeAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithFilterConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndExceptionType stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndFilterCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testCanCreateOrConditionWithOrConditionAndOrCondition stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testExceptionsFollowTheExpectedHierarchy stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testFilterConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionHandlingConditionTest #testOrConditionWorksAsExcpetedWhenHandlingException stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleOuterPass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoublePassOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testDoubleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testHandlerFromAction stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNoTimeout stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testNonResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResignalAsUnwinds stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableFallOffTheEndHandler stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumableOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testResumablePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSignalFromHandlerActionTest stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsure stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithError stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithNotification stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleEnsureTestWithUparrow stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleIsNested stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleOuter stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimplePass stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResignalAs stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleResume stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetry stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleRetryUsing stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testSimpleReturn stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ExceptionTests #testTimeoutWithZeroDuration stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testSchedulerTermination stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testTerminationDuringUnwind stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromActiveProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ProcessTerminateBug #testUnwindFromForeignProcess stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testIsArray stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testReservedIdentifiers stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ArrayLiteralTest #testSymbols stamp: 'HAW 10/2/2020 16:13:37'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test01isAtSuperclassWhenIndexIsInSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test02isNotAtSuperclassWhenIndexIsOutsideSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test03isAtClassNameWhenIndexIsInClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test04isNotAtClassNameWhenIndexIsOutsideClassName stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test05isAtInstanceVariablesWhenIndexIsInInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test06isNotAtInstanceVariablesWhenIndexIsOutsideInstanceVariablesString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test07CanAccessSuperclass stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test08isAtCategoryWhenIndexIsInCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test09isNotAtCategoryWhenIndexIsOutsideCategoryString stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test10InstanceVariablesIsTheSecondParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClassDefinitionNodeAnalyzerTest #test11CategoryIsTheFifthParameter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockDoitDecompilation stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumbering stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testBlockNumberingForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testDebuggerTempAccess stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompilationsEncoderForV3PlusClosures stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInjectIntoDecompiledDebugs stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionEM1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR2 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionLR3 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testInlineBlockCollectionSD1 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForClosureBytecodeInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testSourceRangeAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureCompilerTest #testTempNameAccessForInjectInto stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample01 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample02 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample03 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample04 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample05 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample06 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample07 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample08 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample09 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample10 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureSerializationTest #testSample11 stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testBlockTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testCopyNonLocalReturn stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testIsTrivialClosure stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testMethodTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgument stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoArgumentNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoInsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTemp stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testToDoOutsideTempNotInlined stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfter stamp: 'HAW 10/2/2020 16:13:38'!
PASSED!

!testRun: #ClosureTests #testWhileModificationAfterNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBefore stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileModificationBeforeNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTemp stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ClosureTests #testWhileWithTempNotInlined stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ContextCompilationTest #testVariablesAndOffsetsDo stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorClass stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorEqEq stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorInstVarAt stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorPerform stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #MirrorPrimitiveTests #testMirrorSize stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParseNodeEnumeratorTest #testItEnumeratesAllTheParseNodesPresentInAMethodNode stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInABlock stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesATempDeclarationNodeForEachTempInAMethod stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testItGeneratesAnEmptyTempsDeclarationNodeForAMethodWithoutTemps stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ParserTest #testRangesAreOkWhenReturningAVariableWithoutSpaceAfterThat stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test1 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test2 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test3 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test4 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test5 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #PrettyPrintingTest #test6 stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #ScannerTest #testLiteralSymbols stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test01TryingToTrimAnAlreadyTrimmedIntervalThatRepresentsASmalltalkExpressionDoesNotChangeTheOriginalInterval stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test02StartingAndEndingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test03StartingAndEndingDotsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test04GroupsOfParenthesesAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test05GroupsOfParenthesesIncludingSeparatorsAreTrimmed stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test06AnIntervalThatDoesNotHaveCharactersToExpandRemainsTheSame stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test07AnIntervalEnclosedByParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test08AnIntervalWithParenthesesOnJustOneSideCannotBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test09AnIntervalEnclosedByBackticksCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test10AnIntervalEnclosedMultipleBackticksAndParenthesesCanBeExpanded stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #SourceCodeIntervalTest #test11AsSourceCodeIntervalMessageDoesNotCreateANewSourceCodeIntervalInstance stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileIOAccessorTest #testDirectoryExists stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAbsolutePath stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testAtPut stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testConcatenation stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testCopy stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testDefaultDirectory stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testFileContents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsAbsolutePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testIsRelativePathName stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPathComponents stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testPipe stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRecursiveDelete stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRefresh stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRename stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testRoot stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #FileManTest #testStream stamp: 'HAW 10/2/2020 16:13:39'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testChangesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFileIndexFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testFilePositionFromSourcePointer stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcePointerFromFileIndexAndPosition stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #CuisSourceFileArrayTest #testSourcesFileAddressRange stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #SystemConsistencyTest #testMethodsWithUnboundGlobals stamp: 'HAW 10/2/2020 16:13:40'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeDicionary stamp: 'HAW 10/2/2020 16:13:45'!
PASSED!

!testRun: #TrieTest #testAllMesssagesLikeSet stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForObjectsThatAreNotString stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsFalseForStringsNotIncluded stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testIncludesReturnsTrueForIncludedStrings stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testKeyNotFoundSignalTheRightMessage stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration stamp: 'HAW 10/2/2020 16:13:48'!
PASSED!

!testRun: #TrieTest #testPrefixIteration2 stamp: 'HAW 10/2/2020 16:13:49'!
PASSED!

!testRun: #TrieTest #testRemoveLikeDicionary stamp: 'HAW 10/2/2020 16:13:53'!
PASSED!

!testRun: #TrieTest #testRemoveLikeSet stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #TrieTest #testSetProtocol stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #ReferenceStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testDiskProxy stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testSortedCollection stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #SmartRefStreamTest #testWeakDumps stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbAdd stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMax stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMin stamp: 'HAW 10/2/2020 16:13:57'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMinInvert stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbMul stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAllAlphasRgbSub stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #BitBltTest #testAlphaCompositing2 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #test32bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA16bppLE63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testBA32bpp63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray62 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGray63 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA61 stamp: 'HAW 10/2/2020 16:13:58'!
PASSED!

!testRun: #JpegTest #testGrayBA62 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #JpegTest #testGrayBA63 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testFloatTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #AffineTransformationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout1 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout2 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #LayoutMorphTest #testLayout3 stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicLocationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testComposition stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testDisplayBounds stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testInverseTransformation stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #MorphicTranslationTest #testTransform stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #WorldTest #testDoOneCycleWorksWithDeferredQueue stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testClassSingleton stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testHorizontalAlignment stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TaskbarTest #testWidth stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesByPassesWhenActionChangesConditionByTheSpecifiedAmount stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesFromToPassesWhenActionChangesConditionFromAndToTheSpecifiedValues stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertChangesPassesWhenConditionIsAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertDoeNotChangePassesWhenConditionIsNotAlteredByAction stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesFailsWhenElementIsNotIncludedInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIncludesShouldNotFailWhenElementIsInCollection stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesForSameNumberDifferentToZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWhenBothAreZero stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToPassesWithSameCalculatedNumber stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsNegativeAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsCloseToWithPrecisionPassesWhenDifferenceIsPositiveAndLessThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testAssertIsNotCloseWithPrecisionPassesWhenDifferenceIsBiggerThanPrecision stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testIsTestCase stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailErrorsWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldFailPassesWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanFailsWhenClosureTakesMoreThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldNotTakeMoreThanPassesWhenClosureTakesLessThanTheLimit stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoCanExpectException stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenNoExceptionIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoFailsWhenOtherExceptionTypeIsSignaled stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoPassSignaledExceptionToAssertionsBlock stamp: 'HAW 10/2/2020 16:13:59'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithExceptionDoValuesAssertionsBlockWhenExceptionIsRaised stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextDoesNotFailWithRightMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShouldRaiseWithMessageTextFailsWithDifferentMessageText stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailErrorsWhenAnErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestCaseTest #testShoulndFailPassesWhenNoErrorIsSignaled stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test01SuiteForTestCaseClassHasTheSameTestAsCreatingTheSuiteFromTheTestCaseClass stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test02SuiteForNoTestCaseClassUsesTestClassWithSameNameEndingWithTest stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test03SuiteForNoTestCaseClassAndNoTestClassLooksForReferencesInTests stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test04SuiteForTestMethodIncludesOnlyTheMethod stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test05SuiteForNoTestMethodIncludesTestCaseSendingTheCompiledMethodSelector stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test06ForSystemCategoryWithTestCasesIncludesOnlyTestCasesClasses stamp: 'HAW 10/2/2020 16:14:00'!
PASSED!

!testRun: #TestSuiteTest #test07ForSystemCategoryWithNoTestCasesIncludesTestClassesTests stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test08ForMessageCategoryContainingTestCasesIncludesThoseTestCases stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test09ForMessageCategoryWihoutTestIsEmpty stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestSuiteTest #test10CanNotDebugAsFailureQuickMethods stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCharacters2 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testCode stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testLines stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #DifferenceFinderTest #testWords stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test1ReadBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test2ReadWithOutBinary stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test3ReadUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test4BackConversion stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #UnicodeTest #test5ReadWriteUtf8 stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixReal stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinNonLocalReturnFixSimply stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingBasic stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedInner stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingNestedOuter stamp: 'HAW 10/2/2020 16:14:01'!
PASSED!

!testRun: #TestValueWithinFix #testValueWithinTimingRepeat stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testIsStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsFalseDoesNotPutANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineTabWhenConditionIsTruePutsANewLineTabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceManyTimesWhenConditionIsTruePutSpacesInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabManyTimesWhenConditionIsTruePutsTabsInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WriteStreamTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsFalseDoesNotPutANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNewLineWhenConditionIsTruePutsANewLineInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsFalseDoesNotPutCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutAllWhenConditionIsTruePutsCollectionInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsFalseDoesNotPutObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testNextPutWhenConditionIsTruePutsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsFalseDoesNotPrintObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testPrintWhenConditionIsTruePrintsObjectInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsFalseDoesNotPutASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testSpaceWhenConditionIsTruePutsASpaceInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsFalseDoesNotPutATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #TranscriptTest #testTabWhenConditionIsTruePutsATabInStream stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorTest #testIsColor stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #RectangleTest #testIsRectangle stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ColorFormTest #testIsColorForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #GrayFormTest #testIsGrayForm stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #WeakMessageSendTest #testIsMessageSend stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test01DefaultStringVersionIsClassAndSelector stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #test02CanPrefixStringVersion stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassIfAbsentReturnsClassIfClassExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnNilWhenClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testActualClassReturnsClassIfExists stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenActualClassIsNil stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentEvaluatesAbsentBlockWhenSelectorIsNotImplemented stamp: 'HAW 10/2/2020 16:14:02'!
PASSED!

!testRun: #MethodReferenceTest #testCompiledMethodIfAbsentReturnsImplementedMethodWhenItExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsFalseWhenInvalid stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testReferencesParameterAtReturnsTrueWhenTheParameterIsReferenced stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentEvaluatesBlockIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeIfAbsentReturnsSourceCodeIfExists stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeReturnsSourceCodeIfMethodExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfClassDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #MethodReferenceTest #testSourceCodeSignalExceptionIfMethodDoesNotExist stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidBinarySelectorIfItContainsACharacterNotAllowed stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidKeywordSelectorIfItContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItContainsCharactersUsedInBinarySelectors stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsNotValidUnarySelectorIfItStartsWithALetterAndContainsSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidBinarySelectorIfItContainsAnAllowedCharacterOrSequenceOfCharacters stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidKeywordSelectorIfItContainsKeywordsWithColons stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #SymbolTest #testIsValidUnarySelectorIfItStartsWithALetterAndDoesNotContainSeparators stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test01WhenIsImplementedOnlyInRootReturnsThatImplementorOnly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test02ReturnsImplementorsOfSuperclasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test03IfNotImplementedInRootOrSuperclassesDoesNotIncludeSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test04IncludesSubclassesImplementations stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test05DoesNotIncludeImplementorsOfSubclassesNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test06DoesNotIncludeImplementorsOfSiblingsWhenNotDefinedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test07ReturnsAllSubclassesImplementorsOfTheHighestImplementorClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test08highestClassImplementingSelectorReturnsHighgestClass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualImplementorsTest #test09WhenNoHighestClassImplementingSelectorIfNoneBlockIsEvaluated stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test01SurelyRecognizeTypeSenderWhenSentToInstanceVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test02SurelyRecognizeTypeSenderWhenSentToTemporaryVariable stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test03SurelyRecognizeTypeSenderInACollaboration stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test04RecognizeTypeSendersToInstancesOfSubClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test05RecognizeTypeSendersToLiteralTrue stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test06RecognizeTypeSendersToLiteralFalse stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test07RecognizeTypeSendersToThisContext stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test08RecognizeTypeSendersToSelf stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09RecognizeTypeSendersToSuper stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test09_01 stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test10RecognizeTypeSendersToSelfOfMessageImplementedInSuperclass stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test11RecognizeTypeSendersToReturnsOfMessageSend stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test12RecognizeTypeSendersOfChainedMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test13RecognizeTypeSendersToReturnOfMessageSendNoMatterThePrecedence stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test14RecognizeTypeSendersToClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test15RecognizeTypeSendersToVariablesReferencingClasses stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test16RecognizeTypeSendersToAnyLiteral stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test17CanRecognizePossibleTypeSenders stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test18RecognizeTypeSendersWhenReturnTypeIsSelfType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test19RecognizeTypeSendersWhenReturnTypeIsClassType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test20SurelySendWhenReceiverTypeIsSuperclassOfImplementorType stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test21ActualSendersWorksWithCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #ActualSendersTest #test22ActualSendersDoesNotHangWhenReceiverIsTempVarInMethodWithoutTypes stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test01topBlockTempsMapReturnsTheTempsMapOfTheMethod stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test02MethodWithNoParametersNoTemporariesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test03MethodWithOnlyOneArgumentAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test04rawTypesOfInvalidVariableNameEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test05MethodWithOnlyOneTempTwoArgumentsAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test06MethodWithRemoveVectorVariablesAreInitializedCorrectly stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test07RemoteVectorRawTypesIsNilWhenMethodHasNoVariableInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test08VariableRawTypesIsNilWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:03'!
PASSED!

!testRun: #AdditionalMethodStateTest #test09CanGetRawTypesWhenMethodHasNoVariableButHasInRemoteVector stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #ClosureVariablesTest #testOneArrayForTypesIsCreatedWhenAMethodHasNoClosures stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test01TypeConvertionForAClassReturnsSameClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test02TypeConvertionForSelfTypeReturnsReceiversType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test03TypeConvertionForClassTypeReturnsReceiversTypeClass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test04ClassMessageSendChainsClassType stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test05TypeConvertionForInstanceTypeReturnsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test06newTypeIsMetaclassSoleInstance stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test07InstanceTypeReturnsClassWhenIsKindOfOfBehaviorButNotMeta stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test08InstanceTypeErrorsWhenUsedWithNoBehavior stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #DynamicTypesTest #test09ClassTypeForMetamodelIsMetaclass stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test01TypeCollectionOfInstanceVariableDefinedInLeafClassDoesNotTraverseHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test02TypeCollectionIncludesSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test03TypeCollectionDoesNotIncludeSuperclassesAndSiblings stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test05TypeCollectionIncludesAllSubclasses stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test06IsNotMegamorphicIfTypesSizeIsLessToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test07IsMegamorphicIfTypesSizeIsEqualToTheMaxOfWithAllSubclassesRawTypesSize stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test08IsNotMegamorphicIfDoesNotFillRawTypesForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test09IsMegamorphicIfFillsRawTypesOfDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test10IsMegamorphicIfFillsRawTypesOfNotDefiningClassForLocalTypeInfo stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test11IsTypesEmptyOfNonLocalTypeInfoTakesCareOfHierarchy stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test12IsTypesEmptyForLocalTypeInfoOnlyCheckOnLocalRawTypes stamp: 'HAW 10/2/2020 16:14:04'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:04'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #InstanceVariableTypeInfoTest #test13RemovingAClassRemovesItAndItsClassFromInstanceVariableRawTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariableTypeInfoTest #test14InstVarAtPutKeepTypeInfo stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test01InstanceVariablesTypesIsInitializedWithAnArrayOfClassInstSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test02InitializeInstanceVariablesTypesWithAllInstancesStoreCurrentClassInstancesTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test03TypesOfDifferentInstVarsAreStoredCorrectly stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test04MoreThanOneTypeAreStoredCorrectlyInDifferentInstVars stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test05TypesAreStoredUpToInstVarTypesSize stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test06NoTypesAreStoredWhenInstVarTypesIsNil stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test07CommonSupertypeOfReturnsSupertypeOfStoredTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test08CommonSupertypeIfNoTypesEvaluatesAlternativeBlockWhenNoTypeHasBeenStore stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #InstanceVariablesTypesTest #test09EvaluatesIfAbsentBlockWhenAskTypeInfoForNonExistingInstVar stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test01KeepTypesOfLocalTemporariesI stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test02KeepTypesOfRemoteTemporaries stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test03KeepTypesOfParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test04KeepReturnTopTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test05KeepReturnConstantTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test06KeepReturnReceiverTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test07KeepReturnFromClosureTypes stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test08KeepReturnTypeWhenUnwind stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test09BlockReturnDoesNotAffectMethodReturn stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test10KeepTypesOfParametersWhenSendingValueWithArguments stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #LiveTypingCodeSimulationTest #test11BlockWithParametersDoNotAffectMethodParameters stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test01CanSignalItWithAMethod stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!testRun: #MethodNotAnnotatingTypesTest #test02IsResumable stamp: 'HAW 10/2/2020 16:14:05'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:05'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test01RemovingAClassRemovesItFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test02RemovingAClassRemovesItsClassFromMethodVariableRawTypesForParameter stamp: 'HAW 10/2/2020 16:14:06'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:06'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test03RemovingAClassRemovesItFromMethodVariablesRawTypes stamp: 'HAW 10/2/2020 16:14:07'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:07'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #MethodVariableTypeInfoTest #test04RemovingAClassRemovesItFromMethodVariableRemoteVectorRawTypes stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test01ActualSendersIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test02CategoryIsNil stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test03CompiledMethodSignalsError stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test04CompiledMethodIfAbsentEvaluatesIfAbsentBlock stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test05doesOnlySurelySendReturnsFalse stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test06dynamicTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test07IsNotValid stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test08liveTypingAutoCompleterDocumentationReturnsEmptyText stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test09rangesOASentSelectorWhenSendToReceiverTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test10FailsWhenAsItsSourceCode stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #NotImplementedMethodTest #test11StringVersionStartsWithNotImplemented stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #PossibleSenderTest #test01StringVersionBeginsWithPossible stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test01QuickReturnSelfMethodsReturnSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test02QuickReturnTrueMethodsReturnTrueReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test03QuickReturnFalseMethodsReturnFalseAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test04QuickReturnNilMethodsReturnUndefinedObjectAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test05QuickReturnMinusOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test06QuickReturnZeroMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test07QuickReturnOneMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test08QuickReturnTwoMethodsReturnSmallIntegerAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test09QuickReturnOfFirstInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test10QuickReturnOfSecondInstanceVariableMethodsReturnInstanceVariableTypesAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test11classMethodReturnsClassTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test12newMethodReturnsInstanceTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!testRun: #ReturnTypeInfoTest #test13yourselfMethodReturnsSelfTypeAsReturnType stamp: 'HAW 10/2/2020 16:14:08'!
PASSED!

!classDefinition: #LiveTypingClassToBeRemoved category: '__LiveTyping-TestData__' stamp: 'HAW 10/2/2020 16:14:08'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!classRemoval: #LiveTypingClassToBeRemoved stamp: 'HAW 10/2/2020 16:14:09'!
Object subclass: #LiveTypingClassToBeRemoved
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__LiveTyping-TestData__'!

!testRun: #ReturnTypeInfoTest #test14RemovingAClassRemovesItAndItsClassFromMethodReturnType stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test15ReturnTypesOfAbstractMethodsIncludesSubclassesImplementationsTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #ReturnTypeInfoTest #test16ReturnTypesOfAbstractMethodWorksWhenNotImplementedInAllSubclasses stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test01IsEmptyWhenAllTypesAreNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test02StoresAddedTypes stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test03StoresSameTypeOnce stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test04StoresMoreThanOneTypeCorrectly stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test05DoesNotStoreTypesWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test06CommonSupertypeOfSiblingsClassesReturnsRightSuperclass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test07CommonSupertypeOnSameHierarchyIsMostTopClass stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test08CommonSupertypeOnSameHierarchyIsNotAffectedByAddingOrder stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test09ObjectIsCommonSupertypeWhenClassesAreNotSiblings stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test10ProtoObjectIsCommonSupertypeWhenThereAreNoTypesStored stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test11ProtoObjectIsCommonSupertypeWhenCointainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test12CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test13CommonSupertypeIfNoTypesReturnsAlternativeClosureValueWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test14UndefinedObjectIsNotConsideredWhenLookingForCommonSupertype stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test15StoresTypesIsTrueWhenContainerIsNotNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test16StoresTypesIsFalseWhenContainerIsNil stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test17IsMegamorphicWhenContainerIsFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test18IsNotMegamorphicWhenContainerIsNotFull stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test19CommonSelectorsPreviousToSameOnlyTypeIsEmpty stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test20CommonSelectorsPreviousToSuperclassOfOnlyAddedTypeAreAddedTypeSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test21CommonSelectorsPreviousToSuperclassSuperclassOfOnlyAddedTypeAreAddedTypeUpToSuperclassSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test22CommonSelectorsPreviousToInvalidSuperclassRaisesError stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test23CommonSelectorsPreviousToSuperclassOfSiblingTypesAreSiblingsCommonSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test24CommonSelectorsPreviousToOnSameHierarchyReturnsCommonSuperclassesSelectors stamp: 'HAW 10/2/2020 16:14:09'!
PASSED!

!testRun: #VariableTypeInfoTest #test25CommonSelectorsPreviousToAddedSSupertypeOnSameHierarchyIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test26CommonSelectorsPreviousToWhenNotStoringTypesIsEmpty stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test27CommonSelectorsPreviousToIfInvalidSupertypeEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test28CommonSelectorsPreviousToIfInvalidSupertypeWithManyTypesEvaluatesInvalidBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test29CommonSelectosGoesUpToIncludingProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test30CommonSupertypeIfGenericEvaluatesIfGenericBlockForObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test31CommonSupertypeIfGenericEvaluatesIfGenericBlockForProtoObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test32WithCommonSupertypeDoIfGenericEvaluatesDoBlockWhenNoGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test33WithCommonSupertypeDoIfGenericEvaluatesGenericBlockWhenGenericSupertype stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test34AddingATypeWhenNoMoreSpaceEvaluatesIsFullBlock stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test35TypeIsNotMoreInTypesWhenRemoved stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test36RemovingTypeWhenTypesIsEmptyEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test37RemovingNotIncludedTypeEvaluatesIfAbsent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test38RemovingLastAddedTypeWorksAsExpected stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test39RemoveTypeSignalExceptionWhenTypeNotFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #VariableTypeInfoTest #test40TypesDoEvaluatesBlockOnEachType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test01ManyMethodsCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test02ClassesCanBeTypeChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test03MethodsWithoutTypeAnnotationsLogsAProblem stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test04ProblemsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test05ProblemsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test06WarningsCollectsAllTypeCheckersWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test07ErrorsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test08ErrorsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test09ProblemsCollectsTypeCheckersProblems stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test10WarningsDetectIfNone stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test11WarningsDetectIfNoneValuesIfNoneWhenNoProblemFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test12HasErrorsReturnsTrueIfATypeCheckerHasErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test13HasErrorsReturnsFalseWhenNoErrorFound stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test14ErrorsCollectsAllTypeCheckersErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #ManyMethodsTypeCheckerTest #test15HasErrorsOrWarnings stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test01MethodNotAnnotatingTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test02EmptyMethodDoesNotGenerateWarningsOrErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test03MessageSendNotUnderstoodByReceiverGeneratesError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test04MessageUnderstooodByReceiverDoesNotGenerateErrors stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test05ErrorsWhenNoTypeImplementMessageSent stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test06DifferentErrorsAreReported stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test07ReceiverWithoutTypesGeneratesWarning stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test08GivesAWarningWhenReceiversTypeHasAnError stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test09WhenMethodHasNoReturnTypesAProblemIsAdded stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test10PrimitiveMethodsAreNotTypedChecked stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test11IfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test12IfNotNilDoesNotFiltersUndefinedObjectTypeForNotCheckedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test13ComparingForNilWithIfTrueIfFalse stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test14ComparingForNilWithIfTrueIfFalseWhenNilFiltersOtherTypes stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test15ComparingForNilWithIfTrueIfFalseWhenNilKeepsUndefinedObject stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test16NestedIfNotNilFiltersUndefinedObjectType stamp: 'HAW 10/2/2020 16:14:10'!
PASSED!

!testRun: #MethodTypeCheckerTest #test17NestedIfNotNilDoesNotFilterUndefinedObjectWhenOutsideRightIfNotNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test18IfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test19NestedIfNilAssumesUndefinedObjectAsType stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test20NestedIfNilDoesUseUndefinedObjectWhenOutsideRightIfNil stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test21IfNilIfNotNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test22IfNotNilIfNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test23EqualsNilIfTrueIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test24EqualsNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test25IdenticalToNilIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test26EqualsNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test27IdenticalToNilIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test28EqualsToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test29IdenticalToNilIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test30nilEqualsToIfTrueIfFalseOrIfFalseIfTrueWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test31nilEqualsToIfTrueOrIfFalseWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32nilIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test32_01_nilNotIdenticalOrEqualToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test33NotEqualToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test34NotIdenticalToNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test35isNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test36notNilWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test37TypeCastWithEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test38TypeCastWithNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test39TypeCastToUsingEqualOrIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test40TypeCastToUsingNotEqualOrNotIdenticalToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test41TypeCastUsingIsKindOfToWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test42TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test43TypeCheckMessageSentToSelfWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test44TypeCheckMessageWorksAsExpected stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test46TypeCastRejectsCanBeNested stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test47IsKindOfCastingAllowsSubtypes stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test48IfNotNilWithBlockArgumentFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test49TypeCastWithBlockInRejectBlockKeepsCastingStrategy stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test50TypeCastWithoutBlockShouldFail stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test51NotNilAndFiltersUndefinedObject stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test52CascasdeMessageSendAreTypeChecked stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test53TypeCastWorksOnCascadeMessageSends stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test54IfNilWithReturnRejectsNilInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test55TypeCheckMessageWithSubclassesReturningFalse stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test56Float_store_on_hasNoTypeErrors stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test57TypeCheckMessageWithFalse_True_False_InSubclassesCastCorrectly stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test58TypeCheckMessageWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test59TypeCheckMessageWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test60TypeCastWithReturnOnIfTrueRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test61TypeCastWithReturnOnIfFalseRejectsTypeInNextColaborations stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test62ifNotNilifNotNilWithMoreThanAMessageSendAndNilAsValue stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test63orCheck stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test64notNilAndIfTrue stamp: 'HAW 10/2/2020 16:14:11'!
FAILURE!

!testRun: #MethodTypeCheckerTest #test65isNilOr stamp: 'HAW 10/2/2020 16:14:11'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66DoesNotFailsWithMessageSendAsConditionOfIfTrueWithCascadeSend stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test66orWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test67andWithoutMessageAsReceiverShouldNotError stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #MethodTypeCheckerTest #test68DoesNotFailsWithIfTrueSendInCascadeMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectRenameMethodApplierTest #test01ScopeOptionsAreTheSame stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test01IsDenotativeObjectNamedReturnsTrueForADenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #DenotativeObjectTest #test02IsDenotativeObjectNamedReturnsFalseForANoDenotativeObject stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithFraction stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ZeroDivideExtentionsTest #testMessageTextWithNumbers stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #TestChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testClassifiesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesLeadingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRemovesTrailingBlanksWhenAddingCategory stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutLeadingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #ClassOrganizerTest #testRenamesWithoutTrailingBlanks stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitConversion2 stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitGradualUnderflow stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitInfinities stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitNaN stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitRoundingMode stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #test32bitZeros stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAdd stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArCosh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArSinh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArTanh stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTan stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testArcTanNonPrimitive stamp: 'HAW 10/2/2020 16:14:12'!
PASSED!

!testRun: #FloatTest #testAsTrueFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCeiling stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCharacterization stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWhenPrimitiveFails stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testComparisonWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopy stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCopySign stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testCosh stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCos stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeCosForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSin stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDegreeSinForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
ERROR!

!testRun: #FloatTest #testDivide stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testE stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEqualityComparison stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testEquals stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactAsString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExactStoreString2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExp stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testExpNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatRounded stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFrom stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloatsAwayFromWithPowersOfTwo stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloor stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFloorLog2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloat2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFractionAsFloatWithUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testFromStringDoesNotUnderflow stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigNegativeSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithBigSmallInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithFraction stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargeNegativeInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHashWithSmallishLargePositiveInteger2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testHugeValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity1 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinity2 stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testInfinityTruncated stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsDenormalized stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testIsZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfNan stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLiteralEqualityOfZeroAndNegativeZero stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLn stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnForExceptionalValues stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testLnNonPrimitive stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMaxExactInteger stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMinimalAsString stamp: 'HAW 10/2/2020 16:14:13'!
PASSED!

!testRun: #FloatTest #testMixedTypeArithmetic stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMixedTypeComparison stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testMultiply stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN1 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN3 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaN4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNCompare stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNPropagationBinary stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testNaNPropagationUnary stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNTruncated stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNaNisLiteral stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextAwayFromZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNextTowardsZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testNoIntegerHash stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPartBits stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPi stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPositiveAndNegativeZero stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPredecessorSuccessor2 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimAdd stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimArcTan stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimDivideBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExpAndLn stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimExponent stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreater stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimGreaterEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLess stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimLessEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimMultiplyBy stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimNotEqual stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSin stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSmallIntegerAsFloat stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSqrt stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimSubtract stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTimesTwoPower stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrimTruncated stamp: 'HAW 10/2/2020 16:14:14'!
FAILURE!

!testRun: #FloatTest #testPrintShowingDecimalPlaces4 stamp: 'HAW 10/2/2020 16:14:14'!
PASSED!

!testRun: #FloatTest #testPrintStringStress stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReadFromManyDigits stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testRounded stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSetOfFloat stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAndExponent stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSin stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSinh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSomeNines stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSqrtNonPrimitive stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreBase16 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStoreOn stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsFloatRoundsHalfToEven2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testStringAsNumber2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testSubtract stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTanh stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerGradualUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerOverflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTimesTwoPowerUnderflow stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testTruncated stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testUlp stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroAbs stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroDividedByZero stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
ERROR!

!testRun: #FloatTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSign stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FloatTest #testZeroSignificandAsInteger stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testCeiling stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeCos2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testDegreeSin2 stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloor stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testFractionPrinting stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testHash stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactRaisedTo stamp: 'HAW 10/2/2020 16:14:15'!
PASSED!

!testRun: #FractionTest #testInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIntegerWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testIsType stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testLog stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRoundHalfToEven stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testRounded stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionDenominatorIsPositive stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testThatFractionIsReduced stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testTruncated stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDifference stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeDivision stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeMultiplication stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #FractionTest #testWholeSum stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testAndSingleBitWithMinusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testLargeShift stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testMixedSignDigitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNBitAndNNegatedEqualsN stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testNNegatedEqualsNComplementedPlusOne stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftMinusOne1LeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerDigitLogicTest #testShiftOneLeftThenRight stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test01readFromWithEmptyStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #test02readFromWithInvalidStringRaisesAnError stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBackslashBackslashSpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBenchFib stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactNthRoot stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBigReceiverInexactSqrt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitAt stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitLogic stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversal stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testBitReversalCorrectClass stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testCrossSumBase stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDifferentBases stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLnSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpLp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivLpSp stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLn stamp: 'HAW 10/2/2020 16:14:16'!
PASSED!

!testRun: #IntegerTest #testDivSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testDivSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactRaisedTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testExactSqrt stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testFloorLogExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDAndLCM stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testGCDProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testHighBitOfMagnitude stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerDivision stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerPadding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIntegerReadFrom stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsInteger stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPowerOfTwoM6873 stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testIsProbablyPrime stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMExample stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLCMProperties stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLargePrimesUpTo stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLog stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testLowBit stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModLpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSnSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpLp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSn stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testModSpSp stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testMontgomeryMultiplication stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNegativeIntegerPrinting stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
ERROR!

!testRun: #IntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRoot stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootErrorConditions stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactness stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootExactnessForHugeValue stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootImmuneToDoubleRounding stamp: 'HAW 10/2/2020 16:14:17'!
PASSED!

!testRun: #IntegerTest #testNthRootTruncated stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testNumberOfDigits stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPositiveIntegerPrinting stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrimesUpTo stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintOnBaseShowRadix stamp: 'HAW 10/2/2020 16:14:18'!
PASSED!

!testRun: #IntegerTest #testPrintStringBase stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoRem stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testQuoSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRaisedToModulo stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRange stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRemSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testRomanPrinting stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashLpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSnSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpLp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSn stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSlashSlashSpSp stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testSqrtFloor stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testStringAsNumber stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementBitLogicWithCarry stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #IntegerTest #testTwoComplementRightShift stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:19'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testMinimumNegativeIntegerArithmetic stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargeNegativeIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testBitShift stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testCompactClassIndex stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDenormalizedPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitAtPut stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testDigitLength stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testEmptyTemplate stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testLargeSqrtFloor stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testMultDicAddSub stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testNormalize stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LargePositiveIntegerTest #testReplaceFromToWithStartingAt stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test01readFromWhenTheInitilValueIsNaNTheResultIsNaN stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test02readFromWhenTheInitilValueIsInfinityTheResultIsInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test03readFromWhenTheInitilValueIsMinusInfinityTheResultIsNegativeInfinity stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test04readFromWhenTheInitilValueIsANegativeNumberTheResultIsThatNumberNegated stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test05readFromWhenTheInitilValueIsJustANumberTheResultIsThatNumber stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test06readFromWhenTheInitialValueIncludesRadixItIsConvertedWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test07readFromWhenTheInitialValueIncludesAnInvalidRadixItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test08readFromWhenTheInitialValueIncludesANegativeRadixItConvertsTheNumberWithTheIndicatedRadixBase stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #test09readFromWhenTheInitialValueIsEmptyItRaisesAnError stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testFractionPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testHash3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testIntegerPart stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testOne stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces2 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testPrintShowingDecimalPlaces3 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedTo stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testRaisedToIntegerWithFloats stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReadFrom stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testReciprocal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #NumberTest #testZeroDivideHandler stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNext stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:20'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:22'!
PASSED!

!testRun: #LaggedFibonacciRandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerCorrectness stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerInitialValues stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedCornerCases stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testParkMillerSeedRange stamp: 'HAW 10/2/2020 16:14:23'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller88RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNext stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBits stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextBitsInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextInteger stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testNextIntegerInvalid stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger1 stamp: 'HAW 10/2/2020 16:14:24'!
PASSED!

!testRun: #ParkMiller93RandomTest #testRandomLargeInteger2 stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSeedAndRepeatability stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSetAtRandom stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #ParkMiller93RandomTest #testSimpleBuckets stamp: 'HAW 10/2/2020 16:14:25'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesAAtoAM stamp: 'HAW 10/2/2020 16:14:26'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesANtoAZ stamp: 'HAW 10/2/2020 16:14:27'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBAtoBM stamp: 'HAW 10/2/2020 16:14:28'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesBNtoBZ stamp: 'HAW 10/2/2020 16:14:29'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCAtoCM stamp: 'HAW 10/2/2020 16:14:31'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesCNtoCZ stamp: 'HAW 10/2/2020 16:14:34'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDAtoDM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesDNtoDZ stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesEAtoEM stamp: 'HAW 10/2/2020 16:14:36'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesENtoEZ stamp: 'HAW 10/2/2020 16:14:37'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFAtoFM stamp: 'HAW 10/2/2020 16:14:39'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesFNtoFZ stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGAtoGM stamp: 'HAW 10/2/2020 16:14:40'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesGNtoGZ stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHAtoHM stamp: 'HAW 10/2/2020 16:14:41'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesHNtoHZ stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesIAtoIM stamp: 'HAW 10/2/2020 16:14:42'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesINtoIZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJAtoJM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesJNtoJZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKAtoKM stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesKNtoKZ stamp: 'HAW 10/2/2020 16:14:44'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLAtoLM stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesLNtoLZ stamp: 'HAW 10/2/2020 16:14:45'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMAtoMM stamp: 'HAW 10/2/2020 16:14:47'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesMNtoMZ stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNAtoNM stamp: 'HAW 10/2/2020 16:14:48'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesNNtoNZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesOAtoOM stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesONtoOZ stamp: 'HAW 10/2/2020 16:14:49'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPAtoPM stamp: 'HAW 10/2/2020 16:14:50'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesPNtoPZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQAtoQM stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesQNtoQZ stamp: 'HAW 10/2/2020 16:14:51'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRAtoRM stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesRNtoRZ stamp: 'HAW 10/2/2020 16:14:53'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSAtoSM stamp: 'HAW 10/2/2020 16:14:55'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesSNtoSZ stamp: 'HAW 10/2/2020 16:14:57'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTAtoTM stamp: 'HAW 10/2/2020 16:14:59'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesTNtoTZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUAtoUM stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesUNtoUZ stamp: 'HAW 10/2/2020 16:15:00'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVAtoVM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesVNtoVZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWAtoWM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesWNtoWZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXAtoXM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesXNtoXZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYAtoYM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesYNtoYZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZAtoZM stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testDecompilerInClassesZNtoZZ stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #DecompilerTestFailuresCollector #testRemoteTemp stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'HAW 10/2/2020 16:15:01'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'HAW 10/2/2020 16:15:02'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables_WithSelectorsOfInstVarTypes stamp: 'HAW 10/2/2020 16:15:03'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsOfTempVarTypes stamp: 'HAW 10/2/2020 16:15:04'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:05'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:06'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'HAW 10/2/2020 16:15:07'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #testMessages stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ArrayWithArrayAndOtherObjects stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayOfArray stamp: 'HAW 10/2/2020 16:15:08'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndArrayWithManyElements stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndBlockOfEvaluatedBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndMoreThanOneUnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterBrace stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterCharacter stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterLiteralArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterStringSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndOneUnaryAfterSymbol stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUnaryInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteKeywordAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryAndUncompleteMessageAfterUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithMoreThanOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_BinaryWithOneUnary stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ClosedAndUnclosedParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionInManyParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_ExpressionWithMoreThanOneParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_LFBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_SpaceBeforeParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnaryAfterExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedArrayAfterClosedArray stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedBlockAfterBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_UnclosedDoubleParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Browser_selfInProtoObject stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_ExpresionInParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_MoreThanOneUnaryMessage stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!testRun: #LiveTypingSmalltalkCompleterTest #test_Workspace_OnlyRightParenthesis stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:09'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:09'!
griffle [ var1 := 1. goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsMoreThanOneUndeclaredVariableCorrectlyInBlock stamp: 'HAW 10/2/2020 16:15:09'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:10'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:10'!
griffle [|var1| var1 := 1.goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:10'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresAnArgumentAlready stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:11'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:11'!
griffle [ :var1 | | | goo := 1.^ goo + var1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInBlockWhenTheresArgumentsAndTempDeclarationPipesWithNoTemps stamp: 'HAW 10/2/2020 16:15:11'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:12'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:12'!
griffle var1 := 1. [ goo := 1. ^goo + var1 ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodAndInBlock stamp: 'HAW 10/2/2020 16:15:12'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle |var1| var1 := 1.goo := 1.^ goo + var1! !

!testRun: #CompilerTest #testAddsUndeclaredVariableCorrectlyInMethodWhenNoSpaceBetweenLastOneAndPipe stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:13'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:13'!
griffle [|goo| goo := 1. ^goo ]. [goo1:=1.^ goo1]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableInRightBlock stamp: 'HAW 10/2/2020 16:15:13'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:14'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:14'!
griffle [ :var1 | | foo | foo := 2. goo := 1.^ goo + var1 + foo ]! !

!testRun: #CompilerTest #testAddsUndeclaredVariableWithAnArgumentAndTempAlreadyInBlock stamp: 'HAW 10/2/2020 16:15:14'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:15'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testCanNotDefineVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveMoreThanOneExpressionInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotHaveReturnInsideBackTick stamp: 'HAW 10/2/2020 16:15:15'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSelfInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceSuperInsideBackTick stamp: 'HAW 10/2/2020 16:15:16'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceTempVarsInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!testRun: #CompilerTest #testCanNotReferenceThisContextInsideBackTick stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:17'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:17'!
griffle [ | goo | ]. [ | goo | ]! !

!testRun: #CompilerTest #testDoesNotConfusesVariablesWithSameNameOfDifferentBlocksWhenRemoving stamp: 'HAW 10/2/2020 16:15:17'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:18'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:18'!
griffle | goo |! !

!testRun: #CompilerTest #testDoesNotRemoveUnusedVariableIfSaidSo stamp: 'HAW 10/2/2020 16:15:18'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle | goo a | a := 1. ^a! !

!testRun: #CompilerTest #testKeepsVariableDefinitionWhenThereAreUsedTemporaries stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:19'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:19'!
griffle [ | goo | ]! !

!testRun: #CompilerTest #testRemovesUnusedVariablesFromBlocks stamp: 'HAW 10/2/2020 16:15:19'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:20'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:20'!
griffle | goo |! !

!testRun: #CompilerTest #testRemovesVariableDefinitionWhenNoMoreUnusedTemporaries stamp: 'HAW 10/2/2020 16:15:20'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle [ || goo := 1.^ goo ]! !

!testRun: #CompilerTest #testReusesBlockTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:21'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!CompilerTestDataClass__ methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:15:21'!
griffle || goo := 1.^ goo! !

!testRun: #CompilerTest #testReusesMethodTempDeclarationWhenEmptyForUndeclaredVariable stamp: 'HAW 10/2/2020 16:15:21'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndeclaredVariableIsSignaledForUndeclaredVariables stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:22'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUndefinedVariableIsSignaledForVariablesDefinedButNotInitialized stamp: 'HAW 10/2/2020 16:15:22'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:23'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnknownSelectorIsSignalForMessagesSendNotImplemented stamp: 'HAW 10/2/2020 16:15:23'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #CompilerTestDataClass__ category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #CompilerTest #testUnusedVariableIsSignaledForUnusedVariables stamp: 'HAW 10/2/2020 16:15:24'!
PASSED!

!classRemoval: #CompilerTestDataClass__ stamp: 'HAW 10/2/2020 16:15:24'!
RefactoringClassTestData subclass: #CompilerTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:25'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test01ScanNewClassChange stamp: 'HAW 10/2/2020 16:15:25'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02AddingANewMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:26'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test02ScanNewMethodChange stamp: 'HAW 10/2/2020 16:15:26'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:27'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ChangingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:27'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test03ScanMethodModifiedChange stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:28'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04RemovingAMethodShouldBeLogged stamp: 'HAW 10/2/2020 16:15:28'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:29'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test04ScanMethodRemovalChange stamp: 'HAW 10/2/2020 16:15:29'!
PASSED!

!classRemoval: #LogChangesTestClass__ stamp: 'HAW 10/2/2020 16:15:30'!
RefactoringClassTestData subclass: #LogChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test05RemovingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:30'!
PASSED!

!testRun: #ChangesTest #test05ScanClassRemovalChange stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!testRun: #ChangesTest #test06RenamingAClassShouldBeLogged stamp: 'HAW 10/2/2020 16:15:31'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #test06ScanClassRenamedChange stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!classRemoval: #NewTestClass__ stamp: 'HAW 10/2/2020 16:15:32'!
RefactoringClassTestData subclass: #NewTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangesTest #testDataClassName stamp: 'HAW 10/2/2020 16:15:32'!
PASSED!

!testRun: #GreenTest #test01WhenANewTestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:15:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test02WhenAProductionMethodIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:33'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:34'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test03WhenAProductionMethodIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:34'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test04WhenAProductionClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:35'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:35'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test05WhenAProductionClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!testRun: #GreenTest #test06WhenATestIsChangedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:36'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:37'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test07WhenATestPassesNothingHappens stamp: 'HAW 10/2/2020 16:15:37'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:38'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test08WhenAMethodIsRemovedIsRefactoring stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:15:38'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test09WhenATestHasAnErrorAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:38'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:39'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test10WhenATestIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:39'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test11WhenATestFailsAnErrorIsReportedAndTransitionsToRed stamp: 'HAW 10/2/2020 16:15:40'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:40'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test12WhenATestIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:41'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:15:41'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test13WhenATestClassIsRemovedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:42'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test14WhenATestClassIsAddedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:42'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:43'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #GreenTest #test15WhenATestClassIsRenamedThenIsRefactoring stamp: 'HAW 10/2/2020 16:15:43'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:44'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test01WhenAClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:44'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:45'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest stamp: 'HAW 10/2/2020 16:15:45'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:46'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test04WhenAnotherTestIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:46'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test05WhenAMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:47'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:48'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test06WhenAModelMethodIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:48'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:49'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test07WhenAModelClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:49'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:50'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test08WhenAModelMethodIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:51'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:15:51'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test09WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:52'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test10WhenATestClassIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:53'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test11WhenOneOfTheTestTheTestsIsChangedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test12WhenAnotherTestIsChangedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:54'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test13WhenATestFailsAnErrorIsReportedAndGoesToRed stamp: 'HAW 10/2/2020 16:15:55'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:55'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test14WhenOneOfTheTestsPassesTwoErrorsAreReported stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:15:56'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test16WhenOneOfTheTestsIsRenamedIsStillInThisState stamp: 'HAW 10/2/2020 16:15:57'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test17WhenAnotherTestIsRenamedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:15:58'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #MoreThanOneTestWrittenTest #test18WhenATestUtilityIsChangedNothingHappens stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:15:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test01WhenAProductionClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:15:59'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:00'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test02WhenAProductionMethodIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:00'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
Object subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test03WhenATestIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:01'!
PASSED!

!classRemoval: #ProdClassA stamp: 'HAW 10/2/2020 16:16:01'!
TestCase subclass: #ProdClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test04WhenATestClassIsAddedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test05WhenATestIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:02'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test06WhenAProductionMethodIsChangedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:03'!
PASSED!

!classRemoval: #ProductionClassA stamp: 'HAW 10/2/2020 16:16:04'!
Object subclass: #ProductionClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test07WhenAClassIsRemovedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!testRun: #NotDoingTDDTest #test08WhenThereIsOneTestAndPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:04'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test09WhenOneOfTheTestFailsThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:05'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:06'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test10WhenOneOfTheTestIsNotRunThenIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:06'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test11WhenATestIsRenamedIsStillNotDoingTDD stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:07'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test12WhenThereIsMoreThanOneTestAndAllPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:07'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:08'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:08'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:09'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test14WhenATestClassIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:09'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:10'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotDoingTDDTest #test15WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:10'!
PASSED!

!testRun: #NotStartedTest #test01WhenNoChangesAreDoneThenNothingHappens stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!testRun: #NotStartedTest #test02WhenAModelClassIsAddedThenWeAsumeIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:11'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:12'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test03WhenATestClassIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:12'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:13'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test04WhenAProductionMethodIsAddedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:13'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test05WhenAMethodIsChangedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:13'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:14'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test06WhenATestIsAddedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:14'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:15'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test07WhenAClassIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:15'!
PASSED!

!testRun: #NotStartedTest #test08WhenAMethodIsRemovedResultShouldHaveAnError stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:16'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test09WhenAllTestsPassThenIsInGreenState stamp: 'HAW 10/2/2020 16:16:16'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:17'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test10WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:16:17'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:18'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test11WhenATestHasAnErrorThenIsInRedState stamp: 'HAW 10/2/2020 16:16:18'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test12WhenATestIsChangedThenIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:19'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #NotStartedTest #test13WhenATestIsRenamedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test01ShouldIgnoreDoIts stamp: 'HAW 10/2/2020 16:16:20'!
PASSED!

!testRun: #OtherTest #test02ResultKnowsTheChangesThatWereDone stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:21'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test03TDDStateForEachChange stamp: 'HAW 10/2/2020 16:16:21'!
PASSED!

!classRemoval: #TestClass stamp: 'HAW 10/2/2020 16:16:22'!
TestCase subclass: #TestClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test04TestRenamesAreGroupedInASingleChange stamp: 'HAW 10/2/2020 16:16:22'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:23'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test05TestsWithSameNameInDifferentClassesAreDifferent stamp: 'HAW 10/2/2020 16:16:23'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:24'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test06WhenATestHasAnErrorThisTestDoesNotFail stamp: 'HAW 10/2/2020 16:16:24'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:25'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test07RunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:25'!
PASSED!

!classRemoval: #ExampleClass stamp: 'HAW 10/2/2020 16:16:25'!
Object subclass: #ExampleClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test08ReRunTheWholeAnalysis stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:26'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test09ReRunFromASpecificChange stamp: 'HAW 10/2/2020 16:16:26'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:27'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:27'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #OtherTest #test10ChangeWhenAMethodWasAdded stamp: 'HAW 10/2/2020 16:16:27'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:28'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test01WhenAProductionClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:28'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:29'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:29'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test02WhenAProductionMethodIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:29'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:30'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:30'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test03WhenTheTestPassesThenIsInGreen stamp: 'HAW 10/2/2020 16:16:30'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:31'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:31'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test04WhenTheTestFailsIsStillInRed stamp: 'HAW 10/2/2020 16:16:31'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:32'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:32'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test05WhenAProductionMethodIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:32'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:33'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:33'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed stamp: 'HAW 10/2/2020 16:16:34'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:34'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:34'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test07WhenAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:35'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:35'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test08WhenATestIsAddedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:36'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:36'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:37'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:37'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:37'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test10WhenAModelMethodIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:38'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:38'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:38'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenAModelClassIsRemovedIsStillInRed stamp: 'HAW 10/2/2020 16:16:39'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:39'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test11WhenATestClassIsAddedIsStillInRed stamp: 'HAW 10/2/2020 16:16:40'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:40'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test12WhenTheTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:41'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:41'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:41'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test13WhenAnotherTestIsChangedIsStillInRed stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:42'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:42'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:16:43'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RedTest #test15WhenATestClassIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD stamp: 'HAW 10/2/2020 16:16:43'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:44'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test01WhenAProductionMethodIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:44'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test02WhenAProductionMethodIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:45'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:16:45'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test03WhenAProductionClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:46'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test04WhenATestIsChangedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:46'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:47'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test05WhenATestIsRenamedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:47'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test06WhenATestClassIsAddedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:48'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test07WhenATestIsAddedResultHasAnErrorAndIsWritingAFailingTest stamp: 'HAW 10/2/2020 16:16:48'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:49'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test08WhenAllTestPassThenIsInGreen stamp: 'HAW 10/2/2020 16:16:49'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:50'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test09WhenOneOfTheTestFailsThenIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:50'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:51'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test10WhenAClassIsRemovedIsStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!testRun: #RefactorTest #test11WhenAProductionMethodIsRemovedStillRefactoring stamp: 'HAW 10/2/2020 16:16:51'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:16:52'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test12WhenATestClassIsRemovedThoseTestsAreNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:52'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:16:53'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test13WhenATestIsRemovedIsNoLongerTakenIntoAccount stamp: 'HAW 10/2/2020 16:16:53'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:54'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test14WhenAllTestAreRemovedThenGoesToGreen stamp: 'HAW 10/2/2020 16:16:54'!
PASSED!

!testRun: #RefactorTest #test15WhenAModelMethodIsAddedButNotUsedThereIsAnError stamp: 'HAW 10/2/2020 16:16:55'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:55'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:56'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test16WhenAModelMethodIsAddedAndThenUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:56'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:56'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:57'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test17WhenAModelMethodIsAddedAndRemovedAndIsNotUsedThereAreNoErrors stamp: 'HAW 10/2/2020 16:16:57'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:57'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:58'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test18WhenAModelMethodIsAddedAndIsOnlyMentionedInACommentThereIsAnError stamp: 'HAW 10/2/2020 16:16:58'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:16:59'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:16:59'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test19WhenTwoModelMethodsAreAddedBothHaveToBeUsedInAValidRefactor stamp: 'HAW 10/2/2020 16:16:59'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:00'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:00'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test20WhenTwoModelMethodsAreAddedAndNotUsedIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:00'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:01'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:01'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test21WhenAModelMethodIsAddedAndIsUsedAsAVariableNameIsNotAValidRefactor stamp: 'HAW 10/2/2020 16:17:01'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:02'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:02'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test22WhenAModelMethodIsNotUsedWhenAnalysisIsFinishedThereIsAnError stamp: 'HAW 10/2/2020 16:17:02'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:03'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:03'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test23WhenATestClassIsRenamedThoseTestsAreStillTakenIntoAccount stamp: 'HAW 10/2/2020 16:17:03'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:04'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:04'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #RefactorTest #test24WhenAMethodIsOverridenItIsConsideredUsedAndRefactorIsValid stamp: 'HAW 10/2/2020 16:17:04'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:05'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:05'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test01WhenTheTestIsChangedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:05'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:06'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test02WhenAModelClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:06'!
PASSED!

!classRemoval: #ProductionClass stamp: 'HAW 10/2/2020 16:17:07'!
Object subclass: #ProductionClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test03WhenATestClassIsAddedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:07'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test04WhenATestFailsThenIsInRedState stamp: 'HAW 10/2/2020 16:17:07'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:08'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test05WhenAModelMethodIsAddedAndNoTestIsBeingWrittenThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:08'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:09'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:09'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test06WhenTheTestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:09'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:10'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test07WhenAModelMethodIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:10'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:11'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:11'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test08WhenSetUpMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:11'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test09WhenAMethodIsAddedToTheTestClassThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:12'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test10WhenASecondTestIsAddedIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:12'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:13'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test11WhenATestWithTheSameNameIsChangedInOtherClassThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:13'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:14'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test12WhenADifferentTestIsChangedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:14'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:15'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test13WhenATestWithTheSameNameIsAddedInOtherClassThenIsInMoreThanOneTestWritten stamp: 'HAW 10/2/2020 16:17:15'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:16'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test14WhenAModelMethodIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:16'!
PASSED!

!classRemoval: #ModelClassA stamp: 'HAW 10/2/2020 16:17:17'!
Object subclass: #ModelClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:17'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test15WhenTheTestIsRemovedThenIsInGreen stamp: 'HAW 10/2/2020 16:17:17'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test16WhenATestIsRenamedThenIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:18'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:18'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test17WhenAModelClassIsRemovedThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomethingA stamp: 'HAW 10/2/2020 16:17:19'!
TestCase subclass: #TestSomethingA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test18WhenTheTestPassesAnErrorIsReportedAndGoesToGreen stamp: 'HAW 10/2/2020 16:17:19'!
PASSED!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:20'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test19AnotherTestIsRemovedAnErrorIsReportedAndIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:20'!
PASSED!

!classRemoval: #TestClassB stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:21'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test20WhenAFirstTestIsAddedIsStillWritingAFailingTest stamp: 'HAW 10/2/2020 16:17:21'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:22'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test21WhenAModelMethodIsAddedBeforeRunningTestsThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:22'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:23'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:24'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test22WhenAModelMethodIsChangedBeforeWritingATestThenIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:24'!
PASSED!

!classRemoval: #ModelClass stamp: 'HAW 10/2/2020 16:17:25'!
Object subclass: #ModelClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestSomething stamp: 'HAW 10/2/2020 16:17:25'!
TestCase subclass: #TestSomething
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #WritingAFailingTestTest #test23WhenATestClassIsRemovedIsNotDoingTDD stamp: 'HAW 10/2/2020 16:17:26'!
PASSED!

!classRemoval: #TestSomethingB stamp: 'HAW 10/2/2020 16:17:26'!
TestCase subclass: #TestSomethingB
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test01RunningAPassingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:27'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test02RunningAFailingTestShouldBeLogged stamp: 'HAW 10/2/2020 16:17:27'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:28'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test03RunningATestWithAnErrorShouldBeLogged stamp: 'HAW 10/2/2020 16:17:28'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:29'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test04OverridingAMethodShouldBeLoggedWithAReferenceToTheOverridenMethod stamp: 'HAW 10/2/2020 16:17:29'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:30'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:30'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test05WhenAMethodIsNotOverridenTheMethodReferenceIsNotIncluded stamp: 'HAW 10/2/2020 16:17:30'!
PASSED!

!classRemoval: #SubclassTestDataClass__ stamp: 'HAW 10/2/2020 16:17:31'!
TestChangesTestClass__ subclass: #SubclassTestDataClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:31'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #LogTestChangesTest #test06WhenAMethodIsChangedItIsNotConsideredOverriden stamp: 'HAW 10/2/2020 16:17:31'!
PASSED!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:32'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test01ScanPassingTestChange stamp: 'HAW 10/2/2020 16:17:32'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:33'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test02ScanFailedTestChange stamp: 'HAW 10/2/2020 16:17:33'!
PASSED!

!classRemoval: 'TestChangesTestData' stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: 'TestChangesTestData'
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test03ScanNewTestClass stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #TestClassA stamp: 'HAW 10/2/2020 16:17:34'!
TestCase subclass: #TestClassA
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test04ScanOverridenMethod stamp: 'HAW 10/2/2020 16:17:34'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:35'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:35'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #ScanTestChangesTest #test05ScanAMethodThatIsNotOverriden stamp: 'HAW 10/2/2020 16:17:35'!
PASSED!

!classRemoval: #AClass__ stamp: 'HAW 10/2/2020 16:17:36'!
TestChangesTestClass__ subclass: #AClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!classRemoval: #TestChangesTestClass__ stamp: 'HAW 10/2/2020 16:17:36'!
Object subclass: #TestChangesTestClass__
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__TDDGuru-TestData__'!

!testRun: #BlockNodeTest #testItDoesNotSendsAGivenMessageToSelfWhenTheBlockIsEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #BlockNodeTest #testItSendsAGivenMessageToSelfWhenItContainsAnStatementWithAMessageSendToSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItDoesNotSendTheMessageToSelfWhenTheReceiverIsSelfButTheSelectorIsDifferent stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #MessageNodeTest #testItSendsTheMessageToSelfWhenTheReceiverIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItDoesNotReferencesSelfWhenTheVariableNameIsNotSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #VariableNodeTest #testItReferencesSelfWhenTheVariableNameIsSelf stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test01NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:36'!
PASSED!

!testRun: #AddInstanceVariableTest #test02NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test03NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:17:37'!
PASSED!

!testRun: #AddInstanceVariableTest #test04ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:38'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test05NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:17:38'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:17:39'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:39'!
SuperclassWithInstVar subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:17:40'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:17:40'!
ClassToAddInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:40'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test08AddCreatesNewInstanceVariable stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:41'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:41'!
m1 | a | a := 10.! !

!testRun: #AddInstanceVariableTest #test09FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:41'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:42'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:42'!
m1:a! !

!testRun: #AddInstanceVariableTest #test10FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:17:42'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ :a | ] value: 1! !

!testRun: #AddInstanceVariableTest #test11FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:43'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:43'!
m1 [ | a | ] value! !

!testRun: #AddInstanceVariableTest #test12FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:17:43'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:44'!
m1 | a | ! !

!testRun: #AddInstanceVariableTest #test13FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:17:44'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:17:44'!
ClassToAddInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddInstanceVariableTest #test14NewVariableNameCanNotBeAReservedName stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddInstVar stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:45' prior: 50846537!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:45'!
m1!

!testRun: #AddParameterTest #test01AddingParameterToUnaryMessageAddsColonAndParameter stamp: 'HAW 10/2/2020 16:17:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:46' prior: 50846576!
sender_m1 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:46'!
m1: oldParam!

!testRun: #AddParameterTest #test02AddingParameterToKeywordMessageAddsNewKeywordAndParameter stamp: 'HAW 10/2/2020 16:17:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: 1. self m1: 1.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846616!
sender_m1 self m1: 1 m2: 2. self m1: 1 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test03AddingParameterToKeywordMessageMultipleSendsInSameMethodSameLiteral stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
sender_m1 self m1: self size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:47' prior: 50846657!
sender_m1 self m1: self size m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:47'!
m1: oldParam!

!testRun: #AddParameterTest #test04AddingParameterToKeywordMessageWithMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
sender_m1 self m1: self size + 4.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:48' prior: 50846698!
sender_m1 self m1: self size + 4 m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:48'!
m1: oldParam!

!testRun: #AddParameterTest #test05AddingParameterToKeywordMessageWithBinaryMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 self m1: (self at: 1 put: 2).! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846739!
sender_m1 self m1: (self at: 1 put: 2) m2: 2.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:49'!
m1: oldParam!

!testRun: #AddParameterTest #test06AddingParameterToKeywordMessageWithKeywordMessageSendAsLastFormalParameter stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
sender_m1 #m1 size! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:49' prior: 50846780!
sender_m1 #m1: size! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:49'!
m1!

!testRun: #AddParameterTest #test07AddingParameterToUnaryMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
sender_m1 #m1: size.! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:50' prior: 50846819!
sender_m1 #m1:m2: size.! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:50'!
m1: oldParam!

!testRun: #AddParameterTest #test08AddingParameterToKeywordMessageChangesReferencesToSelector stamp: 'HAW 10/2/2020 16:17:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test09FailsIfNewParameterValueCanNotBeCompiled stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test10FailsIfNewParameterValueIsEmpty stamp: 'HAW 10/2/2020 16:17:51'!
PASSED!

!testRun: #AddParameterTest #test11NewParameterNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test12NewParameterNameCanNotStartWithNumber stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!testRun: #AddParameterTest #test13NewParameterNameCanNotContainSpaces stamp: 'HAW 10/2/2020 16:17:52'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:53'!
m1! !

!testRun: #AddParameterTest #test14NewParameterCanNotBeDefinedAsInstanceVariableInAnyImplementor stamp: 'HAW 10/2/2020 16:17:53'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: 'newParam'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:54'!
m1:newParam! !

!testRun: #AddParameterTest #test15NewParameterCanNotBeDefinedAsParameterInAnyImplementor stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:54'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test16WhenCreatedForUnarySelectorMustBeUnary stamp: 'HAW 10/2/2020 16:17:54'!
PASSED!

!testRun: #AddParameterTest #test17WhenCreatedForBinarySelectorMustBeBinary stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test18CanNotAddParameterToBinaryKeyword stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test19AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:17:55'!
PASSED!

!testRun: #AddParameterTest #test20AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test21NewKeywordToAddToOldSelectorCanNotBeUnary stamp: 'HAW 10/2/2020 16:17:56'!
PASSED!

!testRun: #AddParameterTest #test22NewKeywordToAddToOldSelectorCanNotBeBinary stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!testRun: #AddParameterTest #test23NewKeywordToAddToOldSelectorCanNotBeKeywordWithMoreThanOneParameter stamp: 'HAW 10/2/2020 16:17:57'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1
	! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846954!
sender_m1 self m1: 1
	! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test24AddingParameterToSendersTakeCaresOfSeparators stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:58'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58'!
m1: newParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:58' prior: 50846991!
sender_m1 self m1: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:17:58'!
m1!

!testRun: #AddParameterTest #test25IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForUnaryMessages stamp: 'HAW 10/2/2020 16:17:58'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:17:59'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
sender_m1 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:17:59' prior: 50847031!
sender_m1 self m1: 1 m2: (self at: 1)! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:17:59'!
m1: oldParam!

!testRun: #AddParameterTest #test26IfNewParameterValueIsKeywordMessageSendAddParenthesisToItForKeywordMessages stamp: 'HAW 10/2/2020 16:17:59'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test27NewParameterValueCanNotHaveMoreThanOneStatement stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:00'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
sender_m1 self m1:[ 1 factorial ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam m2: newParam ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:00' prior: 50847076!
sender_m1 self m1:[ 1 factorial ] m2: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:00'!
m1: oldParam!

!testRun: #AddParameterTest #test28WhenSenderLastParameterIsABlockAddedParameterIsNotAddedInsideTheBlock stamp: 'HAW 10/2/2020 16:18:00'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m2: newParam m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847117!
sender self m2: 2 m1: 1! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1!

!testRun: #AddParameterTest #test29AddingParameterAsFirstOneWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:01'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
sender self m1: 1 m3: 3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:01' prior: 50847155!
sender self m1: 1 m2: 2 m3: 3! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:01'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test30AddingParameterInTheMiddleWorksAsExpected stamp: 'HAW 10/2/2020 16:18:01'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:02'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
sender
	self m1: 1 m3: 3.
	self
		m1: 4
		m3: 6! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m2: newParam m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:02' prior: 50847195!
sender
	self m1: 1 m2: 2 m3: 3.
	self
		m1: 4
		m2: 2 m3: 6! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:18:02'!
m1: p1 m3: p3!

!testRun: #AddParameterTest #test31AddingParameterInTheMiddleWithManySendersWorksAsExpected stamp: 'HAW 10/2/2020 16:18:02'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:03'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test32IndexCanNotBeLessThanOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test33IndexCanNotBeBiggerThanNumberOfParametersPlusOne stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!testRun: #AddParameterTest #test34IndexMustBeInteger stamp: 'HAW 10/2/2020 16:18:03'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:04'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
sender_m1 self m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04'!
m1: newParam

! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:04' prior: 50847247!
sender_m1 self m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:18:04'!
m1

!

!testRun: #AddParameterTest #test35AddingParameterRetractsInsertionPointWhenAtInsertionPointIsANewLine stamp: 'HAW 10/2/2020 16:18:04'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterTest #test36ParentesisAreAddedToSendersOfUnaryMessage stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:18:05'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test01CannotChangeSelectorOrderInUnaryMessages stamp: 'HAW 10/2/2020 16:18:05'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test02CannotChangeSelectorOrderInBinaryMessages stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!testRun: #ChangeKeywordsSelectorOrderTest #test03CannotChangeSelectorOrderInKeywordMessagesWithOneParameterOnly stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:06'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:06'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:06'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test04ChangesKeywordsOrder stamp: 'HAW 10/2/2020 16:18:06'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:07'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:07'!
m2: p2 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2: stamp: 'HAW 10/2/2020 16:18:07'!
m1: p1 m2: p2!

!testRun: #ChangeKeywordsSelectorOrderTest #test05ChangesParametersOrder stamp: 'HAW 10/2/2020 16:18:07'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ChangeKeywordsSelectorOrderTest #test06NewSelectorMustIncludeOldSelectorKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classDefinition: #ClassToChangeSelectorOrder category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:08'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3! !
!ClassToChangeSelectorOrder methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:08'!
m2: p2 m3: p3 m1: p1! !

!methodRemoval: ClassToChangeSelectorOrder #m1:m2:m3: stamp: 'HAW 10/2/2020 16:18:08'!
m1: p1 m2: p2 m3: p3!

!testRun: #ChangeKeywordsSelectorOrderTest #test07ChangesKeywordsAndParametersOrderForMoreThanTwoKeywords stamp: 'HAW 10/2/2020 16:18:08'!
PASSED!

!classRemoval: #ClassToChangeSelectorOrder stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToChangeSelectorOrder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test01NewSelectorShouldNotBeEmpty stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:09'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:09'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test02NewSelectorShouldNotContainSeparators stamp: 'HAW 10/2/2020 16:18:09'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:10'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:10'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test03ExtractingToSelectorAlreadyDefinedInTheClassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:10'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test04NewSelectorShouldNotStartWithANumber stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:11'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:11'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test05NewUnarySelectorShouldNotStartWithASymbol stamp: 'HAW 10/2/2020 16:18:11'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:12'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:12'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test06IntervalToExtractIsNotBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:12'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test07IntervalToExtractIsNotAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:13'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:13'!
m1 ^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test08IntervalToExtractShouldNotContainAReturnExpression stamp: 'HAW 10/2/2020 16:18:13'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:14'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:14'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m1 ^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14'!
m2

	^ 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:14' prior: 50847702!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test09ExtractingALiteralCreatesANewMethodAndChangesExistingCodeToCallThatNewMethod stamp: 'HAW 10/2/2020 16:18:14'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test10IntervalToExtractDoesNotContainsPartOfTheOriginalSelector stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:15'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:15'!
m1 | localVar | ^ localVar + 3! !

!testRun: #ExtractMethodTest #test11IntervalToExtractDoesNotContainsPartOfLocalVariablesDefinition stamp: 'HAW 10/2/2020 16:18:15'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:16'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:16'!
m1 <annoyingPragma>! !

!testRun: #ExtractMethodTest #test12IntervalToExtractDoesNotContainsPartOfPragmasDefinition stamp: 'HAW 10/2/2020 16:18:16'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
m1 ^ 3 + ((4))! !

!testRun: #ExtractMethodTest #test13IntervalToExtractShouldBeAValidSmalltalkExpression stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:17'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:17'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test14ItIsNotPossibleToExtractTheLeftSideOfAnAssignment stamp: 'HAW 10/2/2020 16:18:17'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:18'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:18'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m1 self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:18' prior: 50847918!
m1 self m2! !

!testRun: #ExtractMethodTest #test15ExtractingAListOfStatementsCreatesANewMethodWithoutReturn stamp: 'HAW 10/2/2020 16:18:18'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ 'hey true'! !

!testRun: #ExtractMethodTest #test16CanNotExtractPartOfALiteral stamp: 'HAW 10/2/2020 16:18:19'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:19'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:19'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:19'!
m1 ^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	^ '^ 3' size! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50847995!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test17AStringContainingTheReturnCharacterCanBeExtracted stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:20'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:20'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m1
	
	self m3.
	self m4: 5.! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20'!
m2

	self m3.
	self m4: 5! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:20' prior: 50848038!
m1
	
	self m2.! !

!testRun: #ExtractMethodTest #test18ExtractingAListOfStatementsIncludingDotsRemovesThemAndContinuesWithMethodExtraction stamp: 'HAW 10/2/2020 16:18:20'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:21'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:21'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m1 ^ ((42))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21'!
m2

	^ 42! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:21' prior: 50848082!
m1 ^ ((self m2))! !

!testRun: #ExtractMethodTest #test19ASelectionContainingAdditionalParenthesesAtTheBeginningAndOrEndCanBeExtracted stamp: 'HAW 10/2/2020 16:18:21'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 | local | ^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2: local

	^ local + 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848125!
m1 | local | ^ self m2: local! !

!testRun: #ExtractMethodTest #test20ASelectionContainingALocalVariableIsParameterizedOnTheExtractedMessage stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:22'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:22'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m1 ^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22'!
m2

	^ (9) * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:22' prior: 50848169!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test21ASelectionContainingAdditionalParenthesesOnOneSideCanBeExtractedAndItIsNotTrimmed stamp: 'HAW 10/2/2020 16:18:22'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:23'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:23'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m1 | localVar | ^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23'!
m2: localVar

	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:23' prior: 50848212!
m1 | localVar | ^ self m2: localVar! !

!testRun: #ExtractMethodTest #test22ItIsPossibleToExtractTheLastExpressionOfAMethod stamp: 'HAW 10/2/2020 16:18:23'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !

!testRun: #ExtractMethodTest #test23CanNotExtractWithAnInvalidInterval stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:24'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:24'!
m1 | localVar | localVar _ 8! !

!testRun: #ExtractMethodTest #test24ItIsNotPossibleToExtractAnIntervalIncludingATemporaryAssignmentExpression stamp: 'HAW 10/2/2020 16:18:24'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:25'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:25'!
m1 ^ 8! !

!testRun: #ExtractMethodTest #test25NewUnarySelectorShouldNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:18:25'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ [ |something| something _ 3 ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848359!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test26ItIsPossibleToExtractAnEntireBlockIncludingALocalAssignment stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:26'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:26'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m1 ^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26'!
m2

	^ 2 ifNil: [ #boo ] ifNotNil: [ #yay ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:26' prior: 50848403!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test27ItIsPossibleToExtractExpressionsWithOptimizedSelectors stamp: 'HAW 10/2/2020 16:18:26'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:27'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:27'!
m1 | localVar | ^ #foo! !

!testRun: #ExtractMethodTest #test28ItIsNotPossibleToExtractALocalVariableInsideOfItsDeclaration stamp: 'HAW 10/2/2020 16:18:27'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1: arg ^ 2 + arg * 3! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2: arg

	^ 2 + arg! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848483!
m1: arg ^ (self m2: arg) * 3! !

!testRun: #ExtractMethodTest #test29ExtractingABinaryExpressionToAKeywordMessageIntroducesParenthesesToNotBreakOriginalPrecedence stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:28'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:28'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m1 ^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28'!
m2

	^ `3 + 4`! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:28' prior: 50848528!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test30ItIsPossibleToExtractAQuotedExpression stamp: 'HAW 10/2/2020 16:18:28'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:29'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:29'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m1 ^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29'!
m2

	^ 2 factorial ifNotNil: [ #boo ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:29' prior: 50848570!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test31ItIsPossibleToExtractExpressionsWithOptimizedSelectorsWhereTheReceiverIsNotASimpleLiteral stamp: 'HAW 10/2/2020 16:18:29'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:30'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m1 ^ [ | a | a _ 3 factorial ]! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:30' prior: 50848615!
m1 ^ [ self m2 ]! !

!testRun: #ExtractMethodTest #test32ItIsPossibleToExtractATemporaryDeclarationOfABlockIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:30'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:30'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31'!
m2

	| a | a _ 3 factorial! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:31' prior: 50848659!
m1 self m2! !

!testRun: #ExtractMethodTest #test33ItIsPossibleToExtractATemporaryDeclarationIfItIsNotUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:31'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:31'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test34TryingToExtractAMethodWithLessArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:31'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:32'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:32'!
m1 | localVar1 localVar2 | ^ localVar1 + localVar2 + 2! !

!testRun: #ExtractMethodTest #test35TryingToExtractAMethodWithMoreArgumentsThanNeededFails stamp: 'HAW 10/2/2020 16:18:32'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 ^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	^ (3 + 2) factorial; yourself! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848775!
m1 ^ self m2! !

!testRun: #ExtractMethodTest #test36ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:33'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:33'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m1 | temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33'!
m2

	| temp | []! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:33' prior: 50848819!
m1 self m2! !

!testRun: #ExtractMethodTest #test37ItIsPossibleATempDeclarationAlongWithABlock stamp: 'HAW 10/2/2020 16:18:33'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:34'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:34'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m1 ^ (  (3 + 4))! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34'!
m2

	^ 3 + 4! !
!ClassToExtractMethod methodsFor: 'category' stamp: 'HAW 10/2/2020 16:18:34' prior: 50848861!
m1 ^ (  (self m2))! !

!testRun: #ExtractMethodTest #test38ItIsPossibleToExtractCodeThatContainsMultipleParenthesisWithSpacesBetweenThem stamp: 'HAW 10/2/2020 16:18:34'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 ^ 42! !

!testRun: #ExtractMethodTest #test39TryingToExtractToAMethodThatExistsInASuperclassRaisesAWarning stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:35'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:35'!
m1 |var| var _ 42. ^ var! !

!testRun: #ExtractMethodTest #test40CanNotExtractTemporaryAssignmentWithDeclarationIfTheVariableIsUsedOutsideOfSelectionInterval stamp: 'HAW 10/2/2020 16:18:35'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToExtractMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:36'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
mExtractMethodExample: anArgument

	<anAnnoyingPragma>
	| localVar |
	<anotherAnnoyingPragma>
	self m1.
	self m2: 'hey true'.
	self m3: anArgument , '^ 21'.
	localVar _ Set with: 'hello'.
	localVar := #($x $y $z) size and: [ (9) * 3 ].
	^ localVar + ((4))! !
!ClassToExtractMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:36'!
m1: arg ^ self! !

!testRun: #ExtractMethodTest #test41CannotExtractPartOfMethodSignature stamp: 'HAW 10/2/2020 16:18:36'!
PASSED!

!classRemoval: #ClassToExtractMethod stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToExtractMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test01NewVariableCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:37'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:37'!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test02NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:18:37'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:38'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:38'!
m1 | new | ^ 2! !

!testRun: #ExtractToTemporaryTest #test03NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:18:38'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test04FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:39'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:39'!
m1 ^ 78! !

!testRun: #ExtractToTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:18:39'!
PASSED!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:40'!
AnObsoleteClassToRefactorSuperclass subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:40'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:40'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test06SourceCodeToExtractCanNotIncludeReturn stamp: 'HAW 10/2/2020 16:18:40'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:41'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:41'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test07SourceCodeToExtractCanNotBeEmpty stamp: 'HAW 10/2/2020 16:18:41'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 ^ 1 + 3! !

!testRun: #ExtractToTemporaryTest #test08SourceCodeToExtractCanNotHaveSyntaxErrors stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:42'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:42'!
m1 1+2. 3+4! !

!testRun: #ExtractToTemporaryTest #test09SourceCodeToExtractHasToBeOneStatement stamp: 'HAW 10/2/2020 16:18:42'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:43'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:43'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test10FailsIfIntervalToExtractIsBeforeMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:43'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test11FailsIfIntervalToExtractIsAfterMethodSourceCodeBoundaries stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:44'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:44' prior: 50849298!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test12ItIsPossibleToExtractASingleLiteralFromAMethodWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:44'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:45'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45'!
m1

	| four |
	four _ 4.
	^ four + 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:45' prior: 50849328!
m1

	| four two |
	four _ 4.
	two _ 2.
	^ four + two! !

!testRun: #ExtractToTemporaryTest #test13ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAlreadyOtherTemporary stamp: 'HAW 10/2/2020 16:18:45'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	| |
	^ 3 factorial! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849360!
m1

	| f |
	f _ 3 factorial.
	^ f! !

!testRun: #ExtractToTemporaryTest #test14ItIsPossibleToExtractASingleExpressionFromAMethodThatHasAnEmptyTemporariesDeclaration stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:46'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:46' prior: 50849392!
m1

	| new |
	new := 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test15ItIsPossibleToExtractCodeAndGenerateAssignmentUsingAnsiAssignmentStyle stamp: 'HAW 10/2/2020 16:18:46'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:47'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47'!
m1

	^ [ self m2 ]! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:47' prior: 50849422!
m1

	^ [ | new |
	new _ self m2 ]! !

!testRun: #ExtractToTemporaryTest #test16ItIsPossibleToExtractASingleLiteralFromABlockWithoutAnyTempsOrArguments stamp: 'HAW 10/2/2020 16:18:47'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ 1! !

!testRun: #ExtractToTemporaryTest #test17CannotExtractPartOfMethodName stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:48'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:48'!
m1 ^ self m2! !

!testRun: #ExtractToTemporaryTest #test18CannotExtractPartOfMessageSend stamp: 'HAW 10/2/2020 16:18:48'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:49'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49'!
m1

	^ 42! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:49' prior: 50849501!
m1

	| new |
	new _ 42.
	^ new! !

!testRun: #ExtractToTemporaryTest #test19ItIsPossibleToExtractAnIntervalWithSomeExtraSpaces stamp: 'HAW 10/2/2020 16:18:49'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1

	^ []! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50' prior: 50849531!
m1

	| new |
	new _ [].
	^ new! !

!testRun: #ExtractToTemporaryTest #test20ItIsPossibleToExtractAnEmptyBlock stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:50'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:50'!
m1 | existing | existing := 2! !

!testRun: #ExtractToTemporaryTest #test21CannotExtractLeftSideOfAssignment stamp: 'HAW 10/2/2020 16:18:50'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:51'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51'!
m1

	^ 3 factorial; yourself! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:51' prior: 50849585!
m1

	| new |
	new _ 3 factorial; yourself.
	^ new! !

!testRun: #ExtractToTemporaryTest #test22ItIsPossibleToExtractACascadeExpression stamp: 'HAW 10/2/2020 16:18:51'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849616!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849620!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849624!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849628!
m1 ^ 2! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849632!
m1 ^ 2! !

!testRun: #ExtractToTemporaryTest #test23CannotUseAReservedNameAsTheNewTemporaryVariable stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:52'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52'!
m1

	self run! !
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:52' prior: 50849661!
m1

	| action |
	action _ self run! !

!testRun: #ExtractToTemporaryTest #test24WhenExtractingAnEntireStatementItOnlyGeneratesTheVariableAssignment stamp: 'HAW 10/2/2020 16:18:52'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToDoExtractTemporary category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:53'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToDoExtractTemporary methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:18:53'!
m1: arg ^ self! !

!testRun: #ExtractToTemporaryTest #test25CannotExtractArgumentNamesFromMethodSignature stamp: 'HAW 10/2/2020 16:18:53'!
PASSED!

!classRemoval: #ClassToDoExtractTemporary stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToDoExtractTemporary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test01ChangesTheSuperclassOfTheClassToRefactor stamp: 'HAW 10/2/2020 16:18:54'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:54'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'SharedAAA'
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test02ClassToRefactorStructureIsMaintained stamp: 'HAW 10/2/2020 16:18:55'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:55'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: 'instVar1 instVar2'
	classVariableNames: 'ClassVar1 ClassVar2'
	poolDictionaries: 'private'
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test03NewSuperclassCategoryIsTheSameAsClassToRefactorCategory stamp: 'HAW 10/2/2020 16:18:56'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:56'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test04NewSuperclassHasNoVariables stamp: 'HAW 10/2/2020 16:18:57'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:57'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AlreadyExistingClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:18:58'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test05NewSuperclassShouldNotExist stamp: 'HAW 10/2/2020 16:18:58'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AlreadyExistingClass stamp: 'HAW 10/2/2020 16:18:59'!
RefactoringClassTestData subclass: #AlreadyExistingClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test06NewSuperclassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!testRun: #InsertSuperclassTest #test07NewSuperclassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:18:59'!
PASSED!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AddedSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test08WhenAppliedToMetaclassWorksAsWithClass stamp: 'HAW 10/2/2020 16:19:00'!
PASSED!

!classRemoval: #ClassToAddSuperclass stamp: 'HAW 10/2/2020 16:19:00'!
AddedSuperclass subclass: #ClassToAddSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AddedSuperclass stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #AddedSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #InsertSuperclassTest #test09NewSuperclassNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!testRun: #InsertSuperclassTest #test10NewSuperclassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:01'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:01'!
newMethod ^a! !

!testRun: #MoveToInstanceOrClassMethodTest #test01CannotMoveWhenReferencingInstanceVariables stamp: 'HAW 10/2/2020 16:19:01'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: 'ClassToMoveMethod class' category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:02'!
ClassToMoveMethod class
	instanceVariableNames: 'a'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:02'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test02CannotMoveToClassWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:02'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:03'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:03'!
newMethod|a|! !

!testRun: #MoveToInstanceOrClassMethodTest #test03CannotMoveToInstanceWhenLocalVariableIsTheSameAsClassInstanceVariable stamp: 'HAW 10/2/2020 16:19:03'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test04InstanceMethodIsMovedToClassMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToMoveMethod category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:04'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToMoveMethod class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !
!ClassToMoveMethod methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:04'!
newMethod! !

!methodRemoval: ClassToMoveMethod class #newMethod stamp: 'HAW 10/2/2020 16:19:04'!
newMethod!

!testRun: #MoveToInstanceOrClassMethodTest #test05ClassMethodIsMovedToInstanceMethod stamp: 'HAW 10/2/2020 16:19:04'!
PASSED!

!classRemoval: #ClassToMoveMethod stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToMoveMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:05'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test01AnInstanceVariableDoesNotExistOnClassToFactorCannotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:05'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushInstanceVariableDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:06'!
newMethod^ a! !

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test02AnInstanceVariableThatIsAccessedOnClassToRefactorCannotBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:06'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:06'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarOne category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithoutInstVarTwo category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:07'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushDownInstanceVariableTest #test03AnInstanceVariableThatIsNotAccessedOnClassToRefactorShouldBePushedDownToAllSubclasses stamp: 'HAW 10/2/2020 16:19:07'!
PASSED!

!classRemoval: #SubclassWithoutInstVarTwo stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarTwo
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassWithoutInstVarOne stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushInstanceVariableDown subclass: #SubclassWithoutInstVarOne
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushInstanceVariableDown stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:08'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08'!
newMethod! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:08' overrides: 50850324!
newMethod! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:08'!
newMethod!

!testRun: #PushDownMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:08'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:09'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:09'!
newMethod|a|! !

!testRun: #PushDownMethodTest #test02AMethodTemporaryVarDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:09'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:10'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:11'!
newMethod:a! !

!testRun: #PushDownMethodTest #test03AMethodArgumentDeclaredAsInstVarOnASubclassCanNotBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:11'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:11'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:12'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:12' overrides: 50850498!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:12'!
newMethod^ 1 + a!

!testRun: #PushDownMethodTest #test04AMethodAccessesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:12'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass1 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Subclass2 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:13'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1! !
!Subclass1 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !
!Subclass2 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:13' overrides: 50850563!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodDown #newMethod stamp: 'HAW 10/2/2020 16:19:13'!
newMethod a = 1!

!testRun: #PushDownMethodTest #test05AMethodWritesClassToRefactorInstVarShouldBePushedDownToSubclasses stamp: 'HAW 10/2/2020 16:19:13'!
PASSED!

!classRemoval: #Subclass2 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass2
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Subclass1 stamp: 'HAW 10/2/2020 16:19:14'!
ClassToPushMethodDown subclass: #Subclass1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodDown category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodDown methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15'!
newMethod
	^ 2 + a.! !

!classDefinition: #Subclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Subclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:15' overrides: 50850612!
newMethod^ 1 + a! !

!testRun: #PushDownMethodTest #test06AMethodInClassToRefactorExistsInSubClassesShouldOverrideTheExistingSubClassesMethod stamp: 'HAW 10/2/2020 16:19:15'!
PASSED!

!classRemoval: #Subclass stamp: 'HAW 10/2/2020 16:19:15'!
ClassToPushMethodDown subclass: #Subclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToPushMethodDown stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #ClassToPushMethodDown
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:16'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test01AnInstanceVariableThatIsNotUsedOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:16'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:16'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnoterSubClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:17'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test02AnInstanceVariableOnMultipleSubclassesShouldBeRemovedFromAllSubclassesAndPushedUpToSuperClass stamp: 'HAW 10/2/2020 16:19:17'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnoterSubClassWithInstVar stamp: 'HAW 10/2/2020 16:19:18'!
SuperclassWithoutInstVar subclass: #AnoterSubClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #SuperclassWithoutInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:18'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test03AnInstanceVariableDoesNotExistOnClassToRefactorCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:18'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithVariableAsTemporaryVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassWithVariableAsTemporaryVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:19'!
newMethod| a |! !

!classDefinition: #ClassToPushInstanceVariableUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #PushUpInstanceVariableTest #test04AnInstanceVariableThatIsUsedOnSuperClassAsTemporaryVariableCannotBePushedUp stamp: 'HAW 10/2/2020 16:19:19'!
PASSED!

!classRemoval: #ClassToPushInstanceVariableUp stamp: 'HAW 10/2/2020 16:19:19'!
SuperclassWithVariableAsTemporaryVariable subclass: #ClassToPushInstanceVariableUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithVariableAsTemporaryVariable stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #SuperclassWithVariableAsTemporaryVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:20'!
newMethod! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:20'!
newMethod!

!testRun: #PushUpMethodTest #test01AnEmptyMethodOnClassToRefactorShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:20'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:20'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:21'!
newMethod^ 1 + a! !

!testRun: #PushUpMethodTest #test02AMethodAccessesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:21'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:21'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:22'!
newMethod a = 1! !

!testRun: #PushUpMethodTest #test03AMethodWritesClassToRefactorInstVarCanNotBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:22'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:22'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:23'!
newMethod a = 1!

!testRun: #PushUpMethodTest #test04AMethodWritesSuperClassInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:23'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:23'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:24'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test05AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:24'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:24'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a! !

!methodRemoval: ClassToPushMethodUp #newMethod stamp: 'HAW 10/2/2020 16:19:25'!
newMethod^ 1 + a!

!testRun: #PushUpMethodTest #test06AMethodAccessesSuperClassClassToRefactorInstVarShouldBePushedUpToSuperclass stamp: 'HAW 10/2/2020 16:19:25'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:25'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #Superclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!Superclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26'!
newMethod^ 1 + a! !

!classDefinition: #ClassToPushMethodUp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToPushMethodUp methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:26' overrides: 50851126!
newMethod
	^ 2 + a.! !

!testRun: #PushUpMethodTest #test07AMethodInClassToRefactorExistsInSuperClassShouldOverrideTheExistingSuperClassMethod stamp: 'HAW 10/2/2020 16:19:26'!
PASSED!

!classRemoval: #ClassToPushMethodUp stamp: 'HAW 10/2/2020 16:19:26'!
Superclass subclass: #ClassToPushMethodUp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #Superclass stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #Superclass
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test01NoVariableIsRemovedWhenClassHasNoInstanceVariable stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:27'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test02UnreferencedVariablesAreRemoved stamp: 'HAW 10/2/2020 16:19:27'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:28'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:28'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test03VariablesWithReferencesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:28'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a b'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithReferenceInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithReferenceInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:29'!
m1 ^a! !

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:29'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveAllUnreferencedInstanceVariablesTest #test04VariablesWithReferencesInSubclassesAreNotRemoved stamp: 'HAW 10/2/2020 16:19:29'!
PASSED!

!classRemoval: #ClassWithReferenceInstVar stamp: 'HAW 10/2/2020 16:19:29'!
ClassWithInstVar subclass: #ClassWithReferenceInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test01CanNotRemoveAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:30'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:30'!
m1 ^a! !

!testRun: #RemoveInstanceVariableTest #test02CanNotRemoveInstanceVariableWithReferences stamp: 'HAW 10/2/2020 16:19:30'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:31'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveInstanceVariableTest #test03WhenAppliedRemovesInstanceVariable stamp: 'HAW 10/2/2020 16:19:31'!
PASSED!

!classRemoval: #ClassWithInstVar stamp: 'HAW 10/2/2020 16:19:32'!
RefactoringClassTestData subclass: #ClassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test01CanNotRemoveParameterFromUnaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!testRun: #RemoveParameterTest #test02CanNotRemoveParameterFromBinaryMessages stamp: 'HAW 10/2/2020 16:19:32'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test03CanNotRemoveParameterNotInMessage stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:33'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:33'!
m1: parameter! !

!testRun: #RemoveParameterTest #test04AllImplementorsMustImplementSelector stamp: 'HAW 10/2/2020 16:19:33'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:34'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:34'!
m1: parameter! !

!testRun: #RemoveParameterTest #test05AllSendersShouldSendSelector stamp: 'HAW 10/2/2020 16:19:34'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1: parameter ^parameter! !

!testRun: #RemoveParameterTest #test06NoImplementorReferencesParameterToRemove stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:35'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:35'!
m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:35'!
m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test07FirstParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:35'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:36'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 
	| t1 |! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:36'!
m1:parameter1 m2:parameter2
	| t1 |!

!testRun: #RemoveParameterTest #test08LastParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:36'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m2:parameter2! !

!methodRemoval: ClassToRemoveParameter #m0:m1:m2: stamp: 'HAW 10/2/2020 16:19:37'!
m0: parameter0 
	m1:parameter1 
	m2:parameter2!

!testRun: #RemoveParameterTest #test09MiddleParameterIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:37'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:37'!
m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:37'!
m1:parameter1!

!testRun: #RemoveParameterTest #test10ParameterFromOneKeywordSelectorIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:37'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:38'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
sender
		self 
			m1: 1 
			m2: 2 ! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:38' prior: 50851609!
sender
		self 
			m2: 2 ! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:38'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test11ParameterOfSendersOfMoreThanOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:38'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:39'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
sender
		self 
			m1:
			 (1+2).! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:39' prior: 50851651!
sender
		self 
			m1.! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:19:39'!
m1:parameter1!

!testRun: #RemoveParameterTest #test12ParameterOfSendersOfOneKeywordSelectorsIsRemovedCorrectly stamp: 'HAW 10/2/2020 16:19:39'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
sender
		self m1: (1+1) m2: 2.
		self m1: 3 m2: 4.! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40'!
m2:parameter2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:40' prior: 50851691!
sender
		self m2: 2.
		self m2: 4.! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:19:40'!
m1:parameter1 m2:parameter2!

!testRun: #RemoveParameterTest #test13ParameterIsRemovedCorrecltyFromSendersWithMoreThanOneSend stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:19:40'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterTest #test14CanNotRemoveParameterIndexLessThanOne stamp: 'HAW 10/2/2020 16:19:40'!
PASSED!

!testRun: #RemoveParameterTest #test15CanNotRemoveParameterIndexBiggerThanOldSelectorNumberOfKeywords stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RemoveParameterTest #test16ParameterIndexMustBeInteger stamp: 'HAW 10/2/2020 16:19:41'!
PASSED!

!testRun: #RenameClassTest #test01NewClassNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test02NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test03NewClassNameHasToStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:19:42'!
PASSED!

!testRun: #RenameClassTest #test04NewClassShouldNotExist stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test04_01NewClassNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:43'!
PASSED!

!testRun: #RenameClassTest #test05NewClassShouldNotBeUndeclare stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:44'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:44'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!

!testRun: #RenameClassTest #test06OldClassIsRenamedToNewClass stamp: 'HAW 10/2/2020 16:19:44'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest07 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:45'!
RefactoringClassTestData subclass: #OldClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45'!
m1 OldClassTest07 new! !

!classRenamed: #OldClassTest07 as: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:45'!
Smalltalk renameClassNamed: #OldClassTest07 as: #NewClassTest07!
!NewClassTest07 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:45' prior: 50851784!
m1 NewClassTest07 new! !

!testRun: #RenameClassTest #test07OldClassDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:45'!
PASSED!

!classRemoval: #NewClassTest07 stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #NewClassTest07
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest08 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:46'!
RefactoringClassTestData subclass: #OldClassTest08
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest08 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46'!
m1 #OldClassTest08 size! !

!classRenamed: #OldClassTest08 as: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:46'!
Smalltalk renameClassNamed: #OldClassTest08 as: #NewClassTest8!
!NewClassTest8 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:46' prior: 50851816!
m1 #NewClassTest8 size! !

!testRun: #RenameClassTest #test08OldClassLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:46'!
PASSED!

!classRemoval: #NewClassTest8 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest8
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest09 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 OldClassTest09 new. Object new! !

!classRenamed: #OldClassTest09 as: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest09 as: #NewClassTest09!
!NewClassTest09 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47' prior: 50851848!
m1 NewClassTest09 new. Object new! !

!testRun: #RenameClassTest #test09OtherClassDirectReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:47'!
PASSED!

!classRemoval: #NewClassTest09 stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #NewClassTest09
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest10 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:47'!
RefactoringClassTestData subclass: #OldClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:47'!
m1 #OldClassTest10 size. #Object size! !

!classRenamed: #OldClassTest10 as: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:47'!
Smalltalk renameClassNamed: #OldClassTest10 as: #NewClassTest10!
!NewClassTest10 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851880!
m1 #NewClassTest10 size. #Object size! !

!testRun: #RenameClassTest #test10OtherLiteralReferencesAreNotRenamed stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest10 stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #NewClassTest10
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest11 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:48'!
RefactoringClassTestData subclass: #OldClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48'!
m1 OldClassTest11 new. #OldClassTest11 size! !

!classRenamed: #OldClassTest11 as: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:48'!
Smalltalk renameClassNamed: #OldClassTest11 as: #NewClassTest11!
!NewClassTest11 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:48' prior: 50851913!
m1 NewClassTest11 new. #NewClassTest11 size! !

!testRun: #RenameClassTest #test11OldClassDirectAndLiteralReferencesAreRenameAtOnce stamp: 'HAW 10/2/2020 16:19:48'!
PASSED!

!classRemoval: #NewClassTest11 stamp: 'HAW 10/2/2020 16:19:49'!
RefactoringClassTestData subclass: #NewClassTest11
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test12CanNotRenameAMetaclass stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!testRun: #RenameClassTest #test13NewClassNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:49'!
PASSED!

!classDefinition: #OldClassTest14 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:50'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test14NewClassNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:19:50'!
PASSED!

!classRemoval: #OldClassTest14 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest14
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:51'!
m1 ^OldClassTest15! !

!classDefinition: #OldClassTest15 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #OldClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest15 as: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
Smalltalk renameClassNamed: #OldClassTest15 as: #NewClassTest15!

!testRun: #RenameClassTest #test15ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:19:51'!
PASSED!

!classRemoval: #NewClassTest15 stamp: 'HAW 10/2/2020 16:19:51'!
RefactoringClassTestData subclass: #NewClassTest15
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest15'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:52'!
m1 ^OldClassTest16! !

!classDefinition: #OldClassTest16 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #OldClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest16 as: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
Smalltalk renameClassNamed: #OldClassTest16 as: #NewClassTest16!

!testRun: #RenameClassTest #test16ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:52'!
PASSED!

!classRemoval: #NewClassTest16 stamp: 'HAW 10/2/2020 16:19:52'!
RefactoringClassTestData subclass: #NewClassTest16
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldClassTest16'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:53'!
m1 ^NewClassTest17! !

!classDefinition: #OldClassTest17 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:53'!
RefactoringClassTestData subclass: #OldClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRenamed: #OldClassTest17 as: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:53'!
Smalltalk renameClassNamed: #OldClassTest17 as: #NewClassTest17!

!testRun: #RenameClassTest #test17ItDoesNotRenameReferencesToClassVariableWithSameNameAsNewClassDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:19:53'!
PASSED!

!classRemoval: #NewClassTest17 stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #NewClassTest17
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:19:54'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'NewClassTest17'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:54'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!OldClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:54'!
m1 ^OldClassTest18! !

!classRenamed: #OldClassTest18 as: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:54'!
Smalltalk renameClassNamed: #OldClassTest18 as: #NewClassTest18!
!NewClassTest18 methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:55' prior: 50852147!
m1 ^NewClassTest18! !

!testRun: #RenameClassTest #test18WorksCorrectlyWhenSourceCodeEndsWithClassToRename stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #NewClassTest18 stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #NewClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #OldClassTest18 category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:55'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameClassTest #test19RenamesClassWhenMethodReferencesClassAndDoesNothing stamp: 'HAW 10/2/2020 16:19:55'!
PASSED!

!classRemoval: #OldClassTest18 stamp: 'HAW 10/2/2020 16:19:56'!
RefactoringClassTestData subclass: #OldClassTest18
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test00GlobalCanNotBeClass stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test01NewNameHasToBeDifferentToOldOne stamp: 'HAW 10/2/2020 16:19:56'!
PASSED!

!testRun: #RenameGlobalTest #test02NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test03NewNameShouldNotBeAClass stamp: 'HAW 10/2/2020 16:19:57'!
PASSED!

!testRun: #RenameGlobalTest #test04NewNameShouldNotBeAGlobalVariable stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!testRun: #RenameGlobalTest #test06OldNameIsRenamedToNewName stamp: 'HAW 10/2/2020 16:19:58'!
PASSED!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852222!
m1 ^NewNameToRename__! !

!testRun: #RenameGlobalTest #test07OldDirectReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:19:59'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59'!
m1 ^#OldNameToRename__! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:19:59' prior: 50852249!
m1 ^#NewNameToRename__! !

!testRun: #RenameGlobalTest #test08OldNameLiteralReferencesAreRenamed stamp: 'HAW 10/2/2020 16:19:59'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:20:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test09NewNameHasToBeASymbol stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!testRun: #RenameGlobalTest #test10NewNameCanNotHaveSpaces stamp: 'HAW 10/2/2020 16:20:00'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:01'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:01'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test11ItDoesNotRenameReferencesToClassVariableWithSameName stamp: 'HAW 10/2/2020 16:20:01'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVarSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:02'!
m1 ^OldNameRenamed__! !

!testRun: #RenameGlobalTest #test12ItDoesNotRenameReferencesToClassVariableWithSameNameDefinedInAnySuperclass stamp: 'HAW 10/2/2020 16:20:02'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:02'!
ClassReferencingClassVarSuperclass subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassVarSuperclass stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVarSuperclass
	instanceVariableNames: ''
	classVariableNames: 'OldNameRenamed__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test13OldNameMustBeDefined stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classDefinition: #ClassReferencingClassVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:03'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:03'!
m1 ^OldNameToRename__! !

!testRun: #RenameGlobalTest #test14ItDoesNotRenameReferencesToClassVariableFromClassSideWithSameName stamp: 'HAW 10/2/2020 16:20:03'!
PASSED!

!classRemoval: #ClassReferencingClassVar stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassReferencingClassVar
	instanceVariableNames: ''
	classVariableNames: 'OldNameToRename__'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameGlobalTest #test15OldNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classDefinition: #ClassWithoutInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:04'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test01CanNotRenameAnInstanceVariableNotDefinedInClass stamp: 'HAW 10/2/2020 16:20:04'!
PASSED!

!classRemoval: #ClassWithoutInstVar stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassWithoutInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:05'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:05'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test03NewVariableNameCanNotContainBlanks stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:06'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test04NewVariableNameCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:20:06'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:07'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test05ValidNewVariableNameGetBlanksTrimmed stamp: 'HAW 10/2/2020 16:20:07'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test06NewVariableNameCanNotBeDefinedInClass stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:08'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test07NewVariableNameCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:20:08'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:09'!
SuperclassWithInstVar subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassWithInstVar stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #SuperclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:09'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test08NewVariableNameCanNotBeDefinedInAnySubclass stamp: 'HAW 10/2/2020 16:20:09'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:10'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:10'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test09RenameCreatesNewInstanceVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:10'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11'!
m1 ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:11'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:11' prior: 50852610!
m1 ^new! !

!testRun: #RenameInstanceVariableTest #test10ReadReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:11'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852647!
m1 new := 10! !

!testRun: #RenameInstanceVariableTest #test11WriteReferencesToOldVariableAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassWithInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12'!
m1 old := 10. ^old! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:12'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassWithInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:12' prior: 50852693!
m1 new := 10. ^new! !

!testRun: #RenameInstanceVariableTest #test12ReferencesInSubclassesAreRenamed stamp: 'HAW 10/2/2020 16:20:12'!
PASSED!

!classRemoval: #SubclassWithInstVar stamp: 'HAW 10/2/2020 16:20:13'!
ClassToRenameInstVar subclass: #SubclassWithInstVar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13'!
m1 keep := old. ^keep! !

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:13'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:13' prior: 50852738!
m1 keep := new. ^keep! !

!testRun: #RenameInstanceVariableTest #test13ReferencesToOtherVariablesAreNotRenamed stamp: 'HAW 10/2/2020 16:20:13'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new keep'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:14'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameInstanceVariableTest #test14NewVariableOfExistingInstancesReferToOldVariableValue stamp: 'HAW 10/2/2020 16:20:14'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1 | new | new := 10.! !

!testRun: #RenameInstanceVariableTest #test15FailsWhenNewVariableEqualsTemporaryVariableOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:15'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:15'!
m1:new! !

!testRun: #RenameInstanceVariableTest #test16FailsWhenNewVariableEqualsArgumentOfAMethodInClass stamp: 'HAW 10/2/2020 16:20:15'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:16'!
m1 [ :new | ] value: 1! !

!testRun: #RenameInstanceVariableTest #test17FailsWhenNewVariableEqualsArgumentOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:16'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:16'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 [ | new | ] value! !

!testRun: #RenameInstanceVariableTest #test18FailsWhenNewVariableEqualsTemporaryOfABlockInAMethodInClass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassOfClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:17'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassOfClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:17'!
m1 | new | ! !

!testRun: #RenameInstanceVariableTest #test19FailsWhenNewVariableIsHiddenInAnyMethodOfAnySubclass stamp: 'HAW 10/2/2020 16:20:17'!
PASSED!

!classRemoval: #SubclassOfClassToRefactor stamp: 'HAW 10/2/2020 16:20:18'!
ClassToRenameInstVar subclass: #SubclassOfClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:18'!
RefactoringClassTestData subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'old'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameInstVar category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:18'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameInstVar class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:18' overrides: 16806529!
wantsChangeSetLogging ^false! !

!testRun: #RenameInstanceVariableTest #test20ClassChangeIsAddedWhenRenamingAnInstanceVariable stamp: 'HAW 10/2/2020 16:20:18'!
PASSED!

!classRemoval: #ClassToRenameInstVar stamp: 'HAW 10/2/2020 16:20:19'!
Object subclass: #ClassToRenameInstVar
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:19'!
newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:19'!
oldXyz__!

!testRun: #RenameSelectorTest #test01MessageWithNoSendersCreatesNewMethodAndRemovesOldOne stamp: 'HAW 10/2/2020 16:20:19'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:19'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853014!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test02SendersOfMessageAreRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:20'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853053!
m1__ self oldXyz__. self toKeep! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:20' prior: 50853057!
m1__ self newXyz__. self toKeep! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:20'!
oldXyz__!

!testRun: #RenameSelectorTest #test03OtherMessagesSendsAreNotRenamed stamp: 'HAW 10/2/2020 16:20:20'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:21'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test04OldSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test05NewSelectorCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:21'!
PASSED!

!testRun: #RenameSelectorTest #test06CanRenameWithoutImplementors stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test07AllImplementorsMustImplementOldSelector stamp: 'HAW 10/2/2020 16:20:22'!
PASSED!

!testRun: #RenameSelectorTest #test08AllSendersShouldSendOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test09NewSelectorMustBeOfSameTypeAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!testRun: #RenameSelectorTest #test10NewSelectorMustHaveSameNumberOfArgumentsAsOldSelector stamp: 'HAW 10/2/2020 16:20:23'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'oldSelectorCategory' stamp: 'HAW 10/2/2020 16:20:24'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24' prior: 50853121!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__!

!testRun: #RenameSelectorTest #test11NewImplementorsKeepMethodCategory stamp: 'HAW 10/2/2020 16:20:24'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:24'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:24'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853156!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853168!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self oldXyz__!

!testRun: #RenameSelectorTest #test12RenamesRecursiveMethodsWhenNotInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:25'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853201!
oldXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25'!
newXyz__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853209!
oldXyz__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:25' prior: 50853213!
newXyz__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:25'!
oldXyz__ self newXyz__!

!testRun: #RenameSelectorTest #test13RenamesRecursiveMethodsWhenInSenders stamp: 'HAW 10/2/2020 16:20:25'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:26'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853250!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
m1 #oldXyz__ size! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:26' prior: 50853262!
m1 #newXyz__ size! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:26'!
oldXyz__!

!testRun: #RenameSelectorTest #test14RenamesSymbolsEqualToOldSelector stamp: 'HAW 10/2/2020 16:20:26'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853301!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:27' prior: 50853309!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:27'!
oldXyz__!

!testRun: #RenameSelectorTest #test15ScopeToRenameCanBeClassOnly stamp: 'HAW 10/2/2020 16:20:27'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:27'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853377!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853381!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853385!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853389!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853402!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853406!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853411!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853415!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:28'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853460!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853464!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853468!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' overrides: 50853472!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853381!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853389!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853406 overrides: 50853485!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853415 overrides: 50853490!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853433 overrides: 50853495!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:28' prior: 50853443 overrides: 50853500!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:28'!
oldXyz__!

!testRun: #RenameSelectorTest #test16ScopeToRenameCanBeHierarchyOnly stamp: 'HAW 10/2/2020 16:20:28'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:28'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:29'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853605!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853613!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853580!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:29' prior: 50853588!
m1__ self newXyz__! !

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:29'!
oldXyz__!

!testRun: #RenameSelectorTest #test17ScopeToRenameCanBeCategoryOnly stamp: 'HAW 10/2/2020 16:20:29'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:30'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853714!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853718!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853722!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853726!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853739!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853743!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853748!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853752!
m1__ self oldXyz__! !

!classDefinition: #AnotheclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #OtherCatClassToRenameSelector category: '__Refactoring-TestData__-Another' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__-toAvoid' stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
m1__ self oldXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853857!
newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' overrides: 50853881!
newXyz__! !
!AnotheclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853797!
m1__ self newXyz__! !
!AnotheclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853805!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853743 overrides: 50853718!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853752 overrides: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853770 overrides: 50853899!
m1__ self newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853718!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853726!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853780 overrides: 50853904!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853831!
m1__ self newXyz__! !
!OtherCatClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:31' prior: 50853823!
m1__ self newXyz__! !

!methodRemoval: AnotheclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: AnotheclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: OtherCatClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:31'!
oldXyz__!

!testRun: #RenameSelectorTest #test18ScopeToRenameCanBeCategoriesAndHierarchyOnly stamp: 'HAW 10/2/2020 16:20:31'!
PASSED!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:31'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-toAvoid'!

!classRemoval: #AnotheclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
RefactoringClassTestData subclass: #AnotheclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
ClassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:32'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classRemoval: #OtherCatClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #OtherCatClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__-Another'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !

!classDefinition: #AnotherclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:33'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854034!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854042!
m1__ self newXyz__! !
!AnotherclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854059!
m1__ self newXyz__! !
!AnotherclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:33' prior: 50854067!
m1__ self newXyz__! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!methodRemoval: AnotherclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:33'!
oldXyz__!

!testRun: #RenameSelectorTest #test19ScopeToRenameCanBeTheCompleteSystem stamp: 'HAW 10/2/2020 16:20:33'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnotherclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:34'!
RefactoringClassTestData subclass: #AnotherclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorTest #test20CanNotRenameToItSelf stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test21NewSelectorCanNotBeImplementedOnAnyClassImplementingOldSelector stamp: 'HAW 10/2/2020 16:20:34'!
PASSED!

!testRun: #RenameSelectorTest #test22WarnsWhenOverridesSuperclassImplementation stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:35'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854158!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
m1 ^#(#oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:35' prior: 50854170!
m1 ^#(#newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:35'!
oldXyz__!

!testRun: #RenameSelectorTest #test23OldSelectorIsRenamedWhenDefinedInLiteralArray stamp: 'HAW 10/2/2020 16:20:35'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854205!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
m1 ^#(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:36' prior: 50854217!
m1 ^#(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:36'!
oldXyz__!

!testRun: #RenameSelectorTest #test24OldSelectorIsRenamedWhenDefinedInLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:36'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:36'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854253!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__), #(#oldXyz__ #oldXyz__)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854265!
m1 ^#(#newXyz__ #newXyz__), #(#newXyz__ #newXyz__)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test25OldSelectorIsRenamedWhenDefinedInMoreThanOneLiteralArrayMoreThanOnce stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:37'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854303!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
m1 ^#(#oldXyz__ #oldXyz__1)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:37' prior: 50854315!
m1 ^#(#newXyz__ #oldXyz__1)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:37'!
oldXyz__!

!testRun: #RenameSelectorTest #test26DoesNotRenameLiteralsThatBeginsWithOldSelectorInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:37'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:38'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1__ self oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854351!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
m1 ^#(#oldXyz__ #oldXyz__:)! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:38' prior: 50854363!
m1 ^#(#newXyz__ #oldXyz__:)! !

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:38'!
oldXyz__!

!testRun: #RenameSelectorTest #test27DoesNotRenameLiteralsThatBeginsWithOldSelectorAndEndWithColonInsideLiteralArray stamp: 'HAW 10/2/2020 16:20:38'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self && 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854403!
m1 ^self abc: 1! !

!methodRemoval: ClassToRenameSelector #&& stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter!

!testRun: #RenameSelectorTest #test28CanRenameFromBinaryToKeywordOfOneParameter stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:39'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
m1 ^self abc: 1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39'!
&& aParameter! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:39' prior: 50854442!
m1 ^self && 1! !

!methodRemoval: ClassToRenameSelector #abc: stamp: 'HAW 10/2/2020 16:20:39'!
abc: aParameter!

!testRun: #RenameSelectorTest #test29CanRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:39'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:40'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:40'!
&& aParameter! !

!testRun: #RenameSelectorTest #test30CanNotRenameFromBinaryToKeywordOfMoreThanOneParameter stamp: 'HAW 10/2/2020 16:20:40'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
abc: p1 def: p2! !

!testRun: #RenameSelectorTest #test31CanNotRenameFromKeywordOfOneParameterToBinary stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SuperclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
m1__ self oldXyz__! !

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !

!classDefinition: #SubclassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:41'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854526!
oldXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854530!
m1__ self oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854534!
oldXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854538!
m1__ self oldXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854596!
newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' overrides: 50854600!
newXyz__! !
!SuperclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854530!
m1__ self newXyz__! !
!SuperclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854538!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854555 overrides: 50854621!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854564 overrides: 50854626!
m1__ self newXyz__! !
!SubclassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854582 overrides: 50854621!
m1__ self newXyz__! !
!SubclassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:41' prior: 50854592 overrides: 50854626!
m1__ self newXyz__! !

!methodRemoval: SuperclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SuperclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!methodRemoval: SubclassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:41'!
oldXyz__!

!testRun: #RenameSelectorTest #test32HierarchyScopeRenamesSelectorsFromSuperclassDefiningSelector stamp: 'HAW 10/2/2020 16:20:41'!
PASSED!

!classRemoval: #SubclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #SubclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:42'!
SuperclassToRenameSelector subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #SuperclassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #SuperclassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !

!classDefinition: #ClassToAvoidRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
m1__ self oldXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' overrides: 16782761!
compilerClass ^nil! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43'!
newXyz__! !
!ClassToAvoidRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854742!
m1__ self newXyz__! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854709!
m1__ self newXyz__! !
!ClassToRenameSelector class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:43' prior: 50854717!
m1__ self newXyz__! !

!methodRemoval: ClassToAvoidRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!methodRemoval: ClassToRenameSelector class #oldXyz__ stamp: 'HAW 10/2/2020 16:20:43'!
oldXyz__!

!testRun: #RenameSelectorTest #test33DoNotRenameSendersAndImplementorsWhoseCompilerClassIsDifferentToCompiler stamp: 'HAW 10/2/2020 16:20:43'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:20:43'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAvoidRenameSelector stamp: 'HAW 10/2/2020 16:20:44'!
RefactoringClassTestData subclass: #ClassToAvoidRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test01VariableToRenameHasToBeDefined stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test02NewVariableNameCanNotBeEmpty stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test03NewVariableHasToBeValid stamp: 'HAW 10/2/2020 16:20:44'!
PASSED!

!testRun: #RenameTemporaryTest #test04NewVariableNameCanNotBeDefinedInMethod stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:45'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test05FailsIfNewTemporaryIsEqualToInstanceVariableInClass stamp: 'HAW 10/2/2020 16:20:45'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRenameTemp
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameTemp category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:46'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test06FailsIfNewTemporaryIsEqualToInstanceVariableInAnySuperclass stamp: 'HAW 10/2/2020 16:20:46'!
PASSED!

!classRemoval: #ClassToRenameTemp stamp: 'HAW 10/2/2020 16:20:47'!
ClassToRefactorSuperclass subclass: #ClassToRenameTemp
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:20:47'!
RefactoringClassTestData subclass: #ClassToRefactorSuperclass
	instanceVariableNames: 'new'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameTemporaryTest #test07RenameCreatesNewTemporaryVariableAndDeletesOldOne stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test08RenameChangesReferencesFromOldVariableToNewVariable stamp: 'HAW 10/2/2020 16:20:47'!
PASSED!

!testRun: #RenameTemporaryTest #test09RenamesArguments stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test10NewVariableNameCanNotBeDefinedAsBlockArgument stamp: 'HAW 10/2/2020 16:20:48'!
PASSED!

!testRun: #RenameTemporaryTest #test11RenamesBlockArguments stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test12RenamesBlockTemporaries stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test13OldNodeMustBePartOfMethodNode stamp: 'HAW 10/2/2020 16:20:49'!
PASSED!

!testRun: #RenameTemporaryTest #test14OldVariableNodeMustBeArgOrTempNode stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test15RenameVariablesWithSameNameInDifferentBlocksCorrectly stamp: 'HAW 10/2/2020 16:20:50'!
PASSED!

!testRun: #RenameTemporaryTest #test16CantRenameVariableToANameAlreadyUsedInAnUpperBlock stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test17RenamesOneCharVariableAfterAReturnWithoutCharsAfterThatCorrectly stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!testRun: #RenameTemporaryTest #test18CantRenameVariableToAReservedName stamp: 'HAW 10/2/2020 16:20:51'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:52'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test02ClassesWithNoReferencesAndNoSubclassesAreSafetelyRemoved stamp: 'HAW 10/2/2020 16:20:52'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test03RemovingTheMetaclassRemovesTheClass stamp: 'HAW 10/2/2020 16:20:53'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:53'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:53'!
m1 ^ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test04CanNotRemoveClassWithReferencesOutsideHierarchy stamp: 'HAW 10/2/2020 16:20:54'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:54'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:55'!
m1 ^ClassToRemove! !

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test05CanRemoveClassWithReferencesFromItself stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:55'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test06WarnIfClassToRemoveHasSubclasses stamp: 'HAW 10/2/2020 16:20:55'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:56'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:56'!
m1 ^ClassToRemoveSubclass! !

!testRun: #SafelyRemoveClassTest #test07CanNotRemoveClassWhenSubclassesHaveReferencesOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:20:57'!
PASSED!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:57'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:58'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test08HierarchyIsRemovedIfSubclassesWarningIsResumed stamp: 'HAW 10/2/2020 16:20:59'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveSubclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m1 ^ClassToRemoveSubclass! !
!ClassToRemoveSubclass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:20:59'!
m2 ^ClassToRemove! !

!classRemoval: #ClassToRemoveSubclass stamp: 'HAW 10/2/2020 16:20:59'!
ClassToRemove subclass: #ClassToRemoveSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #SafelyRemoveClassTest #test09CanRemoveIfReferencesToSubclassesAreInTheHierarchy stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classDefinition: #ClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassReferencingClassToRemove category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:00'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassReferencingClassToRemove methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:00'!
m1 ^#ClassToRemove! !

!testRun: #SafelyRemoveClassTest #test10WarnWhenHasReferencesToName stamp: 'HAW 10/2/2020 16:21:00'!
PASSED!

!classRemoval: #ClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassReferencingClassToRemove stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassReferencingClassToRemove
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:01' prior: 50855245!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:01'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test01ApplyChangesTemporaryVariableToInstanceVariable stamp: 'HAW 10/2/2020 16:21:01'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02'!
m1| a |a := 2.
	^a! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:02' prior: 50855282!
m1 a := 2.
	^a! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:02'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test02ApplyDoesntChangeRestOfSourceCode stamp: 'HAW 10/2/2020 16:21:02'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1! !

!testRun: #TemporaryToInstanceVariableTest #test03TemporaryToChangeShouldExist stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:03'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:03'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test04TemporaryShouldNotExistInOtherClassMethod stamp: 'HAW 10/2/2020 16:21:03'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:04'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:04'!
m1| a |! !

!testRun: #TemporaryToInstanceVariableTest #test05InstanceVariableShouldNotExistInSubclass stamp: 'HAW 10/2/2020 16:21:04'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #SubclassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:05'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m1| a |! !
!SubclassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:05'!
m2| a |! !

!testRun: #TemporaryToInstanceVariableTest #test06TemporaryShouldNotExistInSubclassMethod stamp: 'HAW 10/2/2020 16:21:05'!
PASSED!

!classRemoval: #SubclassToRefactor stamp: 'HAW 10/2/2020 16:21:06'!
ClassToChangeVariable subclass: #SubclassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06'!
m1| a |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:06' prior: 50855455!
m1 ! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:06'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test07RemovesPipesWhenRemovingLastTemporaryInMethod stamp: 'HAW 10/2/2020 16:21:06'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07'!
m1| a b |! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:07' prior: 50855492!
m1|  b |! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:07'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test08DoesntRemoveOtherVariables stamp: 'HAW 10/2/2020 16:21:07'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].
	[ | a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test09TemporaryShouldNotExistInOtherBlockInSameMethod stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08'!
m1
	[ | a | ].! !
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:08' prior: 50855554!
m1
	[   ].! !

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:08'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #TemporaryToInstanceVariableTest #test10RemovesPipesWhenRemovingLastTemporaryInBlock stamp: 'HAW 10/2/2020 16:21:08'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: 'a'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:09'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:09'!
m1 [ | a | ]. [ :a | ].! !

!testRun: #TemporaryToInstanceVariableTest #test11TemporaryShouldNotExistAsArgumentInOtherBlocksInSameMethod stamp: 'HAW 10/2/2020 16:21:09'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToChangeVariable category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToChangeVariable methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:10'!
m1: a! !

!testRun: #TemporaryToInstanceVariableTest #test12CantExtractArgument stamp: 'HAW 10/2/2020 16:21:10'!
PASSED!

!classRemoval: #ClassToChangeVariable stamp: 'HAW 10/2/2020 16:21:10'!
RefactoringClassTestData subclass: #ClassToChangeVariable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:11'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test01MethodObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test02MethodObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:21:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:12'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test03MethodObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:13'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test04MethodObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:21:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:14'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test05MethodObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:21:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:15'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test06AllVariablesToParametrizeMustHaveACorrespondingMethodObjectInstanceVariableName stamp: 'HAW 10/2/2020 16:21:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test07AllInstanceVariableNamesMustCorrespondToVariableToParametrize stamp: 'HAW 10/2/2020 16:21:16'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test08MethodObjectInstanceVariableNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:21:17'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test09MethodObjectInstanceVariableNamesCanNotContainBlanks stamp: 'HAW 10/2/2020 16:21:18'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:19'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test10MethodObjectInstanceVariableNamesCanNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:21:19'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:20'!
m1
		self isNil.! !

!testRun: #ExtractToMethodObjectTest #test11MethodObjectInstanceVariableNamesCanNotBeDefinedInSuperclasses stamp: 'HAW 10/2/2020 16:21:20'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: 'anInstVarName'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:21'!
m1
		self isNil.
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test12MethodObjectInstanceVariableNamesCanNotBeDuplicated stamp: 'HAW 10/2/2020 16:21:21'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:22'!
m1
		| aTemporal |

		aTemporal := 1.
		self isNil.

		^aTemporal + 2! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test13MethodObjectInstanceVariableNamesCanNotBeNamedAsMethodTemporal stamp: 'HAW 10/2/2020 16:21:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:23'!
m1
		^[
			| aBlockTemporal |

			self isNil.
			aBlockTemporal.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test14MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockTemporal stamp: 'HAW 10/2/2020 16:21:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:24'!
m1
		^[:aBlockArgument |
			self isNil.
			aBlockArgument.]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test15MethodObjectInstanceVariableNamesCanNotBeNamedAsBlockArgument stamp: 'HAW 10/2/2020 16:21:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:25'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test16MethodObjectInstanceCreationMessageMustHaveAKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:25'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:26'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test17MethodObjectInstanceCreationMessageMustHaveOnlyOneKeywordForEveryVariableToParametrize stamp: 'HAW 10/2/2020 16:21:26'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:26'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:27'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test18MethodObjectInstanceCreationMessageMustNotHaveKeywordForAnUnknownVariableToParametrize stamp: 'HAW 10/2/2020 16:21:27'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:27'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:28'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test19MethodObjectInstanceCreationMessageKeywordsCanNotHaveInvalidCharacters stamp: 'HAW 10/2/2020 16:21:28'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:28'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:29'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test20MethodObjectInstanceCreationMessageSelectorStartsWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:21:29'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:29'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:30'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test21MethodObjectInstanceCreationMessageKeywordsCannotBeEmpty stamp: 'HAW 10/2/2020 16:21:30'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:30'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:31'!
m1! !

!testRun: #ExtractToMethodObjectTest #test22MethodObjectSuperclassCannotBeMeta stamp: 'HAW 10/2/2020 16:21:31'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:31'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:32' prior: 50856507!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test23CreatesMethodObjectClass stamp: 'HAW 10/2/2020 16:21:32'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:32'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
m1! !

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:33'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:33' prior: 50856577!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test24CreatesMethodObjectClassAsSubclassOfTheChosenSuperclass stamp: 'HAW 10/2/2020 16:21:33'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:34'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:34' prior: 50856630!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test25CreatesMethodObjectClassInTheChosenCategory stamp: 'HAW 10/2/2020 16:21:34'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:35'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:36' prior: 50856692!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test26MethodObjectClassInstanceCreationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:36'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:36'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:37'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:37' prior: 50856768!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test27MethodObjectClassInstanceCreationMessageSelectorConsistsOfTheChosenKeywords stamp: 'HAW 10/2/2020 16:21:37'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:38'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:38' prior: 50856843!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test28MethodObjectClassInstanceCreationMessageCreatesARefactoringInstance stamp: 'HAW 10/2/2020 16:21:38'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:39'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:39' prior: 50856918!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test29MethodObjectInitializationMessageReceivesTheSameNumberOfArgumentsAsVariablesToParametrizeInMethodToExtract stamp: 'HAW 10/2/2020 16:21:39'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:40'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:40'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:41' prior: 50856994!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test30MethodObjectInitializationMessageSelectorConsistsOfTheChosenKeywordsPrefixedWithInitializationPrefix stamp: 'HAW 10/2/2020 16:21:41'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:41'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:41'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:42' prior: 50857070!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test31MethodObjectInitializationMessageAssignsTheInstanceVariables stamp: 'HAW 10/2/2020 16:21:42'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:42'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:43'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43'!
aCustomEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:43' prior: 50857145!
m1
	(MethodObject new) aCustomEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test32MethodObjectEvaluationMessageHasTheChosenSelector stamp: 'HAW 10/2/2020 16:21:43'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
m1
	self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:44'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44'!
defaultEvaluationSelector
	thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:44' prior: 50857207!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test33MethodObjectEvaluationMethodSourceCodeHasTheSameFormatAsTheExtractedMethod stamp: 'HAW 10/2/2020 16:21:44'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:45'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:45' prior: 50857282!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test34MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfSelf stamp: 'HAW 10/2/2020 16:21:45'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:46'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:46'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
m1
		anInstVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:47' prior: 50857358!
m1
	(MethodObject with: anInstVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test35MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorInstanceVariable stamp: 'HAW 10/2/2020 16:21:47'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:47'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
m1: anArg
		anArg isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:48'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
initializeWith: aParamName
	anArgReplacement := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48'!
defaultEvaluationSelector
		anArgReplacement isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:48' prior: 50857436!
m1: anArg
	(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test36MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfExtractedMethodArgument stamp: 'HAW 10/2/2020 16:21:48'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgReplacement'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
m1
		APoolVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:49'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:49' prior: 50857521!
m1
	(MethodObject with: APoolVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test37MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorPoolVariable stamp: 'HAW 10/2/2020 16:21:49'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:50'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:50'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:50'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:21:51'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
m1
		"A comment talking about self"
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51'!
defaultEvaluationSelector
		"A comment talking about self"
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:51' prior: 50857605!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test38MethodObjectEvaluationMethodSourceCodeCommentsReferencingParametrizedVariableAreNotReplaced stamp: 'HAW 10/2/2020 16:21:51'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:51'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test39MethodObjectEvaluationMethodSourceCodePreservesBlockArgumentsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:52'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test40MethodObjectEvaluationMethodSourceCodePreservesBlockTemporalsShadowing stamp: 'HAW 10/2/2020 16:21:52'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:53'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:53' prior: 50857723!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test41RefactoredMethodUnarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:53'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:54'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:54' prior: 50857784!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test42RefactoredMethodBinarySelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:54'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:55'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:55'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:56' prior: 50857860!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test43RefactoredMethodKeywordSelectorIsPreserved stamp: 'HAW 10/2/2020 16:21:56'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:56'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:56'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
!!@ anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:57' prior: 50857936!
!!@ anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test44WhenBinaryMethodIsRefactoredArgumentNameIsPreserved stamp: 'HAW 10/2/2020 16:21:57'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:57'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
m1: anArg ^anArg.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:58'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58'!
defaultEvaluationSelector ^correspondingInstVar.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:58' prior: 50858012!
m1: anArg
	^(MethodObject with: anArg) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test45WhenKeywordsMethodIsRefactoredArgumentNamesArePreserved stamp: 'HAW 10/2/2020 16:21:58'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:21:59'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:21:59' prior: 50858088!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test46WhenThereAreNoVariablesToParametrizeTheRefactoredMethodUsesTheNewMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:21:59'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
m1 ^self isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:00'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
initializeWith: aParamName
	correspondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00'!
defaultEvaluationSelector ^correspondingInstVar isNil! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:00' prior: 50858151!
m1
	^(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test47WhenThereAreVariablesToParametrizeTheRefactoredMethodUsesTheChosenMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:00'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:01'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'correspondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:01'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
m1: anArg ^(self isNil) or: (anArg isNil)! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
with: anArgParamName andWith: aSelfParamName
	^self new initializeWith: anArgParamName andWith: aSelfParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
initializeWith: anArgParamName andWith: aSelfParamName
	anArgCorrespondingInstVar := anArgParamName.
	selfCorrespondingInstVar := aSelfParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02'!
defaultEvaluationSelector ^(selfCorrespondingInstVar isNil) or: (anArgCorrespondingInstVar isNil)! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:02' prior: 50858227!
m1: anArg
	^(MethodObject with: anArg andWith: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test48WhenThereAreMultipleVariablesToParametrizeTheRefactoredMethodPassesTheVariablesInTheChosenOrderToTheMessageToCreateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:02'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:02'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'anArgCorrespondingInstVar selfCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:03'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03'!
defaultEvaluationSelector! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:03' prior: 50858314!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test49TheRefactoredMethodUsesTheChosenEvaluationSelectorToEvaluateTheMethodObjectInstance stamp: 'HAW 10/2/2020 16:22:03'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
m1
		| a |

		a := 1 + 1.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:04'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04'!
defaultEvaluationSelector
		| a |

		a := 1 + 1.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:04' prior: 50858377!
m1
	(MethodObject new) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test50TheRefactoredMethodPreservesTheImplicitReturn stamp: 'HAW 10/2/2020 16:22:04'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:05'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:05'!
m1 ^super isNil! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:05'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test51TheMethodToExtractMustNotReferenceSuper stamp: 'HAW 10/2/2020 16:22:05'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:06'!
m1
		anInstVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:06'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test52TheMethodToExtractMustNotContainInstVarAssignments stamp: 'HAW 10/2/2020 16:22:06'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:07'!
m1
		AClassVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:07'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test53TheMethodToExtractMustNotContainClassVarAssignments stamp: 'HAW 10/2/2020 16:22:07'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #APool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:08'!
m1
		APoolVar := 2.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:08'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test54TheMethodToExtractMustNotContainPoolVarAssignments stamp: 'HAW 10/2/2020 16:22:08'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:09'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'APool'
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:09'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #APool stamp: 'HAW 10/2/2020 16:22:10'!
SharedPool subclass: #APool
	instanceVariableNames: ''
	classVariableNames: 'APoolVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
m1
		AClassVar isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:10'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
initializeWith: aParamName
	aCorrespondingInstVar := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10'!
defaultEvaluationSelector
		aCorrespondingInstVar isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:10' prior: 50858610!
m1
	(MethodObject with: AClassVar) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test55MethodObjectEvaluationMethodSourceCodeReferencesCorrespondingInstanceVariableInsteadOfClassToRefactorClassVariable stamp: 'HAW 10/2/2020 16:22:10'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:10'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:11'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'aCorrespondingInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:11'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:11'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test56MethodObjectInstanceCreationMessageParameterNamesMustNotRepeat stamp: 'HAW 10/2/2020 16:22:11'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:12'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test57MethodObjectInstanceCreationMessageParameterNamesMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:12'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:12'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:13'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test58MethodObjectInstanceCreationMessageParameterNamesMustNotContainSeparators stamp: 'HAW 10/2/2020 16:22:13'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:13'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:14'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test59MethodObjectInstanceCreationMessageParameterNamesMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:14'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:14'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:15'!
m1 self = anInstVar ifTrue: [^1] ifFalse: [^2]! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test60MethodObjectInstanceCreationMessageParameterNamesMustNotBeEqualToAMethodObjectInstanceVariable stamp: 'HAW 10/2/2020 16:22:15'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:15'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:16' prior: 50858887!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test61MethodObjectClassInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:16'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:16'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:17'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:17' prior: 50858962!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test62MethodObjectInstanceCreationMessageParameterNamesAreTheChosenOnes stamp: 'HAW 10/2/2020 16:22:17'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:18'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:18' prior: 50859037!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test63MethodObjectInstanceInitializationMessageIsCategorizedAsInitialization stamp: 'HAW 10/2/2020 16:22:18'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:19'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:19'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:20' prior: 50859112!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test64MethodObjectInstanceCreationMessageIsCategorizedAsInstanceCreation stamp: 'HAW 10/2/2020 16:22:20'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:20'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
m1
		self isNil.! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #MethodObject category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:21'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!MethodObject class methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
with: aParamName
	^self new initializeWith: aParamName! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
initializeWith: aParamName
	thePreviousSelf := aParamName.! !
!MethodObject methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21'!
defaultEvaluationSelector
		thePreviousSelf isNil.! !
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:21' prior: 50859187!
m1
	(MethodObject with: self) defaultEvaluationSelector! !

!testRun: #ExtractToMethodObjectTest #test65MethodObjectEvaluationMessageIsCategorizedAsEvaluating stamp: 'HAW 10/2/2020 16:22:21'!
PASSED!

!classRemoval: #MethodObject stamp: 'HAW 10/2/2020 16:22:22'!
MethodObjectSuperclass subclass: #MethodObject
	instanceVariableNames: 'thePreviousSelf'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:22'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:22'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test66MethodObjectEvaluationSelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:22:22'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:23'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:23'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test67MethodObjectEvaluationSelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:22:23'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:24'!
m1! !

!classDefinition: #MethodObjectSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:24'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #ExtractToMethodObjectTest #test68MethodObjectEvaluationSelectorMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:22:24'!
PASSED!

!classRemoval: #MethodObjectSuperclass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #MethodObjectSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:25'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test01InstanceVariableMustBelongToTheClass stamp: 'HAW 10/2/2020 16:22:25'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IfNilChecksFinderTest #test02WhenThereAreNoIfNilChecksTheResultIsEmpty stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:26'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:26'!
m1 randomInstVar ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test03ResultIncludesIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:26'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:27'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:27'!
m1 randomInstVar ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test04ResultIncludesIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:27'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNil: [ 2 + 2 ] ifNotNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test05ResultIncludesIfNilIfNotNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:28'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:28'!
m1 randomInstVar ifNotNil: [ 2 + 2 ] ifNil: [ 1 + 1 ]! !

!testRun: #IfNilChecksFinderTest #test06ResultIncludesIfNotNilIfNilMessageSending stamp: 'HAW 10/2/2020 16:22:28'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:29'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:29'!
m1 randomInstVar isNil ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test07ResultIncludesIsNilIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:29'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test08ResultIncludesIsNilIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:30'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:30'!
m1 randomInstVar isNil ifTrue: [1 + 1] ifFalse: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test09ResultIncludesIsNilIfTrueIfFalseMessageSending stamp: 'HAW 10/2/2020 16:22:30'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:31'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:31'!
m1 randomInstVar isNil ifFalse: [1 + 1] ifTrue: [ 2 + 2 ]! !

!testRun: #IfNilChecksFinderTest #test10ResultIncludesIsNilIfFalseIfTrueMessageSending stamp: 'HAW 10/2/2020 16:22:31'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNotNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test11WhenThereAreMultipleIfNilChecksInTheSameMethodTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:32'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m1 randomInstVar ifNil: [1 + 1]! !
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:32'!
m2 randomInstVar ifNil: [2 + 2]! !

!testRun: #IfNilChecksFinderTest #test12WhenThereAreIfNilChecksInMultipleMethodsTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:32'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ContextClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:33'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ContextClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:33'!
m1 randomInstVar ifNil: [1 + 1].randomInstVar ifNil: [1 + 1].! !

!testRun: #IfNilChecksFinderTest #test13WhenThereAreMultipleIfNilChecksInTheSameMethodWithTheSameCodeTheResultIncludesAllOfThem stamp: 'HAW 10/2/2020 16:22:33'!
PASSED!

!classRemoval: #ContextClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ContextClass
	instanceVariableNames: 'randomInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:34'!
m1 anInstVar ifNil: [ super isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test01BlocksToExtractMustNotContainReferencesToSuper stamp: 'HAW 10/2/2020 16:22:34'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:34'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:35'!
m1 anInstVar ifNil: [ anInstVar := 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test02BlocksToExtractMustNotContainAssignmentsToVariablesThatAreNotTemporals stamp: 'HAW 10/2/2020 16:22:35'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:35'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:36'!
m1 anInstVar ifNil: [
			1 = 2 ifFalse: [ |aTemp| aTemp := 3]]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:36'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test03BlocksToExtractCanAssignToTemporalsOfNestedBlocks stamp: 'HAW 10/2/2020 16:22:36'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:37'!
m1 anInstVar ifNil: [ |aTemp| aTemp := 2]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:37'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test04BlocksToExtractCanAssignToTemporalsOfBlocks stamp: 'HAW 10/2/2020 16:22:37'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:38'!
m1 anInstVar ifNil: [^anInstVar is Nil]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:38'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test07BlocksToExtractMustNotContainReturnStatements stamp: 'HAW 10/2/2020 16:22:38'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:39'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactorSuperclass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:40'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test08InstanceVariableMustBelongToTheClassToRefactor stamp: 'HAW 10/2/2020 16:22:40'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:40'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:41'!
AClassToRefactorSuperclass subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactorSuperclass stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactorSuperclass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:41'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:41'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test09ConcreteClassMustBeDifferentToNullClass stamp: 'HAW 10/2/2020 16:22:41'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClasOutsideTheHierarchy category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClasOutsideTheHierarchy methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:42'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:42'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test10MethodsMustBelongToTheHierarchyToRefactor stamp: 'HAW 10/2/2020 16:22:42'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:43'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClasOutsideTheHierarchy stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClasOutsideTheHierarchy
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:44'!
m1 anInstVar ifNil: [anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test13MessageNodesMustNotBeDuplicated stamp: 'HAW 10/2/2020 16:22:44'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:45'!
m1 self ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test14MessageNodesReceiverMustBeTheInstVar stamp: 'HAW 10/2/2020 16:22:45'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:45'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:46'!
unaryPolymorphicSelector! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:46'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test15ConcreteClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:46'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #NullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!NullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:47'!
unaryPolymorphicSelector! !

!classDefinition: #ConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:47'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #IntroduceNullObjectTest #test16NullClassMustNotContainAnyPolymorphicSelector stamp: 'HAW 10/2/2020 16:22:47'!
PASSED!

!classRemoval: #NullClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #NullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ConcreteClass stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
m1 anInstVar ifNil: [ 1 + 1 ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:48'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
replaceIfNilSelector
	1 + 1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860384!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860414!
m1 anInstVar replaceIfNilSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48' prior: 50860419!
m1 anInstVar replaceIfNilSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:48'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test17WhenThereAreNoVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:48'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860476!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860504!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50' prior: 50860508!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:50'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test18WhenThereAreVariablesToParametrizeReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:50'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:50'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:51'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860565!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860593!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51' prior: 50860597!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:51'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test19WhenIfNilCheckHasOneKeywordReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:51'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:52'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860654!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860684!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52' prior: 50860688!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:52'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test20WhenIfNilCheckHasTwoKeywordsReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:52'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:53'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860745!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860775!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53' prior: 50860779!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:53'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test21WhenIfNilCheckHasIsNilReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:53'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860836!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860866!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55' prior: 50860870!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:55'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test22PolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:22:55'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:55'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:56'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860926!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860956!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56' prior: 50860960!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:56'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test23PolymorphicMessageIsAddedToTheConcreteClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:22:56'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:57'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861017!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861047!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57' prior: 50861051!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:57'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test24PolymorphicMessageIsAddedToTheConcreteClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:22:57'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:58'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:58'!
m1 anInstVar ifNil: [ self isNil ] ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861108!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861138!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59' prior: 50861142!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:22:59'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test25ReplacesIfNilIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:22:59'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:22:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
m1 anInstVar ifNotNil: [ self isNil ] ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861198!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861228!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00' prior: 50861232!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:00'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test26ReplacesIfNotNilIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:00'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:00'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
m1 anInstVar ifNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:01'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861288!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861316!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01' prior: 50861320!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:01'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test27ReplacesIfNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:01'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
m1 anInstVar ifNotNil: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:02'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861376!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861405!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02' prior: 50861409!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:02'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test28ReplacesIfNotNilWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:02'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:03'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
m1 anInstVar isNil ifTrue: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861465!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861493!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04' prior: 50861497!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:04'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test29ReplacesIsNilIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:04'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:04'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
m1 anInstVar isNil ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:05'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861553!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861582!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05' prior: 50861586!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:05'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test30ReplacesIsNilIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:05'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
m1 anInstVar isNil ifTrue: [self isNil] ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:06'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861642!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861672!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06' prior: 50861676!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:06'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test31ReplacesIsNilIfTrueIfFalseWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:06'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:07'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
m1 anInstVar isNil ifFalse: [self isNil] ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861733!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861763!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08' prior: 50861767!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:08'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test32ReplacesIsNilIfFalseIfTrueWithPolymorphicMessageSend stamp: 'HAW 10/2/2020 16:23:08'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:08'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:09'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861824!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861854!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09' prior: 50861858!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:09'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test33PolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:09'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:10'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861914!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861944!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10' prior: 50861948!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:10'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test34PolymorphicMessageIsAddedToTheNullClassWithChosenParameterNames stamp: 'HAW 10/2/2020 16:23:10'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:11'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862005!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862035!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12' prior: 50862039!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:12'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test35PolymorphicMessageIsAddedToTheNullClassReplacingParametrizedVariables stamp: 'HAW 10/2/2020 16:23:12'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:12'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
m1 anInstVar isNil ifFalse: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:13'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
with: p1! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862096!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862125!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13' prior: 50862129!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:13'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test36WhenNoNullBlockIsPresentEmptyPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:13'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
m1 anInstVar isNil ifTrue: [self isNil]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:14'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862186!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862214!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14' prior: 50862218!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:14'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test37WhenNoConcreteBlockIsPresentEmptyPolymorphicMessageIsAddedToTheConcreteClass stamp: 'HAW 10/2/2020 16:23:14'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:15'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
m1 anInstVar ifNil: [1+1. 2+2]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862275!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862305!
m1 anInstVar unaryPolymorphicSelector! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16' prior: 50862310!
m1 anInstVar unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:16'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test38WhenThereAreMultipleStatementsPolymorphicMessageIsAddedToTheNullClass stamp: 'HAW 10/2/2020 16:23:16'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:16'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:17'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862367!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862397!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17' prior: 50862403!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:17'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test39ReplacesNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:17'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := nil.
	anInstVar := nil.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:18'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862461!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := nil.
	anInstVar := nil.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862492!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18' prior: 50862498!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := ANullClass new.
	anInstVar := ANullClass new.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:18'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test40ReplacesMultipleNilAssignmentsWithNullObject stamp: 'HAW 10/2/2020 16:23:18'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:19'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862558!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862589!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19' prior: 50862595!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:19'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test41ReplacesAssignmentWithNullObject stamp: 'HAW 10/2/2020 16:23:19'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:20'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
m1
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:21'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862655!
m1
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862687!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21' prior: 50862695!
m1
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:21'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test42ReplacesMultipleAssignmentsInTheSameMethodWithNullObject stamp: 'HAW 10/2/2020 16:23:21'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m11
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
m12
	anInstVar ifNil: [1+1. 2+2].
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:22'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862760!
m11
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862790!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862794!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862767!
m12
	anInstVar unaryPolymorphicSelector.
	anInstVar := self doSomething.
	anInstVar := self doSomething +  ivar different.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862799!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862816!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862824!
m11
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22' prior: 50862832!
m12
	anInstVar unaryPolymorphicSelector.
	self assignOptionalField: (self doSomething).
	self assignOptionalField: (self doSomething + ivar different).! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:22'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test43ReplacesMultipleAssignmentsInMultipleMethodsWithNullObject stamp: 'HAW 10/2/2020 16:23:22'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:23'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
m1
	anInstVar ifNil: [1+1. 2+2].
	^anInstVar! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862905!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862935!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24' prior: 50862940!
m1
	anInstVar unaryPolymorphicSelector.
	^anInstVar nilIfNullObject! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:24'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test44ReplacesReturnOfIvarWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:24'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:24'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
m1
	anInstVar ifNil: [1+1. 2+2].
	self do: anInstVar.! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:25'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
unaryPolymorphicSelector
	1+1. 2+2! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50862998!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863028!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar.! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25' prior: 50863034!
m1
	anInstVar unaryPolymorphicSelector.
	self do: anInstVar nilIfNullObject.! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:25'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test45ReplacesIvarAsParamWithNilIfNullObject stamp: 'HAW 10/2/2020 16:23:25'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self isNil. anInstVar isNil ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:26'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil. self isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863092!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863122!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26' prior: 50863126!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:26'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test46WhenIvarAppearsInNotNilBlockAsReceiverReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:26'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:27'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
m1 anInstVar isNil ifTrue: [ self isNil ] ifFalse: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 sendIvar: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
with: p1
	p1 isNil! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863183!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863213!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28' prior: 50863217!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:28'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test47WhenIvarAppearsInNotNilBlockAsArgumentReplacesIvarWithSelf stamp: 'HAW 10/2/2020 16:23:28'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:28'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
m1 anInstVar isNil ifFalse: [ self isNil ] ifTrue: [ self sendIvar: anInstVar ]! !

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:29'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 isNil! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
with: p1
	p1 sendIvar: self nilIfNullObject! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863274!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863305!
m1 anInstVar with: self! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
assignOptionalField: maybeNil

	anInstVar := maybeNil ifNil: [ ANullClass new ].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29' prior: 50863309!
m1 anInstVar with: self! !
!ANullClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^nil! !
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:29'!
nilIfNullObject
	^self! !

!testRun: #IntroduceNullObjectTest #test48WhenIvarAppearsInNilBlockAsArgumentReplacesIvarWithSelfNilIfNullObject stamp: 'HAW 10/2/2020 16:23:29'!
PASSED!

!classRemoval: #ANullClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #ANullClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:30'!
m1 self ifNil: [1 + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test01WhenThereAreNoVariablesToExtractFindsNothing stamp: 'HAW 10/2/2020 16:23:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:31'!
m1 self ifNil: [| a | a := 2. a + 1]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test02WhenThereAreOnlyTemporariesFindsNothing stamp: 'HAW 10/2/2020 16:23:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a + self]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test03WhenABlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:32'!
m1 self ifNil: [| a | a := 2. a ifNil: [ self + 2]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test04WhenANestedBlockReferencesNonTemporariesTheyAreFound stamp: 'HAW 10/2/2020 16:23:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:33'!
m1 self ifNil: [| a | a := nil]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test05NilIsNotFound stamp: 'HAW 10/2/2020 16:23:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [false or: [true]]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test06TrueAndFalseAreNotFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:34'!
m1 self ifNil: [| a | a := 2. a + anInstVar]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test07WhenABlockReferencesInstanceVariablesTheyAreFound stamp: 'HAW 10/2/2020 16:23:34'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:35'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:35'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test08WhenABlockReferencesArgumentsTheyAreFound stamp: 'HAW 10/2/2020 16:23:35'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:36'!
m1: anArg self ifNil: [| a | a := 2. a + anArg]! !

!testRun: #MessageSendingBlocksVariablesToExtractFinderTest #test09ExcludingVariablesAreNotIncludedInTheResult stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:36'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test01AbstractClassClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:36'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:37'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test02AbstractClassClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:37'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test03AbstractClassClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:38'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test04AbstractClassClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:38'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:39'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test05AbstractClassClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:39'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test06NullObjectClassNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:40'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test07NullObjectClassNameMustBeASymbol stamp: 'HAW 10/2/2020 16:23:40'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:41'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test08NullObjectClassNameMustStartWithUppercaseLetter stamp: 'HAW 10/2/2020 16:23:41'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test09NullObjectClassNameMustNotHaveSeparators stamp: 'HAW 10/2/2020 16:23:42'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:42'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test10NullObjectClassNameMustNotExist stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:43'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test11CreatesAbstractClass stamp: 'HAW 10/2/2020 16:23:43'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:44'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:44'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test12CreatesAbstractClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:44'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:45'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:45'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:46'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test13CreatesAbstractClassAsSubclassOfConcreteClassPreviousSuperclass stamp: 'HAW 10/2/2020 16:23:46'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:46'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:47'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:47' overrides: 50863949!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test14AbstractClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:47'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:48'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:48' overrides: 50864013!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test15AbstractClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:48'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:49'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:49'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:49' overrides: 50864078!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test16AbstractClassMethodsDelegateResponsibility stamp: 'HAW 10/2/2020 16:23:49'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:50'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:50'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:51'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test17CreatesNullObjectClass stamp: 'HAW 10/2/2020 16:23:51'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:51'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:52'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:52'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test18CreatesNullObjectClassInChosenCategory stamp: 'HAW 10/2/2020 16:23:52'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:53'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:53'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test19CreatesNullObjectClassClassAsSubclassOfAbstractClass stamp: 'HAW 10/2/2020 16:23:53'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:54'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54'!
m1
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:54' overrides: 50864297!
m1! !

!testRun: #NullObjectHierarchyCreatorTest #test20NullObjectClassDefinesAllTheSelectorsOfConcreteClass stamp: 'HAW 10/2/2020 16:23:54'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:55'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:55'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:56' overrides: 50864361!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test21NullObjectClassMethodParametersNamesArePreservedFromConcreteClass stamp: 'HAW 10/2/2020 16:23:56'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:56'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:57'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:57'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:57' overrides: 50864426!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test22NullObjectClassMethodsAreEmpty stamp: 'HAW 10/2/2020 16:23:57'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:58'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:58'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #NullObjectHierarchyCreatorTest #test23ConcreteClassSubclassesTheAbstractClass stamp: 'HAW 10/2/2020 16:23:58'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:23:59'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AConcreteClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AConcreteClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
		^1 + 2! !

!classDefinition: #AnAbstractClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ANullObjectClassName category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:23:59'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AnAbstractClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59'!
m1: anArg
	self subclassResponsibility.! !
!ANullObjectClassName methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:23:59' overrides: 50864542!
m1: anArg! !

!testRun: #NullObjectHierarchyCreatorTest #test24ConcreteClassMethodsArePreserved stamp: 'HAW 10/2/2020 16:23:59'!
PASSED!

!classRemoval: #ANullObjectClassName stamp: 'HAW 10/2/2020 16:24:00'!
AnAbstractClassName subclass: #ANullObjectClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AnAbstractClassName stamp: 'HAW 10/2/2020 16:24:00'!
RefactoringClassTestData subclass: #AnAbstractClassName
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #AConcreteClass stamp: 'HAW 10/2/2020 16:24:00'!
AnObsoleteAnAbstractClassName subclass: #AConcreteClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 self ifNil: [1 + 1].! !
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m2 1 + 1.! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test01MessageNodeMustBelongToTheMethodNode stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:01'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:01'!
m1 anInstVar ifTrue: [1 + 1].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test02MessageNodeMustRepresentASupportedMessageSent stamp: 'HAW 10/2/2020 16:24:01'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:02'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:02'!
m1 anInstVar ifNil: [self isNil]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test03AllVariablesToParametrizeHaveACorrespondingKeyword stamp: 'HAW 10/2/2020 16:24:02'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test04AllKeywordsMustHaveACorrespondingVariableToParametrize stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:03'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:03'!
m1 anInstVar ifNil: [self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test05CreatesReplaceIfNilWithPolymorphismParameters stamp: 'HAW 10/2/2020 16:24:03'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:04'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:04'!
m1 anInstVar ifNil: [self or: [true]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test06ReplaceIfNilWithPolymorphismParametersOnBlocksWithBooleanConstants stamp: 'HAW 10/2/2020 16:24:04'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1 anInstVar ifNil: [ | tempVar | tempVar := 1 + 1. self isNil].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test07ParameterNamesMustNotBeEqualToABlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:05'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:05'!
m1
		anInstVar ifNil: [self ifNil: [ | tempVar | tempVar := 1 + 1]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test08ParameterNamesMustNotBeEqualToANestedBlockTemporal stamp: 'HAW 10/2/2020 16:24:05'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:06'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:06'!
m1
		anInstVar ifNil: [self allInstVarNames collect: [:arg | arg asSymbol]].! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test09ParameterNamesMustNotBeEqualToNestedBlocksArguments stamp: 'HAW 10/2/2020 16:24:06'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test10RangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:07'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:07'!
m1 anInstVar ifNotNil: [1 + 1] ifNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test11RangeOfMessageSendForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:07'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:08'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:08'!
m1 anInstVar ifNotNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test12RangeOfMessageSendForIfNotNil stamp: 'HAW 10/2/2020 16:24:08'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar ifNil: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test13RangeOfMessageSendForIfNil stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:09'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:09'!
m1 anInstVar isNil ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test14RangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:09'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:10'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:10'!
m1 anInstVar isNil ifTrue: [1 + 1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test15RangeOfMessageSendForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:10'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:11'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:11'!
m1 anInstVar       ifNil: [1 + 1]          ifNotNil: [2 + 2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test16WhenThereAreExtraSpacesRangeOfMessageSendForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:11'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar    isNil       ifTrue: [1 + 1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test17WhenThereAreExtraSpacesRangeOfMessageSendForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:12'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:12'!
m1 anInstVar ifNil: [1 + 1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test18ConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:12'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:13'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:13'!
m1 anInstVar ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test19ConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:13'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test20ConcreteBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:14'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:14'!
m1 anInstVar isNil ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test21ConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:14'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:15'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:15'!
m1 anInstVar isNil ifTrue: [1+1] ifFalse: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test22ConcreteBlockSourceCodeForIsNilIfTrueIfFalse stamp: 'HAW 10/2/2020 16:24:15'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test23NullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:16'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:16'!
m1 anInstVar ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test24NullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:16'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:17'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:17'!
m1 anInstVar ifNotNil: [2+2] ifNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test25NullBlockSourceCodeForIfNotNilIfNil stamp: 'HAW 10/2/2020 16:24:17'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test26NullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:18'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:18'!
m1 anInstVar isNil ifFalse: [2+2] ifTrue: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test27NullBlockSourceCodeForIsNilIfFalseIfTrue stamp: 'HAW 10/2/2020 16:24:18'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:19'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:19'!
m1 anInstVar ifNotNil: [1+1]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test28NullBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:19'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNil: [1] ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test29WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:20'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:20'!
m1 anInstVar ifNotNil: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test30WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIfNotNil stamp: 'HAW 10/2/2020 16:24:20'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:21'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:21'!
m1 anInstVar isNil ifFalse: [2+2. 1+1.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test31WhenThereAreMultipleStatementsConcreteBlockSourceCodeForIsNilIfFalse stamp: 'HAW 10/2/2020 16:24:21'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.] ifNotNil: [2+2]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test32WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNilIfNotNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:22'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:22'!
m1 anInstVar ifNil: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test33WhenThereAreMultipleStatementsNullBlockSourceCodeForIfNil stamp: 'HAW 10/2/2020 16:24:22'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClassToRefactor category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:23'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClassToRefactor methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:23'!
m1 anInstVar isNil ifTrue: [1+1. 2+2.]! !

!testRun: #ReplaceIfNilWithPolymorphismParametersTest #test34WhenThereAreMultipleStatementsNullBlockSourceCodeForIsNilIfTrue stamp: 'HAW 10/2/2020 16:24:23'!
PASSED!

!classRemoval: #AClassToRefactor stamp: 'HAW 10/2/2020 16:24:24'!
RefactoringClassTestData subclass: #AClassToRefactor
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test01ParameterNameMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test02ParameterNameMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:24'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test03ParameterNameMustNotContainSeparators stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test04KeywordMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test05KeywordMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:25'!
PASSED!

!testRun: #VariableToParametrizeKeywordDefinitionTest #test06CreatesADefinition stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:26'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:26'!
m1! !

!testRun: #VariablesToExtractFinderTest #test01WhenTheMethodHasNoVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:26'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:27'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:27'!
m1
		| aTempVar |

		aTempVar := 2.

		^aTempVar.! !

!testRun: #VariablesToExtractFinderTest #test02WhenTheMethodHasOnlyTemporaryVariablesItReturnsAnEmptySet stamp: 'HAW 10/2/2020 16:24:27'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1

		self m2.! !

!testRun: #VariablesToExtractFinderTest #test03WhenTheMethodReferencesSelfPseudoVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:28'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:28'!
m1: anArg

		^anArg + 2! !

!testRun: #VariablesToExtractFinderTest #test04WhenTheMethodHasArgumentsTheyAreIncludedAsVariablesToExtract stamp: 'HAW 10/2/2020 16:24:28'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:29'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:29'!
m1

		^anInstVar isNil! !

!testRun: #VariablesToExtractFinderTest #test05WhenTheMethodReferencesAnInstanceVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:29'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1

		^AClassVar isNil! !

!testRun: #VariablesToExtractFinderTest #test06WhenTheMethodReferencesAClassVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: 'AClassVar'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ASharedPool category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:30'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:30'!
m1
		^APoolVariable isNil! !

!testRun: #VariablesToExtractFinderTest #test07WhenTheMethodReferencesAPoolVariableItFindsIt stamp: 'HAW 10/2/2020 16:24:30'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:31'!
Object subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: 'ASharedPool'
	category: '__Refactoring-TestData__'!

!classRemoval: #ASharedPool stamp: 'HAW 10/2/2020 16:24:31'!
SharedPool subclass: #ASharedPool
	instanceVariableNames: ''
	classVariableNames: 'APoolVariable'
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:31'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:31'!
m1

		^true not! !

!testRun: #VariablesToExtractFinderTest #test08DoesNotFindPseudoVariablesButSelf stamp: 'HAW 10/2/2020 16:24:31'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:32'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:32'!
m1
		^anInstVar! !

!testRun: #VariablesToExtractFinderTest #test09WhenReturnsAnInstVarFindsIt stamp: 'HAW 10/2/2020 16:24:32'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: 'anInstVar'
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Object! !

!testRun: #VariablesToExtractFinderTest #test10DoesNotFindClasses stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #AClass category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:33'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!AClass methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:33'!
m1
		^Smalltalk! !

!testRun: #VariablesToExtractFinderTest #test11DoesNotFindGlobals stamp: 'HAW 10/2/2020 16:24:33'!
PASSED!

!classRemoval: #AClass stamp: 'HAW 10/2/2020 16:24:34'!
RefactoringClassTestData subclass: #AClass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test01SelectorMustNotBeEmpty stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test02SelectorMustNotContainInvalidCharacters stamp: 'HAW 10/2/2020 16:24:34'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test03SelectorMustNotStartWithInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test04CreatesVariablesToParametrizeKeywordsDefinitionsWithSelector stamp: 'HAW 10/2/2020 16:24:35'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test05FirstKeywordMustNotStartWithAnInvalidStartOfSelector stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test06ParameterNamesMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:36'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test07VariablesToParametrizeMustNotBeRepeated stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test08CreatesVariablesToParametrizeKeywordsDefinitionsWithDefinitions stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test09WhenNoVariablesToParametrizeBuildsSelector stamp: 'HAW 10/2/2020 16:24:37'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test10WhenVariablesToParametrizeBuildsSelectorFromKeywordsInOrder stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test11WhenVariablesToParametrizeBuildsMessageSending stamp: 'HAW 10/2/2020 16:24:38'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test12WhenNoVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!testRun: #VariablesToParametrizeKeywordsDefinitionsTest #test13WhenVariablesToParametrizeBuildsMessageHeader stamp: 'HAW 10/2/2020 16:24:39'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865803!
m3 | x | self m1: 1. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:40'!
m1!

!testRun: #AddParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:40'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m3 | x | self m1: 1 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m2: p2 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:40' prior: 50865844!
m3 | x | self m1: 1 m2: 2 m3: 3. false ifTrue: [ x m1: 1 m3: 3 ]! !

!methodRemoval: ClassToAddParameter #m1:m3: stamp: 'HAW 10/2/2020 16:24:40'!
m1: p1 m3: p3!

!testRun: #AddParameterWithActualScopeTest #test01_01_DoesNotChangePossibleMessageSendWhenInstructedToDoSoWithKeywordMessages stamp: 'HAW 10/2/2020 16:24:40'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:41'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:41'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #AddParameterWithActualScopeTest #test02CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:41'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:42'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m1: p1 m3: p3! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:42'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1 m3: 3! !

!testRun: #AddParameterWithActualScopeTest #test02_01_CanNotAddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsForKeywordMessage stamp: 'HAW 10/2/2020 16:24:42'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:43'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:43' prior: 50865992!
m3 | x | x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:43'!
m1!

!testRun: #AddParameterWithActualScopeTest #test03AddParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:43'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:44'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:44'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:44' prior: 50866050!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:44'!
m1!

!testRun: #AddParameterWithActualScopeTest #test04AddParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:44'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:45'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:45' prior: 50866114!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:45'!
m1!

!testRun: #AddParameterWithActualScopeTest #test05AddParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:45'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:46'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:46' prior: 50866179!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:46'!
m1!

!testRun: #AddParameterWithActualScopeTest #test06AddParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:46'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:47'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:47' prior: 50866233!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:47'!
m1!

!testRun: #AddParameterWithActualScopeTest #test07AddParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:47'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:48' prior: 50866281!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:24:48'!
m1!

!testRun: #AddParameterWithActualScopeTest #test08AddParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:48'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:48'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m3 self m1. ClassOfSender new m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:49' prior: 50866341!
m3 self m1: 1. ClassOfSender new m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:49'!
m1!

!testRun: #AddParameterWithActualScopeTest #test09AddParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:24:49'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:49'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 |x| self m1. x m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50' prior: 50866387!
m3 |x| self m1: 1. x m1! !

!methodRemoval: ClassToAddParameter #m1 stamp: 'HAW 10/2/2020 16:24:50'!
m1!

!testRun: #AddParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenAddingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:50'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:50'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #AddParameterWithActualScopeTest #test11CanNotAddParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:50'!
PASSED!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:51'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #AddParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:24:51'!
PASSED!

!classDefinition: #ClassToAddParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m3 self m1: 1! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1 m2: p2 ! !
!ClassToAddParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:52' prior: 50866487!
m3 self m1: 1 m2: 2! !

!methodRemoval: ClassToAddParameter #m1: stamp: 'HAW 10/2/2020 16:24:52'!
m1: p1!

!testRun: #AddParameterWithActualScopeTest #test13AddLastParameterCorrectly stamp: 'HAW 10/2/2020 16:24:52'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:52'!
ClassToAddParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToAddParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToAddParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1 ]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53' prior: 50866533!
m3 | x | self m1. false ifTrue: [ x m1: 1 ]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test01DoesNotChangePossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:53'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:53'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !

!testRun: #RemoveParameterWithActualScopeTest #test02CanNotRemoveParameterWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:24:53'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:54'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m3 | x | x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:54' prior: 50866632!
m3 | x | x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:54'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test03RemovesParameterWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:24:54'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:55'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:55'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:55' prior: 50866692!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:55'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test04RemovesParameterWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:24:55'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:56'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m3 | x y | x := self. y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:56' prior: 50866758!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:56'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test05RemovesParameterInDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:24:56'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:57'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1: 1. y m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:57' prior: 50866825!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:57'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test06RemovesParameterInDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:24:57'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:58'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m3 | x | self m1: 1. false ifTrue: [ x m1: 1]! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:58' prior: 50866882!
m3 | x | self m1. false ifTrue: [ x m1]! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:24:58'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test07RemovesParameterToPossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:24:58'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:24:59' prior: 50866932!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!methodRemoval: ClassOfSender #m1: stamp: 'HAW 10/2/2020 16:24:59'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test08RemovesParameterWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:24:59'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:24:59'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m3 self m1: 1. ClassOfSender new m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:00' prior: 50866994!
m3 self m1. ClassOfSender new m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:00'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test09RemovesParameterOnlyToValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:00'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:00'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 |x| self m1: 1. x m1: 1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01' prior: 50867043!
m3 |x| self m1. x m1: 1! !

!methodRemoval: ClassToRemoveParameter #m1: stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1!

!testRun: #RemoveParameterWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRemovingParameterToMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:01'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m1: p1! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:01'!
m3 | x | x := self. x := ClassOfSender new. x m1: 1; printString! !

!testRun: #RemoveParameterWithActualScopeTest #test11CanNotRemoveParameterWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:01'!
PASSED!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:02'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RemoveParameterWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:02'!
PASSED!

!classDefinition: #ClassToRemoveParameter category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m3 self m1: 1 m2: 2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03'!
m2: p2! !
!ClassToRemoveParameter methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:03' prior: 50867146!
m3 self m2: 2! !

!methodRemoval: ClassToRemoveParameter #m1:m2: stamp: 'HAW 10/2/2020 16:25:03'!
m1: p1 m2: p2!

!testRun: #RemoveParameterWithActualScopeTest #test13RemovesOtherThanLastParameterCorrectly stamp: 'HAW 10/2/2020 16:25:03'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:03'!
ClassToRemoveParameter subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRemoveParameter stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRemoveParameter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04' prior: 50867191!
m3 | x | self m2. false ifTrue: [ x m1 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:04'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test01DoesNotRenamesPossibleMessageSendWhenInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:04'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:04'!
m3 | x | x := self. x := ClassOfSender new. x m1! !

!testRun: #RenameSelectorWithActualScopeTest #test02CanNotRenameWithReceiverTypeOfMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:04'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:05'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m3 | x | x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:05' prior: 50867287!
m3 | x | x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:05'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test03RenamesWhenReceiverTypeOfMessageSendIsSubtypeOfImplementorsType stamp: 'HAW 10/2/2020 16:25:05'!
PASSED!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:06'!
ClassToRenameSelector subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:06'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:06' prior: 50867346!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:06'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test04RenamesWhenReceiverTypeOfMessageSendIsEqualToImplementorsTypes stamp: 'HAW 10/2/2020 16:25:06'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:07'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m3 | x y | x := self. y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:07' prior: 50867410!
m3 | x y | x := self. y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:07'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test05RenamesDifferentMessageSendsWithReceiverTypeIsIncludedInImplementorsType stamp: 'HAW 10/2/2020 16:25:07'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:08'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m1. y m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:08' prior: 50867475!
m3 | x y | x := y:= self. x := y := ClassOfSender new. x m2. y m2! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:08'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test06RenamesDifferentMessageSendsWithReceiverTypeEqualToImplementorsType stamp: 'HAW 10/2/2020 16:25:08'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:09'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m3 | x | self m1. false ifTrue: [ x m1 ]! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:09' prior: 50867529!
m3 | x | self m2. false ifTrue: [ x m2 ]! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:09'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test07RenamePossibleMessageSendIfInstructedToDoSo stamp: 'HAW 10/2/2020 16:25:09'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:10'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m3 | x | x := self. x := ClassOfSender new. x m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:10' prior: 50867577!
m3 | x | x := self. x := ClassOfSender new. x m2! !

!methodRemoval: ClassOfSender #m1 stamp: 'HAW 10/2/2020 16:25:10'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test08RenamesWithReceiverTypeOfMessageSendNotIncludedInImplementorsButSelectorNotImplementedInTypeHierarchy stamp: 'HAW 10/2/2020 16:25:10'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:11'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m3 self m1. ClassOfSender new m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:11' prior: 50867637!
m3 self m2. ClassOfSender new m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:11'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test09RenamesOnlyValidMessageSendWhenMoreSendsInSameMethod stamp: 'HAW 10/2/2020 16:25:11'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:12'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m3 |x| self m1. x m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12'!
m2! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:12' prior: 50867683!
m3 |x| self m2. x m1! !

!methodRemoval: ClassToRenameSelector #m1 stamp: 'HAW 10/2/2020 16:25:12'!
m1!

!testRun: #RenameSelectorWithActualScopeTest #test10UsesTheModifiedSourceCodeWhenRenamingAMethodWithSureAndPossibleSenders stamp: 'HAW 10/2/2020 16:25:12'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassToRenameSelector category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classDefinition: #ClassOfSender category: '__Refactoring-TestData__' stamp: 'HAW 10/2/2020 16:25:13'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassOfSender methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m1! !
!ClassToRenameSelector methodsFor: 'as yet unclassified' stamp: 'HAW 10/2/2020 16:25:13'!
m3 | x | x := self. x := ClassOfSender new. x m1; printString! !

!testRun: #RenameSelectorWithActualScopeTest #test11CanNotRenameWithReceiverTypeOfCascadeMessageSendNotIncludedInImplementors stamp: 'HAW 10/2/2020 16:25:13'!
PASSED!

!classRemoval: #ClassToRenameSelector stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassToRenameSelector
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!classRemoval: #ClassOfSender stamp: 'HAW 10/2/2020 16:25:14'!
RefactoringClassTestData subclass: #ClassOfSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: '__Refactoring-TestData__'!

!testRun: #RenameSelectorWithActualScopeTest #test12SuperclassInstanceCreationMessagesShouldNotBeUsed stamp: 'HAW 10/2/2020 16:25:14'!
PASSED!

----QUIT----(2 October 2020 16:25:14) CuisUniversity-4384.image priorSource: 16021447!

----STARTUP---- (25 October 2020 15:29:24) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


TestCase subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 15:35:16'!
TestCase subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'nil' stamp: 'DB 10/25/2020 15:50:57'!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingToward: #N. 
	
	marsRover move: 'f'.
	
	self assert: (marsRover currentPosition = 1@2).
	
	
	
	
	! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:51:15'!
ERROR!

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:51:15'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 15:51:37'!
at: aPoint pointingToward: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint pointingToward: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 15:53:10' prior: 50867792!
at: aInitialPoint pointingToward: aCardinalPoint 
	
	^self new initializeAt: aInitialPoint pointingToward: aCardinalPoint ! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:53:15'!
ERROR!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 15:53:26'!
TestCase subclass: #MarsRover
	instanceVariableNames: 'initialPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 15:53:26'!
TestCase subclass: #MarsRover
	instanceVariableNames: 'initialPoint cardinalPoint'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 15:53:26'!
initializeAt: aInitialPoint pointingToward: aCardinalPoint 
	self shouldBeImplemented.
	initialPoint := aInitialPoint.
	cardinalPoint := aCardinalPoint.! !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 15:54:02'!
TestCase subclass: #MarsRover
	instanceVariableNames: 'initialPoint cardinalPoint currentPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 15:53:58' prior: 50867825!
initializeAt: aInitialPoint pointingToward: aCardinalPoint 
	
	currentPosition := aInitialPoint.
	cardinalPoint := aCardinalPoint.! !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 15:55:24'!
TestCase subclass: #MarsRover
	instanceVariableNames: 'initialPoint cardinalPoint currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 15:55:22' prior: 50867841!
initializeAt: aInitialPoint pointingToward: aCardinalDirection 
	
	currentPosition := aInitialPoint.
	currentCardinalDirection := aCardinalDirection.! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:55:27'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:55:38'!
move: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:56:41' prior: 50867867!
move: aString 
	currentPosition := 1@2! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:56:43'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:56:54'!
currentPosition
	self shouldBeImplemented.
	^currentPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:57:00' prior: 50867878!
currentPosition

	^currentPosition! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:57:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:57:42' prior: 50867779!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingToward: #N. 
	
	marsRover move: 'f'.
	
	self assert: (marsRover currentPosition) = 1@2.
	
	
	
	
	! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:57:43'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:58:00' prior: 50867890!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingToward: #N. 
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = 1@2).
	
	
	
	
	! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:58:01'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 15:58:19' prior: 50867901!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingToward: #N. 
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2)).
	
	
	
	
	! !

!testRun: #MarsRover #test01 stamp: 'DB 10/25/2020 15:58:20'!
PASSED!

!classRemoval: #MarsRover stamp: 'DB 10/25/2020 16:00:03'!
TestCase subclass: #MarsRover
	instanceVariableNames: 'initialPoint cardinalPoint currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRoverTest category: 'Mars Rover' stamp: 'DB 10/25/2020 16:00:33'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:02:43'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRoverTest methodsFor: 'nil' stamp: 'DB 10/25/2020 16:02:20'!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:02:58'!
ERROR!

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:02:58'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 16:03:06'!
at: aPoint pointingTowards: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint pointingTowards: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 16:03:40' prior: 50867961!
at: aInitialPosition pointingTowards: aCardinalDirection 
	^self new initializeAt: aInitialPosition pointingTowards: aCardinalDirection ! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:03:42'!
ERROR!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:03:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:03:51'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 16:03:51'!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 
	self shouldBeImplemented.
	initialPosition := aInitialPosition.
	cardinalDirection := aCardinalDirection.! !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:04:05'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition cardinalDirection currentPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 16:04:02' prior: 50867995!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 

	currentPosition := aInitialPosition.
	cardinalDirection := aCardinalDirection.! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:04:07'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:04:17'!
move: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:04:34' prior: 50868022!
move: aString 
	currentPosition := 1@2! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:04:36'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:04:44'!
currentPosition
	self shouldBeImplemented.
	^currentPosition! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:04:48' prior: 50868034!
currentPosition
	
	^currentPosition! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:04:51'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:04:56'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:05:09'!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:05:12'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:05:22' prior: 50868048!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:05:25'!
FAILURE!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:05:25'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:09:56' prior: 50868027!
move: comands 

	comands = 'f' ifTrue: [currentPosition := 1@2].

	comands = 'b' ifTrue: [currentPosition := 1@0]
! !

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:10:00'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:10:06'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:10:06'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:11:46' prior: 50868059!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:11:59' prior: 50868086!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:12:06'!
test03
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:05:22' prior: 50868094!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:12:52' prior: 50868110!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:05:22' prior: 50868118!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:13:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:13:21'!
ERROR!

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:13:21'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:13:28'!
currentDirection
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:14:26' prior: 50868143!
currentDirection
	^cardinalDirection ! !

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:14:28'!
FAILURE!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:15:44'!
Object subclass: #MarsRover
	instanceVariableNames: 'initialPosition cardinalDirection currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:15:37' prior: 50868072!
move: comands 

	comands = 'f' ifTrue: [currentPosition := 1@2].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W]
! !

Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 16:16:19'!
Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:16:35' prior: 50868148!
currentDirection
	^currentCardinalDirection ! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:16:46'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:16:46'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:16:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:17:01' prior: 50868102!
test03
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #E)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:17:06'!
test04
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #E)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:12:06' prior: 50868198!
test03
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:17:21'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:17:21'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:17:21'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DB 10/25/2020 16:17:21'!
FAILURE!

!testRun: #MarsRoverTest #test04 stamp: 'DB 10/25/2020 16:17:21'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:17:53' prior: 50868164!
move: comands 

	comands = 'f' ifTrue: [currentPosition := 1@2].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test04 stamp: 'DB 10/25/2020 16:17:55'!
PASSED!

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:17:59'!
PASSED!

!testRun: #MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:17:59'!
PASSED!

!testRun: #MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:17:59'!
PASSED!

!testRun: #MarsRoverTest #test04 stamp: 'DB 10/25/2020 16:17:59'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:22:52'!
test01ForwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!methodRemoval: MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:22:52'!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:23:24'!
test02BackwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!methodRemoval: MarsRoverTest #test02 stamp: 'DB 10/25/2020 16:23:24'!
test02
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:24:13'!
test03TuringLeftWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !

!methodRemoval: MarsRoverTest #test03 stamp: 'DB 10/25/2020 16:24:13'!
test03
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:24:36'!
test04TurningRightWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #E)! !

!methodRemoval: MarsRoverTest #test04 stamp: 'DB 10/25/2020 16:24:36'!
test04
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #E)!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:42'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:42'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:24:42'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:24:42'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:47'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:47'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:24:47'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:24:47'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:58'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:24:58'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:24:58'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:24:58'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:25:04'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:25:20'!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:25:23'!
PASSED!

----SNAPSHOT----(25 October 2020 16:25:31) CuisUniversity-4384.image priorSource: 17155564!

----QUIT----(25 October 2020 16:25:34) CuisUniversity-4384.image priorSource: 17175048!

----STARTUP---- (25 October 2020 16:25:56) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


!testRun: #MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:26:13'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:26:13'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:26:13'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:26:13'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:26:13'!
PASSED!

!methodRemoval: MarsRoverTest #test01 stamp: 'DB 10/25/2020 16:26:21'!
test01
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:27:50'!
test05ForwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (2@1))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:27:55'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:27:55'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:27:55'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:27:55'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:27:55'!
FAILURE!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:27:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:29:29' prior: 50868234!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #E ifTrue: [currentPosition := 2@1].
	].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:29:31'!
FAILURE!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 16:30:30' prior: 50868012!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 

	currentPosition := aInitialPosition.
	currentCardinalDirection := aCardinalDirection.! !

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:30:32'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:30:35'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:30:35'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:30:35'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:30:35'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:30:35'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:31:28'!
test06ForwardWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #S.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:31:31'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:31:31'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:31:31'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:31:31'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:31:31'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:31:31'!
FAILURE!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:31:31'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:32:11' prior: 50868431!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #E ifTrue: [currentPosition := 2@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@0].
	].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:32:12'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:32:17'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:32:17'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:32:17'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:32:17'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:32:17'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:32:17'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:32:43'!
test07ForwardWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #W.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (0@1))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:32:46'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:32:46'!
FAILURE!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:32:46'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:33:09' prior: 50868506!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #E ifTrue: [currentPosition := 2@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #W ifTrue: [currentPosition := 0@1].
	].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:33:12'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:35:28' prior: 50868578!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + 0@1].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + 1@0].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - 0@1 ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - 1@0].
	].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:35:33'!
ERROR!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:35:33'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:35:33'!
ERROR!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:35:33'!
ERROR!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:35:33'!
ERROR!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:35:42'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:36:29' prior: 50868600!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [currentPosition := 1@0].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:36:31'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:36:34'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:36:34'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:37:31'!
test02BackwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (0@1))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:37:34'!
FAILURE!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:37:34'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:37:34'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:38:49' prior: 50868646!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1]
	].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test02BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:38:50'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:39:15'!
test08BackwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (0@1))! !

!methodRemoval: MarsRoverTest #test02BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:39:15'!
test02BackwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (0@1))!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:39:37'!
test09BackwardWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #S.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:39:49'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:39:49'!
FAILURE!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:39:49'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:40:18' prior: 50868729!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #E ifTrue: [currentPosition := 1@2].
	].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:40:20'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:40:42' prior: 50868813!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
	].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:40:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:41:01'!
test10BackwardWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #W.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:41:10' prior: 50868873!
test10BackwardWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #W.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (2@1))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:41:13'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:41:13'!
FAILURE!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:41:13'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:41:38' prior: 50868843!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [currentCardinalDirection := #W].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:41:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:42:28'!
test11TuringLeftWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #N)! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:42:31'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:42:31'!
FAILURE!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:42:31'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:43:41' prior: 50868925!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #W].
		currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N]
	].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:43:43'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:44:11'!
test12TuringLeftWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #S.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #E)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:45:46' prior: 50869039!
test12TuringLeftWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #S.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #E).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:45:52'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:45:52'!
FAILURE!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:45:52'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:46:18' prior: 50869004!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #W].
		currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N].
		currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E]
	].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:46:28' prior: 50869098!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #W].
		currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N].
		currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E].
	].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:46:29'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:47:05'!
test13TuringLeftWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #W.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #S).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:47:10'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:47:10'!
FAILURE!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:47:10'!
FAILURE!

----SNAPSHOT----(25 October 2020 16:47:16) CuisUniversity-4384.image priorSource: 17175141!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:47:43' prior: 50869133!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #W].
		currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N].
		currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E].
		currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
	].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:47:46'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:48:09'!
test04TurningRightWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #S)! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:48:13'!
FAILURE!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:48:13'!
FAILURE!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:48:13'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:48:13'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:49:12'!
test14TurningRightWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #S)! !

!methodRemoval: MarsRoverTest #test04TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:49:12'!
test04TurningRightWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #E.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #S)!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:49:18'!
FAILURE!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:49:18'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:49:18'!
FAILURE!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:49:24'!
FAILURE!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:50:08'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:50:15'!
FAILURE!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:50:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:53:48' prior: 50869227!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [currentCardinalDirection := #E]
	
	
! !

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:53:50'!
FAILURE!

marsRover!

marsRover!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:55:27'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:55:27'!
FAILURE!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:55:27'!
FAILURE!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:55:43'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:55:49'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:55:49'!
FAILURE!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:55:49'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:57:51' prior: 50869395!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] 
			] 
		]
	
	
! !

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:57:53'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:58:24' prior: 50869535!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] 
			] 
		]
	
	
! !

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:58:25'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:58:51'!
test15TurningRightWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #S.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #W)! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 16:58:54'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 16:58:54'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 16:58:54'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 16:58:54'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 16:58:55'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 16:58:55'!
FAILURE!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 16:58:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 16:59:58' prior: 50869581!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W]
				]
			] 
		]
	
	
! !

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:00:01'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:00:25'!
test16TurningRightWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #W.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #N)! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:00:28'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:00:28'!
FAILURE!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:00:28'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:01:31' prior: 50869687!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := 1@0].
		currentCardinalDirection = #E ifTrue: [currentPosition := 0@1].
		currentCardinalDirection = #S ifTrue: [currentPosition := 1@2].
		currentCardinalDirection = #W ifTrue: [currentPosition := 2@1].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		]
	
	
! !

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:01:32'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:03:55' prior: 50869799!
move: comands 

	comands = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	comands = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	comands  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	comands  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		]
	
	
! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:03:58'!
PASSED!

----SNAPSHOT----(25 October 2020 17:04:19) CuisUniversity-4384.image priorSource: 17202323!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:12:12'!
test18MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) = #N).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:12:32'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
FAILURE!

!testRun: #MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:12:32'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:15:21' prior: 50869851!
move: command 

	command = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	command = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	command  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	command  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	

	command = 'fff' ifTrue:  [
		currentPosition := 1@4.
	]
	
! !

!testRun: #MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:15:24'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:15:45'!
test17MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) = #N).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:17:27'!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:17:31'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:17:32'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:17:32'!
FAILURE!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:17:32'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:20:22' prior: 50870023!
move: command 

	command do: [:aCommand | 

	aCommand = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	aCommand = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	aCommand  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:20:39' prior: 50870166!
move: commands 

	commands do: [:aCommand | 

	aCommand = 'f' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	aCommand = 'b' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	aCommand  = 'l' ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = 'r' ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:20:49'!
FAILURE!

marsRover!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:23:12' prior: 50870219!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	aCommand = $b ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:14'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:18'!
PASSED!

!methodRemoval: MarsRoverTest #test18MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:31'!
test18MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) = #N).!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:37'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:42'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:23:58'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:27:03'!
test19
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'frffr=?xxyffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:29:04'!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'frffr=?xxyffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).! !

!methodRemoval: MarsRoverTest #test19 stamp: 'DB 10/25/2020 17:29:08'!
test19
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: #N.
	
	marsRover move: 'frffr=?xxyffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:29:14'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:29:14'!
FAILURE!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:29:14'!
FAILURE!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:31:08'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:31:08'!
FAILURE!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:31:08'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:32:49' prior: 50870276!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	].

	aCommand = $b ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:33:40'!
moveForward: aCommand
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:34:01' prior: 50870627!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward: aCommand
	].

	aCommand = $b ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:34:26'!
moveBackward: aCommand 
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:34:41' prior: 50870694!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward: aCommand
	].

	aCommand = $b ifTrue: [
		self moveBackward: aCommand
	].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:36:00'!
turnRight 
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:36:25'!
moveForward
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:36:25' prior: 50870751!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward].

	aCommand = $b ifTrue: [
		self moveBackward: aCommand
	].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !

!methodRemoval: MarsRover #moveForward: stamp: 'DB 10/25/2020 17:36:25'!
moveForward: aCommand
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)].
	!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:36:53'!
moveBackward 
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:36:53' prior: 50870812!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward].

	aCommand = $b ifTrue: [
		self moveBackward].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		currentCardinalDirection = #N ifTrue: [currentCardinalDirection := #E] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #S] ifFalse: [
					currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #W] ifFalse: [
						currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #N]
					]
				]
			] 
		].
	]
	
! !

!methodRemoval: MarsRover #moveBackward: stamp: 'DB 10/25/2020 17:36:53'!
moveBackward: aCommand 
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	
	
!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:37:19' prior: 50870873!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward].

	aCommand = $b ifTrue: [
		self moveBackward].
	
	aCommand  = $l ifTrue: [
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]
	].
	
	aCommand  = $r ifTrue: [
		self turnRight.
	]
]
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:37:44'!
turnLeft  
		currentCardinalDirection = #N ifTrue:  [currentCardinalDirection := #W] ifFalse: [
			currentCardinalDirection = #E ifTrue: [currentCardinalDirection := #N] ifFalse: [
				currentCardinalDirection = #S ifTrue: [currentCardinalDirection := #E] ifFalse: [
					currentCardinalDirection = #W ifTrue: [currentCardinalDirection := #S].
				]
			]
		]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:38:00' prior: 50870919!
move: commands 

	commands do: [:aCommand | 

	aCommand = $f ifTrue: [
		self moveForward].

	aCommand = $b ifTrue: [
		self moveBackward].
	
	aCommand  = $l ifTrue: [
		self turnLeft.
	].
	
	aCommand  = $r ifTrue: [
		self turnRight.
	]
]
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:38:49' prior: 50870955!
move: commands 

	commands do: [:aCommand | 
				aCommand = $f ifTrue: [self moveForward].	
				aCommand = $b ifTrue: [self moveBackward].
				aCommand = $l ifTrue: [self turnLeft].
				aCommand = $r ifTrue: [self turnRight]
	]
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:38:52' prior: 50870966!
move: commands 

	commands do: [:aCommand | 
				aCommand = $f ifTrue: [self moveForward].	
				aCommand = $b ifTrue: [self moveBackward].
				aCommand = $l ifTrue: [self turnLeft].
				aCommand = $r ifTrue: [self turnRight].
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:38:56'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:38:56'!
FAILURE!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:38:56'!
FAILURE!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:40:15'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:57:46'!
isValid: aCommand 

	^ (aCommand = $f) or: (aCommand = $b) or: (aCommand = $l) or: (aCommand = $r).
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:59:01' prior: 50870977!
move: commands 

	commands do: [:aCommand | 
		
		(self isValid: aCommand) ifFalse: [^'2'].
		
		aCommand = $f ifTrue: [self moveForward].	
		aCommand = $b ifTrue: [self moveBackward].
		aCommand = $l ifTrue: [self turnLeft].
		aCommand = $r ifTrue: [self turnRight].
	]
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:59:11' prior: 50871063!
move: commands 

	commands do: [:aCommand | 
		
		(self isValid: aCommand) ifFalse: [^'Error'].
		
		aCommand = $f ifTrue: [self moveForward].	
		aCommand = $b ifTrue: [self moveBackward].
		aCommand = $l ifTrue: [self turnLeft].
		aCommand = $r ifTrue: [self turnRight].
	]
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 17:59:23' prior: 50871075!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [^'Error'].
		
		aCommand = $f ifTrue: [self moveForward].	
		aCommand = $b ifTrue: [self moveBackward].
		aCommand = $l ifTrue: [self turnLeft].
		aCommand = $r ifTrue: [self turnRight].
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 17:59:27'!
PASSED!

----SNAPSHOT----(25 October 2020 18:01:42) CuisUniversity-4384.image priorSource: 17225644!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:03:34'!
moveBackwardWhenDirectionIsNorth
		currentPosition := currentPosition - (0@1)
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:04:11'!
moveForwardWhenDirectionIsEast
	
	currentPosition := currentPosition + (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:04:47'!
moveBackwardWhenDirectionIsEast
		currentPosition := currentPosition - (1@0)
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:05:13'!
moveBackwardWhenDirectionIsSouth
		currentPosition := currentPosition + (0@1)
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:05:36'!
moveBackwardWhenDirectionIsWest
		currentPosition := currentPosition+ (1@0)
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:05:56' prior: 50870858!
moveBackward 
		currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)].
	
	
! !

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #Command category: 'Mars Rover' stamp: 'DB 10/25/2020 18:06:19'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #NorthCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #NorthCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 18:06:25'!
Command subclass: #NorthCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #WestCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #WestCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 18:06:30'!
Command subclass: #WestCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #EastCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #EastCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 18:06:38'!
Command subclass: #EastCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #SouthCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #SouthCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 18:06:43'!
Command subclass: #SouthCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!Command methodsFor: 'nil' stamp: 'DB 10/25/2020 18:07:31'!
move: aMarsRover
	self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:08:03'!
moveForward: aMarsRover
	self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:08:10'!
moveBackward: aMarsRover
	self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:08:17'!
turnLeft: aMarsRover
	self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:08:23'!
turnRight: aMarsRover
	self subclassResponsibility ! !

!methodRemoval: Command #move: stamp: 'DB 10/25/2020 18:08:30'!
move: aMarsRover
	self subclassResponsibility !

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 18:12:34'!
Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentCardinalDirection command'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:12:29' prior: 50871087!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [^'Error'].
		
		aCommand = $f ifTrue: [command moveForward: self].	
		aCommand = $b ifTrue: [command moveBackward: self].
		aCommand = $l ifTrue: [command turnLeft: self].
		aCommand = $r ifTrue: [command turnRight: self].
	]
	! !

!classRenamed: #Command as: #CardinalDirection stamp: 'DB 10/25/2020 18:13:29'!
Smalltalk renameClassNamed: #Command as: #CardinalDirection!
!Utilities class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:13:29' prior: 16940908!
garbageCollectAndReport
	"Do a garbage collection, and report results to the user."
	| cc reportString |
	reportString _ String streamContents: [ :aStream |
		aStream nextPutAll: Smalltalk bytesLeftString.
		Smalltalk
			at: #CardinalDirection
			ifPresent: [ :cmdClass |
				(cc _ cmdClass instanceCount) > 0 ifTrue: [
					aStream
						 newLine;
						 nextPutAll: '(note: there are ' , cc printString , ' undo record(s) present in your
system; purging them may free up more space.)' ]]].
	self inform: reportString! !

!classRenamed: #EastCommand as: #EastDirection stamp: 'DB 10/25/2020 18:13:59'!
Smalltalk renameClassNamed: #EastCommand as: #EastDirection!

!classRenamed: #NorthCommand as: #NorthDirection stamp: 'DB 10/25/2020 18:14:12'!
Smalltalk renameClassNamed: #NorthCommand as: #NorthDirection!

!classRenamed: #SouthCommand as: #SouthDirection stamp: 'DB 10/25/2020 18:14:25'!
Smalltalk renameClassNamed: #SouthCommand as: #SouthDirection!

!classRenamed: #WestCommand as: #WestDirection stamp: 'DB 10/25/2020 18:14:36'!
Smalltalk renameClassNamed: #WestCommand as: #WestDirection!

----SNAPSHOT----(25 October 2020 18:15:36) CuisUniversity-4384.image priorSource: 17264275!
!CardinalDirection class methodsFor: 'nil' stamp: 'DB 10/25/2020 18:17:20'!
for: aMarsRover

	^self new initializeWith: aMarsRover ! !

Object subclass: #CardinalDirection
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #CardinalDirection category: 'Mars Rover' stamp: 'DB 10/25/2020 18:17:33'!
Object subclass: #CardinalDirection
	instanceVariableNames: 'marsRover'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:18:12'!
initializeWith: aMarsRover
	
	marsRover := aMarsRover ! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:18:34'!
moveBackward
	self subclassResponsibility ! !

!methodRemoval: CardinalDirection #moveBackward: stamp: 'DB 10/25/2020 18:18:42'!
moveBackward: aMarsRover
	self subclassResponsibility !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:19:14'!
moveForward
	self subclassResponsibility ! !

!methodRemoval: CardinalDirection #moveForward: stamp: 'DB 10/25/2020 18:19:14'!
moveForward: aMarsRover
	self subclassResponsibility !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:19:36'!
turnLeft
	self subclassResponsibility ! !

!methodRemoval: CardinalDirection #turnLeft: stamp: 'DB 10/25/2020 18:19:36'!
turnLeft: aMarsRover
	self subclassResponsibility !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:19:54'!
turnRight
	self subclassResponsibility ! !

!methodRemoval: CardinalDirection #turnRight: stamp: 'DB 10/25/2020 18:19:54'!
turnRight: aMarsRover
	self subclassResponsibility !
!EastDirection methodsFor: 'nil' stamp: 'DB 10/25/2020 18:20:41' overrides: 50871375!
moveBackward

	marsRover moveBackwardWhenDirectionIsEast ! !
!EastDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:21:01' overrides: 50871384!
moveForward

	marsRover moveForwardWhenDirectionIsEast ! !
!EastDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:21:36' overrides: 50871402!
turnRight

	marsRover turnRithtWhenDirectionIsEast ! !
!EastDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:21:55' overrides: 50871393!
turnLeft

	marsRover turnLeftWhenDirectionIsEast ! !
!NorthDirection methodsFor: 'nil' stamp: 'DB 10/25/2020 18:22:41' overrides: 50871375!
moveBackward 
	
	marsRover moveBackwardWhenDirectionIsNorth ! !
!NorthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:22:58' overrides: 50871384!
moveForward 
	
	marsRover moveForwardWhenDirectionIsNorth ! !
!NorthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:23:21' overrides: 50871402!
turnRight 
	
	marsRover turnRightWhenDirectionIsNorth ! !
!NorthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:23:32' overrides: 50871393!
turnLeft
	
	marsRover turnRightWhenDirectionIsNorth ! !
!NorthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:23:43' prior: 50871451 overrides: 50871393!
turnLeft
	
	marsRover turnLeftWhenDirectionIsNorth ! !
!SouthDirection methodsFor: 'nil' stamp: 'DB 10/25/2020 18:24:16' overrides: 50871384!
moveForward
	
	marsRover moveForwardWhenDirectionIsSouth! !
!SouthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:24:34' overrides: 50871375!
moveBackward
	
	marsRover moveBackwardWhenDirectionIsSouth! !
!SouthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:24:49' overrides: 50871402!
turnRight
	
	marsRover turnRightWhenDirectionIsSouth! !
!SouthDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:25:02' overrides: 50871393!
turnLeft
	
	marsRover turnLeftWhenDirectionIsSouth! !
!WestDirection methodsFor: 'nil' stamp: 'DB 10/25/2020 18:25:34' overrides: 50871384!
moveForward

	marsRover moveForwardWhenDirectionIsWest! !
!WestDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:25:47' overrides: 50871375!
moveBackward

	marsRover moveBackwardWhenDirectionIsWest! !
!WestDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:26:12' overrides: 50871393!
turnLeft

	marsRover turnLeftWhenDirectionIsWest! !
!WestDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:26:27' overrides: 50871402!
turnRight

	marsRover turnRightWhenDirectionIsWest! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:27:04' prior: 50871191!
moveBackward 

	currentCardinalDirection moveBackward 
		"currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition - (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition - (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #W ifTrue: [currentPosition := currentPosition+ (1@0)]."
	
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:27:36'!
moveForwardWhenDirectionIsNorth
		currentPosition := currentPosition + (0@1)
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:28:00'!
moveForwardWhenDirectionIsSouth
		currentPosition :=  currentPosition - (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:28:32'!
moveForwardWhenDirectionIsWest
		currentPosition :=  currentPosition - (1@0)
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:28:52' prior: 50870797!
moveForward

	currentCardinalDirection moveForward 
		"currentCardinalDirection = #N ifTrue: [currentPosition := currentPosition + (0@1)].
		currentCardinalDirection = #E ifTrue: [currentPosition := currentPosition + (1@0)].
		currentCardinalDirection = #S ifTrue: [currentPosition :=  currentPosition - (0@1) ].
		currentCardinalDirection = #W ifTrue: [currentPosition :=  currentPosition - (1@0)]."
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:29:58'!
turnLeftWhenDirectionIsNorth

	currentCardinalDirection := WestDirection for: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:30:36'!
turnLeftWhenDirectionIsEast

	currentCardinalDirection := NorthDirection for: self
				! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:31:23'!
turnLeftWhenDirectionIsSouth

	currentCardinalDirection := EastDirection for: self! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:31:55'!
turnLeftWhenDirectionIsWest
	
	currentCardinalDirection := SouthDirection for: self
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:32:32'!
turnRightWhenDirectionIsNoth

	currentCardinalDirection := EastDirection for: self
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:33:08'!
turnRightWhenDirectionIsEast
		
	currentCardinalDirection := EastDirection for: self
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:33:37'!
turnRightWhenDirectionIsSouth
		
	currentCardinalDirection := WestDirection for: self
! !

----SNAPSHOT----(25 October 2020 18:33:41) CuisUniversity-4384.image priorSource: 17270377!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:34:09'!
turnRightWhenDirectionIsNorth

	currentCardinalDirection := EastDirection for: self
! !

!methodRemoval: MarsRover #turnRightWhenDirectionIsNoth stamp: 'DB 10/25/2020 18:34:09'!
turnRightWhenDirectionIsNoth

	currentCardinalDirection := EastDirection for: self
!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:35:58'!
turnRightWhenDirectionIsWest

	currentCardinalDirection := NorthDirection for: self
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:37:22' prior: 50871295!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [^'Error'].
		
		aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
		aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
		aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
		aCommand = $r ifTrue: [currentCardinalDirection turnRight].
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 18:37:32'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 18:37:32'!
ERROR!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:41:37' prior: 50868256!
test01ForwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover at: 1@1 pointingTowards: NorthDirection new.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:41:58' prior: 50868448!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 

	currentPosition := aInitialPosition.
	currentCardinalDirection := aCardinalDirection for: self.! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:42:09'!
ERROR!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:42:09'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:42:53' prior: 50871699!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 

	currentPosition := aInitialPosition.
	currentCardinalDirection := NorthDirection for: self.! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:42:54'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:42:59'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #MarsRover category: 'Mars Rover' stamp: 'DB 10/25/2020 18:44:32'!
Object subclass: #MarsRover
	instanceVariableNames: 'currentPosition currentCardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:48:05'!
initializeNortAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := NorthDirection for: self.! !
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:48:23'!
initializeNorhAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := NorthDirection for: self.! !

!methodRemoval: MarsRover #initializeNortAt: stamp: 'DB 10/25/2020 18:48:23'!
initializeNortAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := NorthDirection for: self.!
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:48:39'!
initializeSouthAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := SouthDirection for: self.! !
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:48:50'!
initializeWestAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := WestDirection for: self.! !
!MarsRover methodsFor: 'initialization' stamp: 'DB 10/25/2020 18:49:04'!
initializeEastAt: aInitialPosition

	currentPosition := aInitialPosition.
	currentCardinalDirection := EastDirection for: self.! !

!methodRemoval: MarsRover #initializeAt:pointingTowards: stamp: 'DB 10/25/2020 18:49:10'!
initializeAt: aInitialPosition pointingTowards: aCardinalDirection 

	currentPosition := aInitialPosition.
	currentCardinalDirection := NorthDirection for: self.!
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 18:49:48'!
atNorth: aInitialPosition 
	^self new initializeNorhAt: aInitialPosition ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 18:49:59'!
atSouth: aInitialPosition 
	^self new initializeSouthAt: aInitialPosition ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 18:50:08'!
atEast: aInitialPosition 
	^self new initializeEastAt: aInitialPosition ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 18:50:18'!
atWest: aInitialPosition 
	^self new initializeWestAt: aInitialPosition ! !

!methodRemoval: MarsRover class #at:pointingTowards: stamp: 'DB 10/25/2020 18:50:24'!
at: aInitialPosition pointingTowards: aCardinalDirection 
	^self new initializeAt: aInitialPosition pointingTowards: aCardinalDirection !

----SNAPSHOT----(25 October 2020 18:50:33) CuisUniversity-4384.image priorSource: 17278201!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:50:57' prior: 50871690!
test01ForwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:51:02' prior: 50871821!
test01ForwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:51:06'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:51:19' prior: 50868272!
test02BackwardWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 18:51:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:51:34' prior: 50868288!
test03TuringLeftWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:51:46' prior: 50868304!
test04TurningRightWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #E)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:51:58' prior: 50868403!
test05ForwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (2@1))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:52:17' prior: 50868475!
test06ForwardWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (1@0))! !

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 18:52:21'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:52:31' prior: 50868544!
test07ForwardWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'f'.
	
	self assert: ((marsRover currentPosition) = (0@1))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:52:47' prior: 50868756!
test08BackwardWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (0@1))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:00' prior: 50868773!
test09BackwardWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@2))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:08' prior: 50868882!
test10BackwardWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (2@1))! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:16' prior: 50868957!
test11TuringLeftWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #N)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:25' prior: 50869048!
test12TuringLeftWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #E).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:38' prior: 50869171!
test13TuringLeftWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) = #S).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:44' prior: 50869320!
test14TurningRightWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #S)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:53:57' prior: 50869627!
test15TurningRightWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #W)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:54:09' prior: 50869736!
test16TurningRightWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) = #N)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:54:20' prior: 50870079!
test17MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) = #N).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:54:44' prior: 50870090!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:54:55' prior: 50870477!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr=?xxyffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) = #S).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 18:54:59'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 18:54:59'!
ERROR!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
FAILURE!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 18:54:59'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 18:54:59'!
ERROR!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 18:55:13'!
FAILURE!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 18:55:13'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:56:59' prior: 50871854!
test03TuringLeftWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: WestDirection )! !

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 18:57:02'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:57:19' prior: 50871863!
test04TurningRightWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) isKindOf: EastDirection)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:57:51' prior: 50871929!
test11TuringLeftWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: NorthDirection)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:58:02' prior: 50871938!
test12TuringLeftWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: EastDirection).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:58:18' prior: 50871947!
test13TuringLeftWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:58:29' prior: 50871956!
test14TurningRightWhenPointingEast
	
	| marsRover |
	marsRover := MarsRover atEast: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:58:39' prior: 50871965!
test15TurningRightWhenPointingSouth
	
	| marsRover |
	marsRover := MarsRover atSouth: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) isKindOf: WestDirection )! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:58:53' prior: 50871974!
test16TurningRightWhenPointingWest
	
	| marsRover |
	marsRover := MarsRover atWest: 1@1.
	
	marsRover move: 'r'.
	
	self assert: ((marsRover currentDirection) isKindOf: NorthDirection)! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:59:08' prior: 50871983!
test17MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) isKindOf: NorthDirection).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 18:59:27' prior: 50871994!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:00:19' prior: 50872005!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr=?xxyffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:00:40'!
ERROR!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:00:40'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:00:40'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:00:49'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:02:05'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:02:12'!
ERROR!
!EastDirection methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:02:31' prior: 50871423 overrides: 50871402!
turnRight

	marsRover turnRightWhenDirectionIsEast ! !

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:02:32'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:03:51' prior: 50871583!
turnRightWhenDirectionIsEast
		
	currentCardinalDirection := SouthDirection for: self
	
! !

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:03:52'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:04:00'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:04:02'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:04:07'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:04:07'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:04:55' prior: 50870783!
turnRight 

	currentCardinalDirection turnRight
	
! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:04:59'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:04:59'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:05:20' prior: 50871505!
moveBackward 

	currentCardinalDirection moveBackward.
	
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:05:30' prior: 50871537!
moveForward

	currentCardinalDirection moveForward.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:05:49' prior: 50871521!
moveForwardWhenDirectionIsNorth

	currentPosition := currentPosition + (0@1)
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:05:58' prior: 50871526!
moveForwardWhenDirectionIsSouth
	
	currentPosition :=  currentPosition - (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:06:03' prior: 50871531!
moveForwardWhenDirectionIsWest

	currentPosition :=  currentPosition - (1@0)
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:06:14' prior: 50872434!
moveForwardWhenDirectionIsSouth
	
	currentPosition := currentPosition - (0@1)! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:06:17' prior: 50872440!
moveForwardWhenDirectionIsWest

	currentPosition := currentPosition - (1@0)
	! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:06:31' prior: 50870940!
turnLeft  

	currentCardinalDirection turnLeft.! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:06:35'!
PASSED!

!methodRemoval: MarsRover #moveBackward stamp: 'DB 10/25/2020 19:09:34'!
moveBackward 

	currentCardinalDirection moveBackward.
	
!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:09:41'!
PASSED!

!methodRemoval: MarsRover #moveForward stamp: 'DB 10/25/2020 19:09:48'!
moveForward

	currentCardinalDirection moveForward.!

!methodRemoval: MarsRover #turnLeft stamp: 'DB 10/25/2020 19:09:52'!
turnLeft  

	currentCardinalDirection turnLeft.!

!methodRemoval: MarsRover #turnRight stamp: 'DB 10/25/2020 19:09:56'!
turnRight 

	currentCardinalDirection turnRight
	
!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:15:08'!
PASSED!

----SNAPSHOT----(25 October 2020 19:15:11) CuisUniversity-4384.image priorSource: 17285324!
!MarsRover methodsFor: 'accessing' stamp: 'DB 10/25/2020 19:16:09' prior: 50868186!
currentDirection

	^currentCardinalDirection ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 19:18:22'!
signalInvalidCommand
	self error: self invalidCommand! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 19:19:23'!
invalidCommand
	^'Invalid command'! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 19:19:43' prior: 50872674!
invalidCommand

	^'Invalid command'! !
!MarsRover class methodsFor: 'instance creation' stamp: 'DB 10/25/2020 19:19:48' prior: 50872669!
signalInvalidCommand

	self error: self invalidCommand! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:20:07' prior: 50871615!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self signalInvalidCommand ].
		
		aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
		aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
		aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
		aCommand = $r ifTrue: [currentCardinalDirection turnRight].
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:20:11'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:20:11'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:20:11'!
ERROR!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 19:22:16' prior: 50872183!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	"marsRover move: 'frffr=?xxyffr'."
	
	self should: [marsRover move: 'frffr=?xxyffr'.] raise: Error  withMessageText: MarsRover invalidCommand. 
	
	"self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection)."! !

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:22:17'!
FAILURE!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 19:24:11' prior: 50872769!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	"marsRover move: 'frffr=?xxyffr'."
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	"self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection)."! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:25:27' prior: 50872689!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self class signalInvalidCommand ].
		
		aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
		aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
		aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
		aCommand = $r ifTrue: [currentCardinalDirection turnRight].
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:25:48'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:25:48'!
PASSED!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 19:26:10' prior: 50872788!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	"marsRover move: 'frffr=?xxyffr'."
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:26:14'!
PASSED!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 19:26:24' prior: 50872879!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:29:17' prior: 50872803!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self class signalInvalidCommand ].
		self step aCommand.
	]
	! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:29:41'!
step: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:29:49'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:29:49'!
FAILURE!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:30:28' prior: 50872912!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self class signalInvalidCommand ].
		self moveOnestep aCommand.
	]
	! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:30:35'!
moveOnestep: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].! !

!methodRemoval: MarsRover #step: stamp: 'DB 10/25/2020 19:30:41'!
step: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:30:45'!
ERROR!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:30:45'!
FAILURE!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:30:48'!
ERROR!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:31:35' prior: 50872991!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self class signalInvalidCommand ].
		self moveOnestep: aCommand.
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:31:36'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 19:31:41'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 19:31:41'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:32:25'!
moveOneStep: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:32:25' prior: 50873084!
move: commands 
	commands do: [:aCommand | 
		(self isValid: aCommand) ifFalse: [self class signalInvalidCommand ].
		self moveOneStep: aCommand.
	]
	! !

!methodRemoval: MarsRover #moveOnestep: stamp: 'DB 10/25/2020 19:32:25'!
moveOnestep: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:37:56'!
validateCommand: aCommand

	^ (self isValid: aCommand) ifFalse: [self class signalInvalidCommand ]! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:37:56' prior: 50873167!
move: commands 
	commands do: [:aCommand | 
		self validateCommand: aCommand.
		self moveOneStep: aCommand.
	]
	! !

----SNAPSHOT----(25 October 2020 19:40:55) CuisUniversity-4384.image priorSource: 17312327!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 19:42:17' prior: 50873155!
moveOneStep: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].! !

Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #Command category: 'Mars Rover' stamp: 'DB 10/25/2020 19:42:33'!
Object subclass: #Command
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #ForwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #ForwardCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:42:47'!
Command subclass: #ForwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #BackwardCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:42:53'!
Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #TurnRightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #TurnRightCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:43:06'!
Command subclass: #TurnRightCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Command subclass: #TurnLeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #TurnLeftCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:43:12'!
Command subclass: #TurnLeftCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!Command methodsFor: 'nil' stamp: 'DB 10/25/2020 19:43:33'!
move
	self subclassResponsibility ! !

!classDefinition: #BackwardCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:44:14'!
Command subclass: #BackwardCommand
	instanceVariableNames: 'cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!BackwardCommand methodsFor: 'nil' stamp: 'DB 10/25/2020 19:44:12' overrides: 50873267!
move
	
	cardinalDirection moveBackward! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:44:20' prior: 50873279 overrides: 50873267!
move

	cardinalDirection moveBackward! !

Object subclass: #Command
	instanceVariableNames: 'cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!methodRemoval: BackwardCommand #move stamp: 'DB 10/25/2020 19:45:12'!
move

	cardinalDirection moveBackward!

Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #BackwardCommand category: 'Mars Rover' stamp: 'DB 10/25/2020 19:45:19'!
Command subclass: #BackwardCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

Object subclass: #Command
	instanceVariableNames: 'cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #Command category: 'Mars Rover' stamp: 'DB 10/25/2020 19:45:25'!
Object subclass: #Command
	instanceVariableNames: 'cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!
!BackwardCommand methodsFor: 'nil' stamp: 'DB 10/25/2020 19:45:43' overrides: 50873267!
move

	cardinalDirection moveBackwad! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:45:48' prior: 50873320 overrides: 50873267!
move

	cardinalDirection moveBackward! !
!ForwardCommand methodsFor: 'nil' stamp: 'DB 10/25/2020 19:46:27' overrides: 50873267!
move

	cardinalDirection moveForward ! !
!TurnLeftCommand methodsFor: 'nil' stamp: 'DB 10/25/2020 19:46:45' overrides: 50873267!
move

	cardinalDirection turnLeft ! !
!TurnRightCommand methodsFor: 'nil' stamp: 'DB 10/25/2020 19:47:10' overrides: 50873267!
move
	
	cardinalDirection turnRight ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:47:27'!
isValid

	self false! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:47:30' prior: 50873342!
isValid

	^self false! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:47:33' prior: 50873346!
isValid

	^self false! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:47:50' overrides: 50873350!
isValid
	
	^True! !
!ForwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:48:12' overrides: 50873350!
isValid
	
	^true! !
!TurnLeftCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:48:25' overrides: 50873350!
isValid

	^true! !
!TurnRightCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:48:36' overrides: 50873350!
isValid
	
	^true! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:48:42' prior: 50873355 overrides: 50873350!
isValid
	
	^true! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:50:21'!
isValid: aCommand
	
	^aCommand  = $b! !
!Command class methodsFor: 'nil' stamp: 'DB 10/25/2020 19:51:44'!
isFor: aCommand

	self subclassResponsibility ! !
!BackwardCommand class methodsFor: 'nil' stamp: 'DB 10/25/2020 19:52:10' overrides: 50873380!
isFor: aCommand

	^aCommand = 'b'! !
!BackwardCommand class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:52:16' prior: 50873385 overrides: 50873380!
isFor: aCommand

	^aCommand = $b! !
!ForwardCommand class methodsFor: 'nil' stamp: 'DB 10/25/2020 19:52:26' overrides: 50873380!
isFor: aCommand

	^aCommand = $f! !
!TurnLeftCommand class methodsFor: 'nil' stamp: 'DB 10/25/2020 19:52:34' overrides: 50873380!
isFor: aCommand

	^aCommand = $l! !
!TurnRightCommand class methodsFor: 'nil' stamp: 'DB 10/25/2020 19:52:41' overrides: 50873380!
isFor: aCommand

	^aCommand = $r! !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:54:54'!
for: aCommand ifNone: aNoneCommand

	^self subclasses 
		detect: [ :aCommandClass | aCommandClass isFor: aCommand ]
		! !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 19:56:01' prior: 50873410!
for: aCommand ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass isFor: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass new] 
		ifNone: aNoneCommand	
		! !
!BackwardCommand methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:05:14'!
canHandle: aCommand
	
	^aCommand  = $b! !

!methodRemoval: BackwardCommand #isValid stamp: 'DB 10/25/2020 20:05:22'!
isValid
	
	^true!

!methodRemoval: BackwardCommand #isValid: stamp: 'DB 10/25/2020 20:05:30'!
isValid: aCommand
	
	^aCommand  = $b!
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:05:48'!
canHandle

	^self subclassResponsibility ! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:05:58' prior: 50873437!
canHandle

	self subclassResponsibility ! !

!methodRemoval: Command #canHandle stamp: 'DB 10/25/2020 20:06:09'!
canHandle

	self subclassResponsibility !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:07:28'!
canHandle
	
	self subclassResponsibility ! !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:08:15'!
for: aCardinalDirection
	
	^self new initilizeFor: aCardinalDirection ! !
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 20:14:46' prior: 50873191!
move: commands 
	commands do: [:aCommand | | com | 
		
		com := Command for: aCommand with: currentCardinalDirection ifNone: [^self class signalInvalidCommand ]. 
		com move.
		
		"self validateCommand: aCommand.
		self moveOneStep: aCommand."
	]
	! !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:15:33'!
for: aCommand with: aCardinalDirection ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass isFor: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass with: aCardinalDirection ] 
		ifNone: aNoneCommand	
		! !

!methodRemoval: Command class #for:ifNone: stamp: 'DB 10/25/2020 20:15:42'!
for: aCommand ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass isFor: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass new] 
		ifNone: aNoneCommand	
		!
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:15:58' prior: 50873470!
for: aCommand with: aCardinalDirection ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass isFor: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass initilizeFor: aCardinalDirection ] 
		ifNone: aNoneCommand	
		! !

!methodRemoval: Command class #isFor: stamp: 'DB 10/25/2020 20:16:08'!
isFor: aCommand

	self subclassResponsibility !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:16:28' prior: 50873490!
for: aCommand with: aCardinalDirection ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass canHandle: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass initilizeFor: aCardinalDirection ] 
		ifNone: aNoneCommand	
		! !
!Command class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:17:04' prior: 50873505!
for: aCommand with: aCardinalDirection ifNone: aNoneCommand

	^self subclasses  
		detect: [ :aCommandClass | aCommandClass canHandle: aCommand ] 
		ifFound: [ :aCommandClass | aCommandClass for: aCardinalDirection ] 
		ifNone: aNoneCommand	
		! !
!Command methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:17:46'!
initilizeFor: aCardinalDirection

	cardinalDirection  := aCardinalDirection ! !

!methodRemoval: ForwardCommand #isValid stamp: 'DB 10/25/2020 20:18:07'!
isValid
	
	^true!

!methodRemoval: TurnLeftCommand #isValid stamp: 'DB 10/25/2020 20:18:20'!
isValid

	^true!

!methodRemoval: TurnRightCommand #isValid stamp: 'DB 10/25/2020 20:18:26'!
isValid
	
	^true!
!TurnRightCommand class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:18:58'!
canHandle: aCommand

	^aCommand = $r! !

!methodRemoval: TurnRightCommand class #isFor: stamp: 'DB 10/25/2020 20:18:58'!
isFor: aCommand

	^aCommand = $r!
!TurnLeftCommand class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:19:10'!
canHandle: aCommand

	^aCommand = $l! !

!methodRemoval: TurnLeftCommand class #isFor: stamp: 'DB 10/25/2020 20:19:14'!
isFor: aCommand

	^aCommand = $l!
!ForwardCommand class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:19:25'!
canHandle: aCommand

	^aCommand = $f! !

!methodRemoval: ForwardCommand class #isFor: stamp: 'DB 10/25/2020 20:19:29'!
isFor: aCommand

	^aCommand = $f!
!BackwardCommand class methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:19:39'!
canHandle: aCommand

	^aCommand = $b! !

!methodRemoval: BackwardCommand class #isFor: stamp: 'DB 10/25/2020 20:19:45'!
isFor: aCommand

	^aCommand = $b!

!methodRemoval: Command #isValid stamp: 'DB 10/25/2020 20:20:00'!
isValid

	^self false!

!methodRemoval: BackwardCommand #canHandle: stamp: 'DB 10/25/2020 20:20:13'!
canHandle: aCommand
	
	^aCommand  = $b!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:20:35'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:20:36'!
PASSED!

!methodRemoval: MarsRover #isValid: stamp: 'DB 10/25/2020 20:20:51'!
isValid: aCommand 

	^ (aCommand = $f) or: (aCommand = $b) or: (aCommand = $l) or: (aCommand = $r).
	!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:20:55'!
PASSED!

!methodRemoval: MarsRover #moveOneStep: stamp: 'DB 10/25/2020 20:21:07'!
moveOneStep: aCommand
		
	aCommand = $f ifTrue: [currentCardinalDirection moveForward ].	
	aCommand = $b ifTrue: [currentCardinalDirection moveBackward].
	aCommand = $l ifTrue: [currentCardinalDirection turnLeft].
	aCommand = $r ifTrue: [currentCardinalDirection turnRight].!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 20:21:16' prior: 50873459!
move: commands 
	commands do: [:aCommand | | com | 
		
		com := Command for: aCommand with: currentCardinalDirection ifNone: [^self class signalInvalidCommand ]. 
		com move.
		
	]
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:21:18'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:21:19'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:21:19'!
PASSED!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 20:21:57' prior: 50873720!
move: commands 
	commands do: [:aCommand | 
		| aStep | 
		
		aStep := Command for: aCommand with: currentCardinalDirection ifNone: [^self class signalInvalidCommand ]. 
		aStep move.
		
	]
	! !

!methodRemoval: MarsRover #validateCommand: stamp: 'DB 10/25/2020 20:22:31'!
validateCommand: aCommand

	^ (self isValid: aCommand) ifFalse: [self class signalInvalidCommand ]!
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:27:54'!
assertCorrectPositionAfterBackwardMovement: aMarsRover expectPosition: endPosition

	aMarsRover move: 'b'.	
	self assert: ((aMarsRover currentPosition) = (endPosition))! !
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:28:36' prior: 50871842!
test02BackwardWhenPointingNorth

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atNorth: 1@1) expectPosition: (1@0).
	
	"| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'b'.
	
	self assert: ((marsRover currentPosition) = (1@0))"! !

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:28:40'!
PASSED!
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:28:45' prior: 50873814!
test02BackwardWhenPointingNorth

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atNorth: 1@1) expectPosition: (1@0).! !
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:29:25' prior: 50871902!
test08BackwardWhenPointingEast

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atEast: 1@1) expectPosition: (0@1).
	
! !

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:29:28'!
PASSED!
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:29:55' prior: 50871911!
test09BackwardWhenPointingSouth

	self assertCorrectPositionAfterBackwardMovement: ( MarsRover atSouth: 1@1)  expectPosition: (1@2)
	! !
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:30:22' prior: 50871920!
test10BackwardWhenPointingWest

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atWest: 1@1) expectPosition: (2@1)
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:30:26'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:30:26'!
PASSED!
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:32:02'!
assertCorrectPositionAfterForwardMovement: aMarsRover expectPosition: endPosition

	aMarsRover move: 'f'.	
	self assert: ((aMarsRover currentPosition) = (endPosition))	! !
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:32:33' prior: 50871830!
test01ForwardWhenPointingNorth


	self assertCorrectPositionAfterForwardMovement: (MarsRover atNorth: 1@1) expectPosition: (1@2).
	! !
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:32:41' prior: 50873933!
test01ForwardWhenPointingNorth

	self assertCorrectPositionAfterForwardMovement: (MarsRover atNorth: 1@1) expectPosition: (1@2).
	! !
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:33:11' prior: 50871872!
test05ForwardWhenPointingEast

	self assertCorrectPositionAfterForwardMovement: (MarsRover atEast: 1@1)  expectPosition: (2@1)! !
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:33:36' prior: 50871881!
test06ForwardWhenPointingSouth
	
	self assertCorrectPositionAfterForwardMovement: (MarsRover atSouth: 1@1) expectPosition: (1@0)
	! !
!MarsRoverTest methodsFor: 'Forward tests' stamp: 'DB 10/25/2020 20:34:04' prior: 50871893!
test07ForwardWhenPointingWest

	self assertCorrectPositionAfterForwardMovement: (MarsRover atWest: 1@1)  expectPosition: (0@1)
	! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:34:07'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:34:07'!
PASSED!
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:34:58'!
assertCorrectPositionAfterBackwardMovement: aMarsRover expectedDirection: aDirection
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:35:32'!
assertCorrectPositionAfterTurnLeftMovement: aMarsRover expectedDirection: aDirection
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: aDirection )! !

!methodRemoval: MarsRoverTest #assertCorrectPositionAfterBackwardMovement:expectedDirection: stamp: 'DB 10/25/2020 20:35:32'!
assertCorrectPositionAfterBackwardMovement: aMarsRover expectedDirection: aDirection
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'l'.
	
	self assert: ((marsRover currentDirection) isKindOf: aDirection )!
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:35:50' prior: 50874042!
assertCorrectPositionAfterTurnLeftMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'l'.
	
	self assert: ((aMarsRover currentDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:36:25' prior: 50872084!
test03TuringLeftWhenPointingNorth

	self assertCorrectPositionAfterTurnLeftMovement: ( MarsRover atNorth: 1@1) expectedDirection: WestDirection
	! !

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:36:27'!
PASSED!
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:36:55' prior: 50872106!
test11TuringLeftWhenPointingEast

	self assertCorrectPositionAfterTurnLeftMovement: (MarsRover atEast: 1@1) expectedDirection: NorthDirection
	! !

----SNAPSHOT----(25 October 2020 20:36:58) CuisUniversity-4384.image priorSource: 17329491!
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:37:26' prior: 50872115!
test12TuringLeftWhenPointingSouth

	self assertCorrectPositionAfterTurnLeftMovement: (MarsRover atSouth: 1@1)  expectedDirection: EastDirection ! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:37:51' prior: 50872124!
test13TuringLeftWhenPointingWest

	self assertCorrectPositionAfterTurnLeftMovement: (MarsRover atWest: 1@1) expectedDirection: SouthDirection! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:38:03'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:38:03'!
PASSED!
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:38:43'!
assertCorrectPositionAfterTurnRighttMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'r'.
	
	self assert: ((aMarsRover currentDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:39:09' prior: 50872097!
test04TurningRightWhenPointingNorth

	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atNorth: 1@1) expectedDirection: EastDirection ! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:39:43' prior: 50872133!
test14TurningRightWhenPointingEast


	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atEast: 1@1) expectedDirection: SouthDirection! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:39:47' prior: 50874189!
test14TurningRightWhenPointingEast

	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atEast: 1@1) expectedDirection: SouthDirection! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:40:11' prior: 50872142!
test15TurningRightWhenPointingSouth

	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atSouth: 1@1)  expectedDirection: WestDirection! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:40:39' prior: 50872151!
test16TurningRightWhenPointingWest

	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atWest: 1@1) expectedDirection: NorthDirection! !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:40:42'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:40:43'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:40:43'!
PASSED!

!testRun: #MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:40:43'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:40:43'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:40:43'!
PASSED!

!methodRemoval: MarsRoverTest #test17MultipleCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:41:51'!
test17MultipleCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'fff'.
	
	self assert: ((marsRover currentPosition ) = (1@4)).
	self assert: ((marsRover currentDirection) isKindOf: NorthDirection).!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:41:57'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:41:58'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:41:58'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:41:58'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:41:58'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:41:58'!
PASSED!

!testRun: #MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:41:58'!
PASSED!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 20:42:31'!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).! !

!methodRemoval: MarsRoverTest #test19DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:42:31'!
test19DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentDirection) isKindOf: SouthDirection).!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:42:42'!
PASSED!

----SNAPSHOT----(25 October 2020 20:42:46) CuisUniversity-4384.image priorSource: 17358098!
!MarsRover methodsFor: 'accessing' stamp: 'DB 10/25/2020 20:43:43'!
currentCardinalDirection

	^currentCardinalDirection ! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:43:43' prior: 50874172!
assertCorrectPositionAfterTurnRighttMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'r'.
	
	self assert: ((aMarsRover currentCardinalDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:43:43' prior: 50872171!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:43:43' prior: 50874064!
assertCorrectPositionAfterTurnLeftMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'l'.
	
	self assert: ((aMarsRover currentCardinalDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'DB 10/25/2020 20:43:43' prior: 50874350!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).! !

!methodRemoval: MarsRover #currentDirection stamp: 'DB 10/25/2020 20:43:43'!
currentDirection

	^currentCardinalDirection !

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/25/2020 20:44:05'!
PASSED!

----SNAPSHOT----(25 October 2020 20:45:02) CuisUniversity-4384.image priorSource: 17369129!

----SNAPSHOT----(25 October 2020 20:46:37) CuisUniversity-4384.image priorSource: 17372794!
!MarsRover methodsFor: 'movement' stamp: 'DB 10/25/2020 20:50:48' prior: 50873790!
move: commands 
	commands do: [:aCommand | 
		| aStep | 
		
		aStep := Command for: aCommand with: currentCardinalDirection ifNone: [^self class signalInvalidCommand]. 
		aStep move.
		
	]
	! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:09' prior: 50871173!
moveBackwardWhenDirectionIsEast
	
	currentPosition := currentPosition - (1@0)
	
! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:14' prior: 50871162!
moveBackwardWhenDirectionIsNorth
	
	currentPosition := currentPosition - (0@1)
	
	
! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:18' prior: 50871179!
moveBackwardWhenDirectionIsSouth
	
	currentPosition := currentPosition + (0@1)
	
! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:22' prior: 50871185!
moveBackwardWhenDirectionIsWest
	
	currentPosition := currentPosition+ (1@0)
	
	
! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:41' prior: 50874584!
moveBackwardWhenDirectionIsWest
	
	currentPosition := currentPosition + (1@0)
	
	
! !
!MarsRover methodsFor: 'private movements' stamp: 'DB 10/25/2020 20:51:49' prior: 50871168!
moveForwardWhenDirectionIsEast
	
	currentPosition := currentPosition + (1@0)! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:52:34' prior: 50874466!
assertCorrectPositionAfterTurnLeftMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'l'.
	self assert: ((aMarsRover currentCardinalDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 20:52:42' prior: 50874444!
assertCorrectPositionAfterTurnRighttMovement: aMarsRover expectedDirection: aDirection

	aMarsRover move: 'r'.
	self assert: ((aMarsRover currentCardinalDirection) isKindOf: aDirection )! !
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 20:53:00' prior: 50873848!
test09BackwardWhenPointingSouth

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atSouth: 1@1)  expectPosition: (1@2)
	! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 20:53:09' prior: 50874073!
test03TuringLeftWhenPointingNorth

	self assertCorrectPositionAfterTurnLeftMovement: (MarsRover atNorth: 1@1) expectedDirection: WestDirection
	! !
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 21:04:34' prior: 50874475!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	marsRover move: 'bbbbl'.
	
	self assert: (marsRover currentPosition) = (3@-2)! !

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 21:04:42'!
FAILURE!

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 21:04:42'!
FAILURE!

marsRover currentPosition!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 21:06:01' prior: 50874636!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	marsRover move: 'bbbbl'.
	! !
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 21:10:15' prior: 50874662!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	marsRover move: 'bbbbl'.
	
	self assert: ((marsRover currentPosition ) = (3@6)).
	self assert: (marsRover currentCardinalDirection isKindOf: EastDirection).
	! !

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 21:10:19'!
PASSED!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 21:10:55' prior: 50874678!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	marsRover move: 'bbbbl'.
	
	self assert: ((marsRover currentPosition ) = (3@6)).
	self assert: (marsRover currentCardinalDirection isKindOf: EastDirection).
	
	marsRover move: 'bbbb'.
	! !

marsRover!

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/25/2020 21:11:23'!
PASSED!
!MarsRoverTest methodsFor: 'Invalid commands' stamp: 'DB 10/25/2020 21:11:39' prior: 50874702!
test17DoesntContinueExecutingAfterAnInvalidCommand
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	self 
		should: [marsRover move: 'frffr=?xxyffr'.] 
		raise: Error  
		withMessageText: MarsRover invalidCommand. 
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	! !

----SNAPSHOT----(25 October 2020 21:11:46) CuisUniversity-4384.image priorSource: 17372887!

----QUIT----(25 October 2020 21:23:33) CuisUniversity-4384.image priorSource: 17378891!

----STARTUP---- (25 October 2020 21:37:45) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!

!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/25/2020 21:44:39' prior: 50874620!
test09BackwardWhenPointingSouth

	self assertCorrectPositionAfterBackwardMovement: (MarsRover atSouth: 1@1) expectPosition: (1@2)
	! !
!MarsRoverTest methodsFor: 'Turning Left tests' stamp: 'DB 10/25/2020 21:44:53' prior: 50874095!
test12TuringLeftWhenPointingSouth

	self assertCorrectPositionAfterTurnLeftMovement: (MarsRover atSouth: 1@1) expectedDirection: EastDirection ! !
!MarsRoverTest methodsFor: 'Turning Right tests' stamp: 'DB 10/25/2020 21:45:01' prior: 50874205!
test15TurningRightWhenPointingSouth

	self assertCorrectPositionAfterTurnRighttMovement: (MarsRover atSouth: 1@1) expectedDirection: WestDirection! !

----SNAPSHOT----(25 October 2020 21:45:27) CuisUniversity-4384.image priorSource: 17378984!

----QUIT----(25 October 2020 21:46:00) CuisUniversity-4384.image priorSource: 17379957!

----STARTUP---- (25 October 2020 21:50:27) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


----QUIT----(25 October 2020 22:09:09) CuisUniversity-4384.image priorSource: 17380050!

----STARTUP---- (26 October 2020 17:23:07) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!

!MarsRover methodsFor: 'accessing' stamp: 'DB 10/26/2020 17:44:37'!
isAt: aPosition in: aDirection

	^currentPosition = aPosition and: [currentCardinalDirection isKindOf: aDirection]! !
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/26/2020 17:45:44' prior: 50873805!
assertCorrectPositionAfterBackwardMovement: aMarsRover expectPosition: endPosition

	aMarsRover move: 'b'.	
	"self assert: ((aMarsRover currentPosition) = (endPosition))"
	self assert: (aMarsRover isAt: endPosition in: NorthDirection) ! !

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/26/2020 17:45:56'!
PASSED!

!testRun: #MarsRoverTest #test01ForwardWhenPointingNorth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test02BackwardWhenPointingNorth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test03TuringLeftWhenPointingNorth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test04TurningRightWhenPointingNorth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test05ForwardWhenPointingEast stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test06ForwardWhenPointingSouth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test07ForwardWhenPointingWest stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test08BackwardWhenPointingEast stamp: 'DB 10/26/2020 17:46:02'!
FAILURE!

!testRun: #MarsRoverTest #test09BackwardWhenPointingSouth stamp: 'DB 10/26/2020 17:46:02'!
FAILURE!

!testRun: #MarsRoverTest #test10BackwardWhenPointingWest stamp: 'DB 10/26/2020 17:46:02'!
FAILURE!

!testRun: #MarsRoverTest #test11TuringLeftWhenPointingEast stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test12TuringLeftWhenPointingSouth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test13TuringLeftWhenPointingWest stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test14TurningRightWhenPointingEast stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test15TurningRightWhenPointingSouth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test16TurningRightWhenPointingWest stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test17DoesntContinueExecutingAfterAnInvalidCommand stamp: 'DB 10/26/2020 17:46:02'!
PASSED!

!testRun: #MarsRoverTest #test18MultipleMixedCommandsWhenPointingNorth stamp: 'DB 10/26/2020 17:46:02'!
PASSED!
!MarsRoverTest methodsFor: 'Backward tests' stamp: 'DB 10/26/2020 17:46:25' prior: 50874798!
assertCorrectPositionAfterBackwardMovement: aMarsRover expectPosition: endPosition

	aMarsRover move: 'b'.	
	self assert: ((aMarsRover currentPosition) = (endPosition))
	"self assert: (aMarsRover isAt: endPosition in: NorthDirection)"! !

CardinalDirection class
	instanceVariableNames: 'east north south west'!

!classDefinition: 'CardinalDirection class' category: 'Mars Rover' stamp: 'DB 10/26/2020 18:14:13'!
CardinalDirection class
	instanceVariableNames: 'east north south west'!
!CardinalDirection class methodsFor: 'nil' stamp: 'DB 10/26/2020 18:16:21' overrides: 16883149!
initialize

	east := CardinalDirection new. "Createse con los colaboradores no"
	west := CardinalDirection new. 
	north := CardinalDirection new.
	south := CardinalDirection new.! !
!CardinalDirection class methodsFor: 'nil' stamp: 'DB 10/26/2020 18:16:43'!
east
	^east! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'DB 10/26/2020 18:16:51'!
north
	^north ! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'DB 10/26/2020 18:17:05'!
south
	^south! !
!CardinalDirection class methodsFor: 'as yet unclassified' stamp: 'DB 10/26/2020 18:17:29'!
west
	^west! !

Object subclass: #CardinalDirection
	instanceVariableNames: 'marsRover simbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

!classDefinition: #CardinalDirection category: 'Mars Rover' stamp: 'DB 10/26/2020 18:19:42'!
Object subclass: #CardinalDirection
	instanceVariableNames: 'marsRover simbol'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Mars Rover'!

----QUIT----(26 October 2020 20:50:14) CuisUniversity-4384.image priorSource: 17380268!

----STARTUP---- (29 October 2020 17:54:46) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'DB 10/29/2020 17:56:12'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!MarsRoverTest methodsFor: 'Multiple Commands tests' stamp: 'DB 10/29/2020 19:11:46' prior: 50874454!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	! !

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/IS1-Trabajos/17-TerniLapilli/TerniLapilliTest.st----!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:23:10'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:23:10'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:23:14'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:23:23'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:23:45'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:23:57'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:24:06'!
isEmpty
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:25:02' prior: 50875231!
isEmpty
	chipsX isEmpty & chipsO isEmpty! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:25:03'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:25:23'!
ERROR!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/Packages/TerseGuide.pck.st----!

x _ OrderedCollection new.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:27:29' prior: 50875089 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:27:41'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:27:41'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:27:44'!
ERROR!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:28:00'!
ERROR!

chipsX isEmpty!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:28:51' prior: 50875236!
isEmpty
	^(chipsX isEmpty) and: (chipsO isEmpty)! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:28:51'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:29:00'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:29:00'!
ERROR!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:29:00'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:29:00'!
ERROR!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:29:00'!
ERROR!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:29:00'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:29:00'!
ERROR!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:29:03'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:30:15' prior: 50875094!
isBoardFull

	^(chipsX size + chipsO size) = 6! !

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:30:16'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:30:20'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:30:23'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:30:39' prior: 50875032!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.! !

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:31:32'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:31:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:31:41'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:31:44'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:31:49'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:31:53'!
PASSED!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:32:02'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:32:02'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:34:16'!
test06assertAfterOTurnGoesX
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.! !

!testRun: #TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 10/29/2020 20:34:19'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 10/29/2020 20:34:19'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:34:59' prior: 50875106!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !

!testRun: #TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 10/29/2020 20:35:00'!
PASSED!

!testRun: #TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 10/29/2020 20:35:04'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:35:57'!
test07assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:36:47' prior: 50878362!
test07assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	newTerniLapilliGame putXAt: (2@1).
	
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:36:52'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:36:52'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:38:54' prior: 50875120!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:38:56'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:39:00'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:39:23'!
test03assertPlayerOCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !

!methodRemoval: TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:39:23'!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .!

!testRun: #TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:40:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:09'!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:41:13'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:41:13'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:45' prior: 50878441!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:48' prior: 50878461!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:41:52'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:43:42' prior: 50878341!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:46:06' prior: 50878493!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:46:22' prior: 50878393!
putXAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:46:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:48:28'!
test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:48:34'!
PASSED!

!methodRemoval: TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 10/29/2020 20:48:51'!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.!

!methodRemoval: TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 10/29/2020 20:48:56'!
test06assertAfterOTurnGoesX
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:50:41'!
test04assertPlayerOCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!methodRemoval: TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:50:41'!
test04assertPlayerCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:50:54'!
test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:50:54'!
test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:51:26'!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."! !

!methodRemoval: TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:51:26'!
test06assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:51:35'!
test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:51:35'!
test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:53:30'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:53:30'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:54:15'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:54:31'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:54:50'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:55:38' prior: 50875085!
hasPlayerXWon
	^true
	
		! !

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:55:46'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:56:39' prior: 50878748!
hasPlayerXWon
	^true
	
		! !

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:56:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:57:29' prior: 50878656!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:57:33'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:57:33'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:57:33'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:57:46'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:57:58' prior: 50875081!
hasPlayerOWon
	^false! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 10/29/2020 20:58:02'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 20:58:02'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:58:29'!
test09assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:58:41'!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test09assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 20:58:41'!
test09assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 20:58:45'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 20:58:45'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:00:36' prior: 50878869!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 21:00:40'!
ERROR!

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 21:00:40'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:01:17' prior: 50878906!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 21:01:20'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 10/29/2020 21:01:20'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:15'!
wonHorizontal: positions
	
	positions includesAllOf: #((0@2) (1@2) (2@2))
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:48' prior: 50878818!
hasPlayerOWon
	^self wonHorizontal: chipsO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:54' prior: 50878756!
hasPlayerXWon
	^self wonHorizontal: chipsX
	
		! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:19:17' prior: 50878952!
wonHorizontal: positions
	
	positions includesAllOf: #((0@2) (1@2) (2@2))
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:20:11' prior: 50878764!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:21:56' prior: 50878974!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:22:15' prior: 50878968!
wonHorizontal: positions
	
	positions includesAllOf: #((0@0) (0@1) (0@2))
	
	
	! !

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 21:22:23'!
ERROR!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 21:22:23'!
ERROR!

newTerniLapilliGame!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:23:09' prior: 50878990!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 21:23:16'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:24:00' prior: 50879005!
wonHorizontal: positions
	
	^positions includesAllOf: #((0@0) (0@1) (0@2))
	
	
	! !

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 10/29/2020 21:24:01'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:25:30' prior: 50879037!
wonHorizontal: positions
	
	^positions includesAllOf: #(0@0 0@1 0@2)
	
	
	! !

a := #(1 2 3)!

a := #(1 2 3)!

a := #(1@2 2@2 3@1)!

a := #(1@2 2@2 3@1)!

----STARTUP---- (1 November 2020 17:28:36) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'DB 11/1/2020 17:28:38'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliTest category: 'Terni Lapilli' stamp: 'DB 11/1/2020 17:28:38'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!MarsRoverTest methodsFor: 'Multiple Commands tests' stamp: 'DB 10/29/2020 19:11:46' prior: 50874454!
test18MultipleMixedCommandsWhenPointingNorth
	
	| marsRover |
	marsRover := MarsRover atNorth: 1@1.
	
	marsRover move: 'frffr'.
	
	self assert: ((marsRover currentPosition ) = (3@2)).
	self assert: ((marsRover currentCardinalDirection) isKindOf: SouthDirection).
	
	! !

!classDefinition: #TerniLapilliTest category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:38'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliTest category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:38'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:27:44'!
test01assertOnStartItsPlayerXTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	self assert: newTerniLapilliGame  isEmpty.
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:14'!
test02assertAfterXTurnGoesO
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self assert: newTerniLapilliGame isPlayingO.
	self deny: newTerniLapilliGame isPlayingX.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:21'!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:30'!
test04assertPlayerCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:31:45'!
test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:30:55'!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame isOver.
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:36:47'!
test06assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."! !

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:39'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:39'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:23:24'!
hasPlayerOWon
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:37:44'!
hasPlayerXWon
	
		! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:01:50' overrides: 16896425!
initialize
	currentTurn := #X.
	board:= OrderedCollection  new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:03:46'!
isBoardFull

	^board size  = 6! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:25:56'!
isPlayingO
	^currentTurn = #O! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:26:18'!
isPlayingX
	^currentTurn = #X.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:40:08'!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:41:09'!
putXAt: aPoint 
	
	currentTurn := #O.
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.! !

!classDefinition: 'TerniLapilli class' category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:39'!
TerniLapilli class
	instanceVariableNames: ''!

!classDefinition: 'TerniLapilli class' category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 17:28:39'!
TerniLapilli class
	instanceVariableNames: ''!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:45:21'!
errorInvalidMoveCantPutChipOnOccupiedSlot
	^'Cant put chip in an occupied slot'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:00:45'!
errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	^'All 6 chips have been put on the board'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:19:03'!
errorInvalidMoveCantPutChipWhenGameIsOver

	^'Cant put chip because the game is already over'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:36:31'!
errorInvalidMoveNotYourTurn

	^'It must be your turn to be able to put down a chip'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:44:56'!
signalErrorInvalidMoveCantPutChipOnOccupiedSlot

	self error: self errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:00:16'!
signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	self error: self errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 19:18:37'!
signalErrorInvalidMoveCantPutChipWhenGameIsOver

	self error: self errorInvalidMoveCantPutChipWhenGameIsOver .! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'ad 10/29/2020 18:40:19'!
signalErrorInvalidMoveNotYourTurn

	self error: self errorInvalidMoveNotYourTurn .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:24:06'!
isEmpty
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:25:02' prior: 50879327!
isEmpty
	chipsX isEmpty & chipsO isEmpty! !

!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideHelp category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
Workspace subclass: #TerseGuideHelp
	instanceVariableNames: 'topics topicListIndex selectedTopic topicList window textPane'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: 'TerseGuideHelp class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideHelp class
	instanceVariableNames: 'topics'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideWindow category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
WorkspaceWindow subclass: #TerseGuideWindow
	instanceVariableNames: 'textModelM list1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideWindow class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideWindow class
	instanceVariableNames: ''!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: #TerseGuideTopic category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
Object subclass: #TerseGuideTopic
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerseGuide'!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideTopic class
	instanceVariableNames: ''!

!classDefinition: 'TerseGuideTopic class' category: 'TerseGuide' stamp: 'DB 11/1/2020 17:28:39'!
TerseGuideTopic class
	instanceVariableNames: ''!
!TerseGuideHelp commentStamp: 'dhn 3/7/2015 13:20' prior: 0!
TerseGuideHelp is adapted from the Squeak terse guide by Chris Rathman (http://www.angelfire.com/tx4/cus/notes/smalltalk.html), maintained on the swiki at http://wiki.squeak.org/squeak/5699. Copyrights and credit for the original document belong to Chris Rathman.

Examples of use include:

TerseGuideHelp display: #arithmetic
TerseGuideHelp display: #array
TerseGuideHelp display: #transcript

TerseGuideHelp also serves as the model for TerseGuideWindow, which can be opened by:

TerseGuideWindow openTerseGuide
!
!TerseGuideWindow commentStamp: 'dhn 3/5/2016 21:50' prior: 0!
Show a terse guide to Cuis in a system window. The window has a text pane with a list pane beside it. The text pane is a kind of Workspace which has the behavior that statements in it can be Done (Cmd-d) or Printed (Cmd-p) in order to observe their effect.

TerseGuideWindow openTerseGuide
!
!TerseGuideTopic commentStamp: '<historical>' prior: 0!
I represent a topic that can be added to the TerseGuide. Subclasses of me should implement #title and #examples. For instance:

>>title
    ^ 'Numbers'

>> examples
     ^ {
            { #code -> '4 factorial' . #category -> 'Common functions' . #description -> 'factorial' } as: Dictionary.
            { #code -> '2 even' . #category -> 'Common functions' . #description -> 'check if a number is even' } as: Dictionary.
        }!
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:53'!
addAdditionalTopicsTo: topicsList
	
	self class additionalTopics do: [ :each |
		topicsList at: each title put: each
	].! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'jmv 5/6/2020 11:10:35'!
coreTopics
	
	^ `Dictionary new
	at: 'Arithmetic' put: #arithmetic;
	at: 'Arrays' put: #array;
	at: 'Assignment' put: #assignment;
	at: 'Associations' put: #association;
	at: 'Bags' put: #bag;
	at: 'Bit-Wise' put: #bitwise;
	at: 'Blocks' put: #block;
	at: 'Booleans' put: #boolean;
	at: 'Canvas' put: #canvas;
	at: 'Character' put: #character;
	at: 'Coding' put: #coding;
	at: 'Colors' put: #colors;
	at: 'Conditional Statements' put: #conditionalStatement;
	at: 'Conversion' put: #conversion;
	at: 'Date' put: #date;
	at: 'Debugging' put: #debugging;
	at: 'Dictionary' put: #dictionary;
	at: 'Dynamic Messages' put: #dynamic;
	at: 'Exceptions' put: #exceptions;
	at: 'Features' put: #feature;
	at: 'File Operations' put: #fileMan;
	at: 'Fonts' put: #font;
	at: 'Forms' put: #form;
	at: 'Heap' put: #heap;
	at: 'Internal Streams' put: #internalStream;
	at: 'Intervals' put: #interval;
	at: 'Introduction' put: #introduction;
	at: 'Iterations' put: #iterationStatement;
	at: 'Layout Morph' put: #layoutMorph;
	at: 'Layout Spec' put: #layoutSpec;
	at: 'Literals' put: #literals;
	at: 'Metaclass' put: #metaclass;
	at: 'Method Calls' put: #methodCall;
	at: 'Miscellaneous' put: #misc;
	at: 'Morphs' put: #morph;
	at: 'Object' put: #anObject;
	at: 'Ordered Collections' put: #orderedCollection;
	at: 'Point' put: #point;
	at: 'PopUpMenu' put: #popUpMenu;
	at: 'Primitives' put: #primitive;
	at: 'Rectangle' put: #rectangle;
	at: 'Sets' put: #set;
	at: 'Sorted Collections' put: #sortedCollection;
	at: 'Strings' put: #string;
	at: 'Symbols' put: #symbol;
	at: 'Syntax' put: #syntax;
	at: 'Time' put: #time;
	at: 'Transcript' put: #transcript;	
	at: 'Trie' put: #trie;
	at: 'Custom Browsers' put: #customBrowsers;
	yourself`! !
!TerseGuideHelp methodsFor: 'topics' stamp: 'RNG 7/15/2018 01:31:23'!
terseTopics
	"Translate a list item to a class method selector"
	|allTopics|
	allTopics _ self coreTopics.
	self addAdditionalTopicsTo: allTopics.
	^ allTopics! !
!TerseGuideHelp methodsFor: 'initialization' stamp: 'dhn 5/17/2016 16:50' overrides: 16945446!
initialize
	super initialize.
	topics _ self terseTopics.
	topicList _ self class pages.
! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 6/15/2016 18:29'!
selectedTopic: aTopic
	"Set the value of selectedTopic and set the contents of the text pane"
	
	selectedTopic _ aTopic.
	textPane model actualContents: self updateTopicText.
	self triggerEvent: #topicListIndex! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 07:59'!
topicList
	^ topicList! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 2/26/2015 08:42'!
topicListIndex
	topicList ifNil: [ ^ topicListIndex _ 0 ].
	^ topicList indexOf: selectedTopic! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'dhn 10/18/2015 20:20'!
topicListIndex: index
	"Set the vakue of topicListIndex and set the value of selectedTopic"
	
	topicListIndex _ index.
	self selectedTopic: 
		(topicList at: index ifAbsent: nil)! !
!TerseGuideHelp methodsFor: 'user interface support' stamp: 'RNG 7/15/2018 01:45:10'!
updateTopicText
	"Answer the text of the selected topic and change the window label accordingly"
	| topic topicTitle |
	
	topicListIndex = 0 ifTrue: [ window setLabel: 'Terse Guide'. ^ ''].
	topic _ topics at: selectedTopic.
	topicTitle _ topic isSymbol ifTrue: [ self terseTopics keyAtValue: topic ] ifFalse: [ topic title ].
	window setLabel: ('Terse Guide to ', topicTitle).
	^ topic isSymbol ifTrue: [ self class perform: topic ] ifFalse: [ topic script ]! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 10/18/2015 20:01'!
textPane: anObject
	"Set the value of textPane"
	
	textPane _ anObject! !
!TerseGuideHelp methodsFor: 'accessing' stamp: 'dhn 2/27/2015 21:07'!
window: anObject
	"Set the value of window"

	window _ anObject! !
!TerseGuideHelp methodsFor: 'testing' stamp: 'jmv 5/29/2020 16:30:16' overrides: 50694262!
styleByParagraphs
	"Answer true if each paragraph should be styled independent of the others.
	We want to allow mutil-paragraph comments, and we are careful for our contents to be valid Smalltalk."

	^false! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:18:04'!
anObject
	"Object"
	^
'| x y |
x _ self activeHand.
	"Answer a hand for the morphic world that is the current UI focus.
	This is the UI root animated by the active Process.
	This method could answer nil, if not in a UI process!!"

y _ self as: HandMorph.
	"Create an object of class aSimilarClass that has similar contents to the receiver."

y _ x asString.
	"Answer a string that represents the receiver."

x _ #foo.
y become: x. 
	"Swap the object pointers of the receiver and the argument.
	Fails if either object is a SmallInteger"

self break.
	"This is a simple message to use for inserting breakpoints during debugging.
	The debugger is opened by sending a signal. This gives a chance to restore
	invariants related to multiple processes."

y changed.
	"Receiver changed in a general way; inform all the dependents by 
	sending each dependent an update: message."

x class.
	"Answer the object which is the receiver''s class."

x className.
	"Answer a string characterizing the receiver''s class, for use in list views for example"

nil confirm: ''Are you hungry?''.	
	"Put up a yes/no menu with a caption. Answer true if the response 
	is yes, false if no. This is a modal question--the user must respond 
	yes or no."

x _ nil confirm: ''Are you hungry?'' orCancel: [x _ ''perhaps''].
	"Put up a yes/no/cancel menu with caption aString. Answer true if  
	the response is yes, false if no. If cancel is chosen, evaluate  
	cancelBlock. This is a modal question--the user must respond yes, no, or cancel."

y disableCode: [nil confirm: ''Is this necessary?''.].
	"Use this method instead of commenting temporarily disabled code.
	This way, it will be accessible with senders, references to variables, etc.
	Besides, you''ll avoid problems when the code to disable has comments!!"

y disableCode: [self executeMethod: #fullPrintString. "Execute compiledMethod against the receiver with no args"].

x fullPrintString.
	"Answer a String whose characters are a description of the receiver."

self halt.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It behaves like halt:, but does not call on halt: in order to 
	avoid putting this message on the stack. Halt is especially useful when 
	the breakpoint message is an arbitrary one."

self halt: ''something to aid debugging''.
	"This is the typical message to use for inserting breakpoints during 
	debugging. It creates and schedules a Notifier with a label."

self inboundPointers.  "Answers a collection of all objects in the system that point to myself"

self inboundPointersExcluding: #().  "Answer a list of all objects in the system that point to me, excluding those in the collection of objectsToExclude. I do my best to avoid creating any temporary objects that point to myself"

nil inform: ''Nothing exceeds like excess.''.  "Display a message for the user to read and then dismiss."

x inspectWithLabel: ''Interesting Instance''.  "Create and schedule an Inspector labelled aLabel."

x isKindOf: Set. 	"Answer whether the argument is a superclass or class of the receiver."

y isMemberOf: Symbol. 
	"Answer whether the receiver is an instance of the argument class"

y longPrintString.
	"Answer a String whose characters are a description of the receiver."

nil notify: ''this is a notice''. 
	"Create and schedule a Notifier with the argument as the message in 
	order to request confirmation before a process can proceed."

x _ y outboundPointers.
"Answers a list of all objects I am causing not to be garbage-collected"

x perform: #asBag. 
	"Send the unary selector, a symbol, to the receiver.
	Fail if the number of arguments expected by the selector is not zero."

x perform: #at: with: 2. 
	"Send the selector, a symbol, to the receiver with an argument.
	Fail if the number of arguments expected by the selector is not one."

x perform: #at:put: with: 2 with: ''bar''. 
	"Send the selector, a symbol, to the receiver with the given arguments.
	Fail if the number of arguments expected by the selector is not two."

x perform: #at:put: withArguments: {2. 17.6}. 
	"Send the selector, a symbol, to the receiver with arguments in an array.
	Fail if the number of arguments expected by the selector does not match 
	the size of the array."

y printOn: String new writeStream.
	"Append to the argument, a stream, a sequence of characters that  
	identifies the receiver."

nil shouldBeImplemented.
	"Announce that this message should be implemented"

nil shouldNotImplement.
	"Announce that, although the receiver inherits this message, it should 
	not implement it."

y storeOn: String new writeStream. 
	"Append to the argument a sequence of characters that is an 
	expression whose evaluation creates an object similar to the receiver."

y storeString.
	"Answer a String representation of the receiver from which the receiver 
	can be reconstructed."

self subclassResponsibility.
	"This message sets up a framework for the behavior of the class'' subclasses.
	 Announce that the subclass should have implemented this message."

self triggerEvent: #mouseOver.
	"Evaluate all actions registered for the argument, an EventSelector. Return the 
	value of the last registered action."

x yourself.

y ~= #foo. 
	"Answer whether the receiver and the argument do not represent the 
	same object."

y ~~ #foo. 
	"Answer whether the receiver and the argument are not the same object 
	(do not have the same object pointer)."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 13:43:44'!
arithmetic
	"Arithmetic Expressions"
	^
'| x y |
x _ 6 + 3.								"addition"
x _ 6 - 3.								"subtraction"
x _ 6 * 3.								"multiplication"
x _ 1 + 2 * 3.							"evaluation always left to right (1 + 2) * 3"
x _ 5 / 3.								"division with fractional result"
x _ 5 / 3.0.							"division with float result"
x _ 5.0 // 3.0.						"integer divide"
x _ 5.0 \\ 3.0.						"integer remainder"
x _ -5.									"unary minus"
x _ 5 sign.								"numeric sign (1, -1 or 0)"
x _ 5 negated.							"negate receiver"
x _ 1.2 integerPart.					"integer part of number (1.0)"
x _ 1.2 fractionPart.				"fractional part of number (0.2)"
x _ 5 reciprocal.						"reciprocal function"
x _ 6 * 3.1.							"auto convert to float"
x _ 5 squared.							"square function"
x _ 25 sqrt.							"square root"
x _ 5 raisedTo: 2.					"power function"
x _ 5 raisedToInteger: 2.			"power function with integer"
x _ 5 exp.								"exponential"
x _ -5 abs.								"absolute value"
x _ 3.99 rounded.						"round"
x _ 3.99 truncated.					"truncate"
x _ 3.99 roundTo: 1.					"round to specified decimal places"
x _ 3.99 truncateTo: 1.				"truncate to specified decimal places"
x _ 3.99 floor.						"integer nearest the receiver toward negative infinity"
x _ 3.99 ceiling.						"integer nearest the receiver toward  infinity"
x _ 5 factorial.						"factorial"
x _ -5 quo: 3.							"integer divide rounded toward zero"
x _ -5 rem: 3.							"integer remainder rounded toward zero"
x _ 28 gcd: 12.						"greatest common divisor"
x _ 28 lcm: 12.						"least common multiple"
x _ 28 mod: 12.						"modulo"
x _ 100 ln.								"natural logarithm"
x _ 100 log.							"base 10 logarithm"
x _ 100 log: 10	.					"logarithm with specified base"
x _ 100 floorLog: 10.				"floor of the log"
x _ 180 degreesToRadians.			"convert degrees to radians"
x _ 3.14 radiansToDegrees.			"convert radians to degrees"
x _ 0.7 sin.							"sine"
x _ 0.7 cos.							"cosine"
x _ 0.7 tan.							"tangent"
x _ 0.7 arcSin.						"arcsine"
x _ 0.7 arcCos.						"arccosine"
x _ 0.7 arcTan.						"arctangent"
x _ 10 max: 20.						"get maximum of two numbers"
x _ 10 min: 20.						"get minimum of two numbers"
x _ Float pi.							"pi"
x _ Float e.							"exp constant"
x _ Float infinity.					"infinity"
x _ Float nan.							"not-a-number"
x _ Random new next; yourself.	"establish a local pseudo-random number generator"
x next.									"random number on the interval (0.0,1.0)"
y _ 100 atRandom.						"random integer on the interval (1,receiver)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:04:52'!
array
	"Arrays"
	^
'"
	Array:              Fixed length collection
	ByteArray:     Array limited to byte elements (0-255)
	WordArray:    Array limited to word elements (0-2^32)
"
| b x y sum max |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ #(4 3 2 1).								"constant array"
x _ Array with: 5 with: 4 with: 3 with: 2.         "create array with 4 elements"
x _ Array new: 4.								"allocate an array with specified size"
x													"set array elements"
   at: 1 put: 5;
   at: 2 put: 4;
   at: 3 put: 3;
   at: 4 put: 7;
   yourself.									"without this, x will be 7 (the last element)"

b _ x isEmpty.									"test if array is empty"
y _ x size.										"array size"
y _ x at: 4.									"get array element at index"
b _ x includes: 3.							"test if element is in array"
y _ x copyFrom: 2 to: 4.					"subarray"
y _ x indexOf: 3 ifAbsent: [0].			"first position of element within array"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the array"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].				"return collection of elements that pass test"
y _ x reject: [:a | a < 2].				"return collection of elements that fail test"
y _ x collect: [:a | a + a].				"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].	"return first element that passes test"
y _ x findFirst: [:a | a < 3].			"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum array elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)].  "sum array elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum array elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in array"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.								"randomly shuffle collection"
y _ x asArray.									"convert to array"
y _ x asByteArray.							"convert to byte array"
y _ x asWordArray.							"convert to word array"
y _ x asOrderedCollection.					"convert to ordered collection"
y _ x asSortedCollection.					"convert to sorted collection"
y _ x asBag.									"convert to bag collection"
y _ x asSet.									"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:09:56'!
assignment
	"Assignment"
	^
'| x y z |
"either the Cuis or the ASCII convention can be used for assignment"
x _ 4.								"assignment (Cuis) using the underline character ($_)"
z := 7.								"assignment (ASCII)"
x _ y _ z _ 6.						"compound assignment"
x _ (y _ 6) + 1.
x _ Object new.					"bind to an allocated instance of a class"
x _ 123 class.						"discover the class of the object"
x _ Integer superclass.			"discover the superclass of a class"
x _ Object allInstances.		"get an array of all instances of a class"
x _ Integer allSuperclasses.	"get all superclasses of a class"
x _ 1.2 hash.						"hash value for object"
y _ x copy.							"copy the object"
y _ x shallowCopy.				"copy the object (not overridden)"
y _ x veryDeepCopy.				"complete tree copy using a dictionary"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 6/7/2015 12:37'!
association
	"Associations"
	^
'| x y |
x _ #myVar->''hello''.		"Create an association"
y _ x key.
y _ x value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:11:33'!
bag
	"Bags"
	^
'| b x y sum max |
x _ Bag with: 4 with: 3 with: 2 with: 1.	"create a Bag collection with 4 elements"
x _ Bag new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection; see NOTE"
x add: 3 withOccurrences: 2.					"add multiple copies to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements; see NOTE"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements; see NOTE"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
b _ x includes: 3.								"test if element is in collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

"NOTE: methods in subclasses of Collection, of which Bag is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #addAll: and #removeAll:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 9/5/2015 20:34'!
bitwise
	"Bitwise Manipulation"
	^
'| b x |
x _ 16rFF bitAnd: 16r0F.			"and bits"
x _ 16rF0 bitOr: 16r0F.				"or bits"
x _ 16rFF bitXor: 16r0F.			"xor bits"
x _ 16rFF bitInvert.					"invert bits"
x _ 16r0F bitShift: 4.				"left shift"
x _ 16rF0 bitShift: -4.				"right shift"
x _ 16r80 bitAt: 8.					"bit at position (0|1)"
x _ 16r80 highBit.					"position of highest bit set"
b _ 16rFF allMask: 16r0F.			"test if all bits set in mask are set in receiver"
b _ 16rFF anyMask: 16r0F.			"test if any bits set in mask are set in receiver"
b _ 16rFF noMask: 16r0F.			"test if all bits set in mask are clear in receiver"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:17:04'!
block
	"Blocks"
	^
'"
	Blocks:
		- blocks are objects and may be assigned to a variable
		- value is last expression evaluated unless explicit return
		- blocks may be nested
		- specification [ arguments | | localvars | expressions ]	
		- ^expression terminates block & method (exits all nested blocks)
		- blocks intended for long term storage should not contain ^
"
| x y z fac |
x _ [ y _ 1. z _ 2. ]. x value.					"simple block usage"
x _ [ :argOne :argTwo |   argOne, '' and '' , argTwo.].     "set up block with argument passing"
Transcript show: (x value: ''First'' value: ''Second''); newLine.  "use block with argument passing"
x _ [:e | | v | v _ 1. e + v] value: 2.		"localvar in a block"
fac _ [ :n | n > 1 ifTrue:  [n * (fac value: n-1)] ifFalse: [1]].  "closure on block variable"
fac value: 5.											"closure variable scoped to its block"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:19:28'!
boolean
	"Booleans"
	^
'| b x y |
x _ 1. y _ 2.
b _ (x = y).							"equals"
b _ (x ~= y).							"not equals"
b _ (x == y).							"identical"
b _ (x ~~ y).							"not identical"
b _ (x > y).							"greater than"
b _ (x < y).							"less than"
b _ (x >= y).							"greater than or equal"
b _ (x <= y).							"less than or equal"
b _ b not.								"boolean not"
b _ (x < 5) & (y > 1).				"boolean and"
b _ (x < 5) | (y > 1).				"boolean or"
b _ (x < 5) and: [y > 1].			"boolean and (short-circuit)"
b _ (x < 5) or: [y > 1].			"boolean or (short-circuit)"
b _ (x < 5) eqv: (y > 1).			"test if both true or both false"
b _ (x < 5) xor: (y > 1).			"test if one true and other false"
b _ 5 between: 3 and: 12.			"between (inclusive)"
b _ 123 isKindOf: Number.			"test if object is class or subclass of"
b _ 123 isMemberOf: SmallInteger.	"test if object is type of class"
b _ 123 respondsTo: #sqrt.			"test if object responds to message"
b _ x isNil.							"test if object is nil"
b _ x isZero.							"test if number is zero"
b _ x positive.						"test if number is positive"
b _ x strictlyPositive.				"test if number is greater than zero"
b _ x negative.						"test if number is negative"
b _ x even.								"test if number is even"
b _ x odd.								"test if number is odd"
b _ x isLiteral.						"test if literal constant"
b _ x isInteger.						"test if object is integer"
b _ x isFloat.							"test if object is float"
b _ x isNumber.						"test if object is number"
b _ x isSymbol.						"test if object is a Symbol"
b _ $A isUppercase.					"test if upper case character"
b _ $A isLowercase.					"test if lower case character"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/19/2016 20:44'!
canvas
	"Canvas"
	^
'| x y |

"
	There is no Canvas class.
	
	A canvas is produced by sending #getCanvas to a Form.
"

x _ Form extent: 200@100 depth: 32.	"Answer a form with color depth 32"

y _ x getCanvas.							"convert form to canvas (a BitBltCanvas)"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:20:26'!
character
	"Character"
	^
'| x y b |
x _ $A.										"character assignment"
y _ x isLowercase.						"test if lower case"
y _ x isUppercase.						"test if upper case"
y _ x isLetter.							"test if letter"
y _ x isDigit.								"test if digit"
y _ x isAlphaNumeric.					"test if alphanumeric"
y _ x isSeparator.						"test if seperator char"
y _ x isVowel.								"test if vowel"
y _ x digitValue.							"convert to numeric digit value"
y _ x asLowercase.						"convert to lower case"
y _ x asUppercase.						"convert to upper case"
y _ x asciiValue.							"convert to numeric ascii value"
y _ x asString.							"convert to string"
b _ $A <= $B.								"comparison"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/9/2019 11:52:37'!
coding
	"Code Patterns"
	^
'"
These are Cuis code patterns intended to help the programmer exploit some of the features of Cuis classes. The examples separate the model from the view and feature two styles: coupled and decoupled.

The coupled style employs the ''dependency mechanism'' and requires the model to change when the view changes and when views which use the model are added. The primary methods of the dependency mechanism are #changed: and #update: .

The decoupled style employs the ''observer pattern'' which ensures that the model can remain unaffected by changes to the view or by additional views. The primary methods of the observer pattern are #triggerEvent: and #when:send:to: . This is the preferred style for Cuis, although both styles can be found in the base.
"
| b n |

"To examine the patterns, in the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/Cuis-Smalltalk/CodeExamples''
	
then, do the following:	
"
Feature require: #''Code-Patterns''.				"load the package"

"To browse the examples, do (Cmd-d) these statements..."

b _ BrowserWindow openBrowser.					"open a browser"
n _ b model systemCategoryList findFirst: [:a | a = #''Code-Patterns''].  "index to the above package"
b model systemCategoryListIndex: n.				"go to the system category"

"The following statements execute the examples..."

DependencyExamples relatedViews. 				"a decoupled example"
DependencyExamples unrelatedViews. 				"another decoupled example"
DependencyExamples coupledView. 					"a coupled example"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 14:38:36'!
colors
	"Colors"
	^
'
| x t arr |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

x _ (Color r: 0 g: 0 b: 0) name.		"answer the name of the color, if possible"
x _ (Color r: 1.0 g: 1.0 b: 1.0) name.

arr _ #((0.0 0.0 0.0) (0.0 0.0 1.0) (0.0 1.0 0.0) (0.0 1.0 1.0) (1.0 0.0 0.0) (1.0 0.0 1.0) (1.0 1.0 0.0) (1.0 1.0 1.0)).
(arr collect: [:a | Color colorFrom: a]) explore.

"In the parent directory which contains Cuis-Smalltalk-Dev* do the following:
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-ColorEditor''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-NamedColors''
	''git clone https://github.com/KenDickey/Cuis-Smalltalk-Morphic-Misc1''

then, do the following:
"
Feature require: #''Morphic-ColorEditor''.	"load the ColorEditor feature and its dependencies"

"From the menu ''World>New morph...>ColorEditor'' select ColorEditorPanel or ColorPallet"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:27:14'!
conditionalStatement
	"Conditional Statements"
	^
'| x switch result |
x _ 11.
x > 10 ifTrue: [Transcript show: ''ifTrue''; newLine].		"if then"
x > 10 ifFalse: [Transcript show: ''ifFalse''; newLine].	"if else"
x > 10										"if then else"
   ifTrue: [Transcript show: ''ifTrue''; newLine]
   ifFalse: [Transcript show: ''ifFalse''; newLine].
x > 10										"if else then"
   ifFalse: [Transcript show: ''ifFalse''; newLine]
   ifTrue: [Transcript show: ''ifTrue''; newLine].
Transcript
   show:
      (x > 10
         ifTrue: [''ifTrue'']
         ifFalse: [''ifFalse'']);
   newLine.
Transcript																"nested if then else"
   show:
      (x > 10
         ifTrue: [x > 5
            ifTrue: [''A'']
            ifFalse: [''B'']]
         ifFalse: [''C'']);
   newLine.
switch _ Dictionary new.											"switch (case) functionality"
switch at: $A put: [Transcript show: ''Case A''; newLine].
switch at: $B put: [Transcript show: ''Case B''; newLine].
switch at: $C put: [Transcript show: ''Case C''; newLine].
result _ (switch at: $B) value.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:33:43'!
conversion
	"Conversion"
	^
'| x |
x _ 3.99 asInteger.			"convert number to integer (truncates in Cuis)"
x _ 3.99 asFraction.			"convert number to fraction"
x _ 3 asFloat.					"convert number to float"
x _ 65 asCharacter.			"convert integer to character"
x _ $A asciiValue.			"convert character to integer"
x _ 3.99 printString.		"convert object to string via printOn:"
x _ 3.99 storeString.		"convert object to string via storeOn:"
x _ 15 printStringBase: 16.
x _ 15 storeStringBase: 16.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'RNG 12/13/2019 13:07:13'!
customBrowsers
	"Custom Browsers"
	^
'"Open a window with all methods from a particular category"
Smalltalk 
	browseMessageList: (Smalltalk allMethodsInCategory: ''testing'')
	name: ''Testing methods''
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:38:28'!
date
	"Date"
	^
'| w x y b block str fmt |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Date today.								"create date for today"
w _ Date dateAndTimeNow.					"create array with current date and time"
x _ Date newDay: 12 month: #July year: 1999.	"create date from parts"
x _ Date fromDays: 36002.					"create date from elapsed days since 1/1/1901"
y _ Date dayOfWeek: #Monday.				"day of week as int (1-7)"
y _ Date indexOfMonth: #August.			"month of year as int (1-12)"
y _ Date daysInMonth: 2 forYear: 1996.	"day of month as int (1-31)"
y _ Date daysInYear: 1996.					"days in year (365|366)"
y _ Date nameOfDay: 1.						"weekday name (#Monday,...)"
y _ Date nameOfMonth: 3.					"month name (#January,...)"
y _ Date leapYear: 1997.					"1 if leap year; 0 if not leap year"
y _ x weekday.									"day of week (#Monday,...)"
y _ x previous: #Monday.					"date for previous day of week (one week ago)"
y _ x dayOfMonth.								"day of month (1-31)"
y _ x firstDayOfMonth.						"day of year for first day of month"
y _ x monthName.								"month of year (#January,...)"
y _ x monthIndex.								"month of year (1-12)"
y _ x daysInMonth.							"days in month (1-31)"
y _ x year.										"year (19xx)"
y _ x daysInYear.								"days in year (365|366)"
y _ x daysLeftInYear.						"days left in year (364|365)"
y _ x printFormat: #(2 1 3 $/ 1 1).		"print formatted date"
b _ (x < Date today).						"comparison"
y _ x julianDayNumber.
y _ x mmddyyyy.	"Answer the receiver rendered in standard fmt mm/dd/yyyy. Note that the name #mmddyyyy is slightly misleading -- the month and day numbers don''t show leading zeros, so that for example feb 1 1996 is 2/1/96"
y _ x month.
y _ x monthAbbreviation.
y _ x monthIndex.
y _ x monthName.
fmt _ #(1 2 3 $  3 1 ).		"Specify a format for the date, in the following scheme:"
									"#(item item item sep monthfmt yearfmt twoDigits) 
									items: 1=day 2=month 3=year will appear in the order given, 
									separated by sep which is either an ascii code or character. 
									monthFmt: 1=09 2=Sep 3=September 
									yearFmt: 1=1996 2=96 
									digits: (missing or)1=9 2=09. 
									See the examples in printOn: and mmddyy"
y _ x printFormat: fmt.	 	"Answer a String describing the receiver using the format denoted by the argument, fmt"
str _ ReadWriteStream on: String new.	"Specify a stream"
y _ x printOn: str.

str _ String new writeStream.	
y _ x printOn: str format: #(3 2 1 $.  1 2 ).  "the stream, not the receiver, contains the date in the specified format"
str contents.

y _ x secondsSinceSqueakEpoch.	"Answer the seconds since the Squeak epoch: 1 January 1901"
y _ x storeOn: str.
y _ x week.
y _ x weekday. 			"Answer the name of the day of the week on which the receiver falls."
y _ x weekdayIndex. 		"Sunday=1, ... , Saturday=7"
y _ x year.
y _ x yearNumber.
y _ x yyyymmdd. 			"Format the date in ISO 8601 standard like ''2002-10-22''."
block _ [ :d :m :y | {d. m. y} ].  "Specify an order for the date"
y _ x dayMonthYearDo: block. "Supply integers for day, month and year to aBlock and return the result"
y _ x dayMonthYearDo: [ :d :m :y | {y. m. d.} ].  "Order determined by block, not method name"
y _ x dayOfMonth. 		"Answer the day of the month represented by the receiver."
y _ x dayOfWeek. 			"Answer the day of the week represented by the receiver."
y _ x dayOfWeekName. 	"Answer the day of the week represented by the receiver."
y _ x dayOfYear.			"Answer the day of the year represented by the receiver."
y _ x daysInMonth.		"Answer the number of days in the month represented by the receiver."
y _ x daysInYear.			"Answer the number of days in the year represented by the receiver."
y _ x daysLeftInYear.
y _ x firstDayOfMonth.
y _ x isLeapYear.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 4/12/2019 14:50:40'!
debugging
	"Debugging"
	^
'| a b x |
	"Some statements in this topic are designed to cause an error."
x _ Object new.
x yourself.									"returns receiver"
x inspect.									"open object inspector window"
x confirm: ''Is this correct?''.
x halt.										"breakpoint to open debugger window"
x halt: ''Halt message''.
x notify: ''Notify text''.
x error: ''Error string''.				"open up error window with title"
Smalltalk beep.
x shouldNotImplement.					"flag message should not be implemented"
x subclassResponsibility.				"flag message as abstract"
x errorImproperStore.					"flag an improper store into indexable object"
x errorNonIntegerIndex.					"flag only integers should be used as index"
x errorSubscriptBounds: 13.			"flag subscript out of bounds"
x primitiveFailed.						"system primitive failed"

a _ ''A1''. b _ ''B2''. a become: b.		"switch two objects, if neither is a SmallInteger"
Transcript show: a, b; newLine.

"Doing ''self halt.'' in Morphic code can be risky, because it can open an infinite sequence of debuggers."
{2. x. a.} print. 						"alternative to ''self halt.''"
thisContext printStack: 10.			"alternative to ''self halt.'' showing n lines of the call stack"

x doesNotUnderstand: (Message selector: #foo).  "flag that the message is not handled"

"Writing to-do notes to yourself can be done as follows:"
self flag: #someSymbol  "a reminder comment"
"...where you choose #someSymbol to be something you will not forget (your initials?)."
"Then, to retrieve all such messages, browse senders of #someSymbol using Cmd-n or the SmalltalkEditor menu."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:52:18'!
dictionary
	"Dictionary"
	^
'"	
	Dictionary:
	IdentityDictionary:   uses identity test (== rather than =)
"
| b x y sum max aDx |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Dictionary new.							"allocate collection"
x add: #a->4; add: #b->3; add: #c->1; add: #d->2; yourself.	"add element to collection"
x at: #e put: 3.								"set element at index; see NOTE"
b _ x isEmpty.									"test if empty"
y _ x size.										"number of elements"
y _ x at: #a ifAbsent: [].					"retrieve value for key #a"
y _ x keyAtValue: 3 ifAbsent: [].		"retrieve key for given value with error block"
y _ x removeKey: #e ifAbsent: [].		"remove element from collection"
b _ x includes: 3.							"test if element is in values collection"
b _ x includesKey: #a.						"test if element is in keys collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
y _ x keys.										"set of keys"
y _ x values.									"bag of values"
x do: [:a | Transcript show: a printString; newLine].  "iterate over the values collection"
x keysDo: [:a | Transcript show: a printString; newLine].  "iterate over the keys collection"
x associationsDo: [:a | Transcript show: a printString; newLine].  "iterate over the associations"
x keysAndValuesDo: [:aKey :aValue | Transcript	"iterate over keys and values"
   show: aKey printString; space;
   show: aValue printString; newLine].
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].  "test if all elements meet condition"
y _ x select: [:a | a > 2].				"return a dictionary with values that pass test"
y _ x reject: [:a | a < 2].				"return a dictionary with values that fail test"
y _ x collect: [:a | a + a].				"transform each element for new dictionary"
y _ x detect: [:a | a > 3] ifNone: [].	"return first value that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum the values"
sum _ x inject: 0 into: [:a :c | a + c].	"sum the values"
max _ x inject: 0 into: [:a :c | (a > c)	"find max value in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.									"collect values in an array"
y _ x asOrderedCollection.					"collect values in an ordered collection"
y _ x asSortedCollection.					"collect values in a sorted collection"
y _ x asBag.									"collect values in a bag"
y _ x asSet.									"collect values in a set"

Smalltalk at: #CuisGlobal put: ''Cuis entry''.	"put global in Smalltalk Dictionary"
x _ Smalltalk at: #CuisGlobal.					"read global from Smalltalk Dictionary"
Transcript show: (CuisGlobal printString).	"entries are directly accessible by name"
Smalltalk keys do: [ :k |						"print out all non-class globals"
   ((Smalltalk at: k) isKindOf: Class)
      ifFalse: [Transcript show: k printString; newLine]].
aDx _ Dictionary new.						"set up user defined dictionary"
aDx at: #MyVar1 put: ''hello1''.			"put entry in dictionary; see NOTE"
aDx add: #MyVar2->''hello2''.				"add entry to dictionary use key->value combo; see NOTE"
aDx size.		"dictionary size"
aDx keys do: [ :k |							"print out keys in dictionary"
   Transcript show: k printString; newLine].
aDx values do: [ :k |						"print out values in dictionary"
   Transcript show: k printString; newLine].
aDx keysAndValuesDo: [:aKey :aValue |	"print out keys and values"
   Transcript
      show: aKey printString;
      space;
      show: aValue printString;
      newLine].
aDx associationsDo: [:aKeyValue |		"another iterator for printing key values"
   Transcript show: aKeyValue printString; newLine].
Smalltalk removeKey: #CuisGlobal ifAbsent: [].  "remove entry from Smalltalk dictionary"

"NOTE: methods in subclasses of Collection, of which Dictionary is one, answer
 the ARGUMENT instead of the resulting collection. Examples of such 
 methods are #add: and #at:put:. Sending #yourself to the collection
 will answer the collection instead of the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/24/2015 14:38'!
dynamic
	"Dynamic Message Calling/Compiling"
	^
'| receiver message result argument keyword1 keyword2 argument1 argument2 |

"unary message"
receiver _ 5.
message _ ''factorial'' asSymbol.
result _ receiver perform: message.
result _ Compiler evaluate: ((receiver storeString), '' '', message).
result _ (Message new setSelector: message arguments: #()) sentTo: receiver.

"binary message"
receiver _ 1.
message _ ''+'' asSymbol.
argument _ 2.
result _ receiver perform: message withArguments: (Array with: argument).
result _ Compiler evaluate: ((receiver storeString), '' '', message, '' '', (argument storeString)).
result _ (Message new setSelector: message arguments: (Array with: argument)) sentTo: receiver.

"keyword messages"
receiver _ 12.
keyword1 _ ''between:'' asSymbol.
keyword2 _ ''and:'' asSymbol.
argument1 _ 10.
argument2 _ 20.
result _ receiver
   perform: (keyword1, keyword2) asSymbol
   withArguments: (Array with: argument1 with: argument2).
result _ Compiler evaluate:
   ((receiver storeString), '' '', keyword1, (argument1 storeString) , '' '', keyword2, (argument2 storeString)).
result _ (Message
   new
      setSelector: (keyword1, keyword2) asSymbol
      arguments: (Array with: argument1 with: argument2))
   sentTo: receiver.

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 12/7/2015 15:50'!
exceptions
	"Exceptions"
	^
'"
To see the variety of exceptions that can be useful in Cuis, open a hierarchy browser on Error.
"
| x y |

x _  1. y _ 0.
[x / y] on: ZeroDivide do: [^ ''that is big''].

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].	"avoid the exception for Cancel during the dialog"	

[''testFile.txt'' asFileEntry fileContents] on: FileDoesNotExistException do: [nil confirm: ''Rather do it yourself?''].	"avoid the file-does-not-exist dialog"	

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:15'!
feature
	"Features"
	^
'"Part of the Cuis strategy to keep a clean, small kernel is the separation of system features into smaller, more easily understood Packages.

The basic idea is that a Feature is implemented by the Package(s) it contains.

You can load Features in your code or by..."

Feature require: #''Feature-Name''.

"You can also use the File List window to install a feature which can be in any directory (World Menu -> Open-> File List). After selecting a feature, click on ''installPackage''.

A feature may depend on other features and particular versions of those features.  Cuis checks for dependencies and if all dependencies are satisfied will load packages in the proper order.

You can create your own packages and add/remove feature requirements using the Package Browser.  World Menu -> Open -> Installed Packages


There are many features for Cuis available at GitHub.

In a web browser, 
1. view https://github.com
2. type ''Cuis-Smalltalk'' in the search box
3. see the number of features available.

When you invoke:"

Feature require: #''Feature-Name''.

"Cuis will search for packages (*.pck.st) which supply the feature in...

1. the image directory and its subdirectories ''Packages'' and ''CompatibilityPackages'' 
2. siblings of the image directory whose names start with ''Cuis-Smalltalk*'' and their subdirectories named ''Packages'' and ''CompatibilityPackages''.
"

Smalltalk imagePath.		"Cuis image directory"


"Additional information is available on the web page:

''https://github.com/Cuis-Smalltalk/Cuis-Smalltalk-Dev/blob/master/Documentation/CuisAndGitHub.md''


For an example of specifying feature requirements, consider the package file ''Cuis-Smalltalk-Dev/Packages/Graphics-Files-Additional.pck.st'' which can be viewed with the File List browser. It provides feature ''Graphics-Files-Additional'' and requires Feature ''Compression''. If in code or in a Workspace you invoke (Cmd-d):"

Feature require: #''Graphics-Files-Additional''.

"...then the Compression package will be loaded, followed by Graphics-Files-Additional."


Feature require: #''Core-Packages''. 		"load all core Cuis Packages"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 16:59:23'!
fileMan
	"File Operations"
	^
'| b c file dirEntry fullPath |	"For efficient viewing, have a Transcript open and use Cmd-d on these statements"

DirectoryEntry roots.						"answer the drive or drives"
c _ DirectoryEntry currentDirectory.	"answer the current directory"
''testFile.txt'' asFileEntry fileContents: ''Test me now''.  "answer the directory and name of a new file; set its contents"
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry
	forceWriteStreamDo: [ :ios |			"overwrite old file contents"
		ios nextPut: $M.
		ios nextPutAll: ''y text ''.
		ios nextPutAll: ''data''.
		].
''testFile.txt'' asFileEntry fileContents.	"print contents of a file"

''testFile.txt'' asFileEntry appendStreamDo: [ :fileStream |
	fileStream newLine.
	fileStream nextPutAll: ''Second text line''; newLine.
	].
''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry appendContents: ''The quick red fox''.

''testFile.txt'' asFileEntry fileContents. 	"print it"

''testFile.txt'' asFileEntry forceWriteStreamDo: [ :fileStream |  "overwrite the file"
	| refStyream sharedPoint input |
	"Construct the test data."
	refStyream _ ReferenceStream on: fileStream.
	input _ Array new: 9.
	input at: 1 put: nil.
	input at: 2 put: true.
	input at: 3 put: false.
	input at: 4 put: #(-4 -4.0 ''four'' four).
	input at: 5 put: (Form extent: 63 @ 50 depth: 8).
	(input at: 5) fillWithColor: Color lightOrange.
	input at: 6 put: 1024 @ -2048.
	input at: 7 put: input.							"a cycle"
	input at: 8 put: (Array with: (sharedPoint _ 0 @ -30000)).
	input at: 9 put: sharedPoint.
	refStyream nextPut: input
	].
(''testFile.txt'' asFileEntry readStreamDo: [ :fileStream |
	(ReferenceStream on: fileStream) next.
	]) explore.

''testFile.txt'' asFileEntry delete.			"remove the test file"

b _ ''testFile.txt'' asFileEntry exists.		"test for existence of the file"

''testFile.txt'' asFileEntry fileContents.	"get the file-not-found dialog; note what Cancel does"

[''testFile.txt'' asFileEntry fileContents] on: MessageNotUnderstood do: [^ nil].  "avoid the exception for Cancel during the dialog"	

''testFile.txt'' asFileEntry assureExistence.	"put it back empty"

''testFile.txt'' asFileEntry fileContents. 		"print it"

''testFile.txt'' asFileEntry delete.				"remove the test file"

fullPath _ c pathName, ''\TestDir''.				"identify a directory"
FileIOAccessor new createDirectory: fullPath.	"create a directory"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"
FileIOAccessor new createDirectory: ''./\TestDir''.	"another way, using regex"
FileIOAccessor new deleteDirectory: fullPath.	"delete directory; must be empty"

"The following statements show one way to either create an empty file, or use the file as-is if it already exists"
c _ DirectoryEntry currentDirectory.				"answer the current directory"
dirEntry _ c pathName asDirectoryEntry / ''testFile.txt''.  "create a system-independent path expression"
fullPath _ dirEntry asString.							"convert path expression to string"
fullPath asFileEntry assureExistence.				"create testFile.txt if it does not exist"
fullPath asFileEntry assureExistence.				"do nothing if testFile.txt already exists"
''testFile.txt'' asFileEntry delete.					"remove the test file"

DirectoryEntry smalltalkImageDirectory.			"answer the Smalltalk image directory"
DirectoryEntry vmDirectory.							"answer the VM directory"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 6/11/2020 17:04:45'!
font
	"Fonts"
	^
'"
Cuis includes by default one StrikeFont, but can also use TrueType fonts.

To add additional included fonts
"

FontFamily readAdditionalTrueTypeFonts.

FontFamily familyNames.				"list the installed fonts"

((StringMorph contents: ''Text in the selected font.'') changeFont) openInHand. "look at an example"
"
The selection of currently installed fonts may be viewed from the text editor:

World > Open... > Text Editor
...then use (Cmd-k) to see a list of installed fonts.

To use any TrueTypeFont, just open the FileList, select any .ttf file, and click on [read font].
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:01:26'!
form
	"Forms"
	^
'| x y |
x _ Form dotOfSize: 20.	"Make a form containing a dot (as yet unseen)."
x displayAt: 500@200.	"Cause the form to appear at a point on the display."
Display restore.			"Erase what was displayed."

x _ Form extent: 22@18.
	"Answer a Form with a blank bitmap of depth 1."

x _ Form extent: 22@18 depth: 8.
	"Answer a Form with blank bitmap 22 pixels wide and 18 pixels deep having color depth 8."
	
y _ x getCanvas.			"convert form to canvas (a BitBltCanvas)"

EllipseMorph new drawOn: y; morphExtent: 300@200; openInWorld.
	"Display a morph on a canvas"

x _ Form fromUser.
	"Answer a Form with bitmap initialized from the area of the display screen designated by the user."

x _ Form toothpaste: 15.
	"Draw with mouse button down; terminate by option-click."

x _ Form 
		verticalGradient: 120
		topColor: Color white
		bottomColor: (Color gray: 0.65).
	"Answer a fixed-width form, 120 pixels high, which illustrates shading."

x fillColor: Color green.
	"Set all pixels in the receiver to green."

y _ x icon.
	"Answer a 16 x 16 icon of the receiver"

y _ x magnifyBy: 1.5. 
	"Answer a Form created as a scaling of the receiver. Scale may be a Float, and may be greater or less than 1.0."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:02:59'!
heap
	"Heap"
	^
'| x n sort |
x _ Heap new.						"Answer a heap of default size"
x _ Heap new: (n _ 7).			"Answer a heap of size n"
x _ Heap with: #purple with: #green.	"Answer a Heap with the two arguments as elements."
sort _ [:a :c | a > c].		"Define a sorting order"
x _ Heap withAll: #(11 32 19 21).	"Create a new heap with all the elements from a collection"
x sortBlock: sort.						"Specify how to sort the heap"
x _ Heap withAll: #(11 32 19 21) sortBlock: sort.	"Create a new heap sorted according to a sortBlock"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:59:02'!
internalStream
	"Internal  Streams"
	^
'| b x ios str |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
ios _ ReadStream on: ''Hello read stream''.
ios _ ReadStream on: ''Hello read stream'' from: 1 to: 5.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 3.
ios position.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

ios _ ReadWriteStream on: ''Hello read stream''.
ios _ ReadWriteStream on: String new.
ios _ ReadWriteStream on: ''Hello read stream'' from: 1 to: 5.
ios _ ReadWriteStream with: ''Hello read stream''.
ios _ ReadWriteStream with: ''Hello read stream'' from: 1 to: 10.
ios position: 0.
[(x _ ios nextLine) notNil]
   whileTrue: [Transcript show: x; newLine].
ios position: 6.
ios position.
ios nextPutAll: ''Chris''.
x _ ios next.
x _ ios peek.
x _ ios contents.
b _ ios atEnd.

str _ String new writeStream.				"use a stream to form a string"
str nextPutAll: ''As of ''.					"more efficient than concatenation"
str nextPutAll: Date today asString.
str nextPut: $,; space.						"newLine and tab are also possible"
str nextPutAll: Float pi printString, '' radians = ''.  "concatenation can be used"
str nextPutAll: Float pi radiansToDegrees printString.
str nextPutAll: '' degrees.''; newLine.  "complete the formation"
x _ str contents.								"to get the results"

x _ String streamContents: [:string |	"a more compact way"
	string 
		nextPutAll: ''As of '';
		nextPutAll: Date today asString;
		nextPut: $,; space;
		nextPutAll: Float twoPi printString, '' radians = '';  "concatenation can be used"
		nextPutAll: Float twoPi radiansToDegrees printString;
		nextPutAll: '' degrees.''; newLine].  "complete the formation"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:07:36'!
interval
	"Intervals"
	^
'| b x y sum max |
x _ Interval from: 5 to: 10.					"create interval object"
x _ 5 to: 10.
x _ Interval from: 5 to: 10 by: 2.			"create interval object with specified increment"
x _ 5 to: 10 by: 2.
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 9.										"test if element is in collection"
x do: [:k | Transcript show: k printString; newLine].	"iterate over interval"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 7].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a > 6].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 20:36:28'!
introduction
	"Using Terse Guide"
	^
'"
You are reading this in the text pane of the Terse Guide window. This pane is a kind of Workspace and is managed by the SmalltalkEditor of Cuis. This means that you can Do (Cmd-d) or Print (Cmd-p) statements in order to see the result. If you have a Transcript open, the result will appear in it.

The SmalltalkEditor enables you to Do or Print a statement when the cursor is in the statement. It is not necessary to first highlight the entire statement, unless it continues on more than one line.

This text pane is refreshed each time it is accessed. You can change the examples and run them without hurting anything. Go ahead and experiment!!

The Terse Guide does not attempt to provide the entire protocol of a topic. You are encouraged to explore further by using the Protocol Browser as follows:

Button 1>World>Open...>Browser 
then in the upper right pane:
Button 2>Message List>browse protocol

You can narrow the scope of protocol browsing by selecting a class in the upper left pane of the Protocol Browser.
"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:12:40'!
iterationStatement
	"Iterations"
	^
'| x y |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ 4. y _ 1.

#(5 4 3) do: [:a | x _ x + a].					"iterate over a sequenceable collection"
x.

[x > 0] whileTrue: [x _ x - 1. y _ y * 2].	"while true loop"
y.

[x >= 4] whileFalse: [x _ x + 1. y _ y * 2].	"while false loop"
y.

x timesRepeat: [y _ y * 2].						"times repeat loop (i _ 1 to x)"
y.

1 to: x do: [:a | y _ y * 2].						"for loop"
y.

1 to: x by: 2 do: [:a | y _ y / 2].				"for loop with specified increment"
y.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/2/2020 20:59:34'!
layoutMorph
	"Layout Morph"
	^
'| myLayout |
myLayout _ LayoutMorph new.		"this illustrates a mistake"

"A LayoutMorph places its submorphs in a horizontal Row or a vertical Column"
myLayout _ LayoutMorph newColumn.
myLayout _ LayoutMorph newRow color: Color cyan.
myLayout openInWorld.
myLayout morphExtent: (6 * myLayout morphExtent). "Make larger to hold submorphs"

myLayout addAllMorphs: { EllipseMorph initializedInstance. ImageMorph initializedInstance. BorderedRectMorph initializedInstance. }.

"When there is space left over, the submorphs can be shifted
 along the layout axis.  This is the axisEdgeWeight, a number from
 0 to 1, which can also be specified by a symbol."

myLayout axisEdgeWeight: #rowRight.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #rowLeft.

myLayout beColumn.
myLayout direction." #vertical "
myLayout axisEdgeWeight: #columnBottom.
myLayout axisEdgeWeight: #center.
myLayout axisEdgeWeight: #columnTop.

myLayout beRow.
myLayout direction. " #horizontal "

myLayout separation: 10@20. "set the amount of separation for submorphs"	
myLayout xSeparation.			"answer the x component of the specified separation"
myLayout ySeparation.			"answer the y component of the specified separation"
myLayout beColumn.

"Submorphs may also have a LayoutSpec to specify proportion and offAxis placement"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 6/3/2020 15:31:03'!
layoutSpec
	"Layout Specification"
	^
'| layout ellipse ellipseLayout image interiorLayout rect |
"A LayoutMorph places its submorphs along the layout axis.
 The submorphs may use a LayoutSpec to specify, for width and height,
 a fixed or porportional extent, a minimum extent, an offAxisEdgeWeight."

"Some Morphs to use"
ellipse _ EllipseMorph initializedInstance.
rect _ BorderedRectMorph initializedInstance.
image _ ImageMorph initializedInstance.
ellipseLayout _ (LayoutSpec proportionalWidth: 0.3 fixedHeight: 60 offAxisEdgeWeight: #rowTop).
ellipseLayout proportionalWidth: 0.5  minimum: 40.
ellipse layoutSpec: ellipseLayout.
rect layoutSpec: (LayoutSpec fixedWidth: 80 proportionalHeight: 0.6 offAxisEdgeWeight: #center).
"Layouts can contain layouts"
interiorLayout _ LayoutMorph newColumn.
interiorLayout separation: 10@20.
interiorLayout layoutSpec: (LayoutSpec proportionalWidth: 0.3 proportionalHeight: 60).
interiorLayout addMorph: EllipseMorph initializedInstance.
interiorLayout addAdjusterAndMorph: (RectangleLikeMorph new) proportionalWidth: 1.0.
"A LayoutMorph to contain them"
layout _ LayoutMorph newRow.
layout addAllMorphs: { ellipse. image. interiorLayout. rect. }.
layout openInWorld.
"Make it bigger"
layout morphExtent: (3 * layout morphExtent).
"Make it colorful"
interiorLayout color: Color cyan.
layout color: Color green lighter lighter.
"add handles; mouse grab lower-right yellow circle with tooltip Change Size."
layout addHalo.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'jmv 5/6/2020 11:14:41'!
literals
	"Literals"
	^
'"Literals are objects that are created when you compile a method. They are always available when the method is run, and the same instance is used each time. Remember that when a method is run, the source code, compiled to create it, is no longer used at all. This includes the source code for the literals. In the example below, the CompiledMethod will not have a string ''3.14'', but the Float object built after it.
Note: It is considered bad practice to later modify them, as they would no longer match their source code."
| b x |
b _ true.									"true pseudo-variable"
b _ false.									"false pseudo-variable"
x _ nil.										"nil object pseudo-variable"
x _ 1.										"SmallInteger literal"
x _ 3.14.									"Float literal"
x _ 2e-2.									"Fraction literal"
x _ 2.0e-2.									"Float literal"
x _ 7/8.										"Fraction literal"
x _ 16r0F.									"SmallInteger literal".
x _ 16rFFFFFFFF.							"LargePositiveInteger literal".
x _ 16rFFFFFFFF negated.				"LargeNegativeInteger literal".
x _ -1.										"negative SmallInteger literal"
x _ ''Hello''.								"String literal"
x _ ''I''''m here''.							"single quote escape"
x _ $A.										"Character literal"
x _ $ .										"Character literal (space)"
x _ #aSymbol.								"Symbol literal"
x _ #(3 2 1).								"Array literal"
x _ #(''abc'' 2 $a).						"mixing of types allowed (all literal)"
x _ #[3 2 1 0].							"ByteArray literal"
x _ #[1.0 3.141592 6.02e23].			"Float64Array literal"

x _ {''Hello'' size. Float pi. 1.0 arcTan }.    "Warning: NOT a literal. Created on each run"
x _ `{''Hello'' size. Float pi. 1.0 arcTan }`.  "Backtick syntax. Anything can be a literal!!"
x _ `{ 1. 3. 5. 7. 11. 13. 17} asSet`.          "A literal Set"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:49:15'!
metaclass
	"Class / Metaclass"
	^
'| b x |
x _ String name.							"class name"
x _ String category.						"organization category"
x _ String comment.						"class comment"
x _ String kindOfSubclass.				"subclass type - subclass: variableSubclass, etc"
x _ String definition.					"class definition"
x _ String instVarNames.				"immediate instance variable names"
x _ String allInstVarNames.			"accumulated instance variable names"
x _ String classVarNames.				"immediate class variable names"
x _ String allClassVarNames.			"accumulated class variable names"
x _ String sharedPools.					"immediate dictionaries used as shared pools"
x _ String allSharedPools.				"accumulated dictionaries used as shared pools"
x _ String selectors.					"message selectors for class"
x _ String sourceCodeAt: #indexOf:.	"source code for specified method"
x _ String allInstances.				"collection of all instances of class"
x _ String superclass.					"immediate superclass"
x _ String allSuperclasses.			"accumulated superclasses"
x _ String withAllSuperclasses.		"receiver class and accumulated superclasses"
x _ String subclasses.					"immediate subclasses"
x _ String allSubclasses.				"accumulated subclasses"
x _ String withAllSubclasses.			"receiver class and accumulated subclasses"
b _ String instSize.						"number of named instance variables"
b _ String isFixed.						"true if no indexed instance variables"
b _ String isVariable.					"true if has indexed instance variables"
b _ String isPointers.					"true if index instance vars contain objects"
b _ String isBits.						"true if index instance vars contain bytes/words"
b _ String isBytes.						"true if index instance vars contain bytes"
b _ String isWords.						"true if index instance vars contain words"
Object withAllSubclasses size.		"get total number of class entries"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'KenD 5/1/2020 16:49:17'!
methodCall
	"Method Calls"
	^
'"
	Method calls:
		- unary methods are messages with no arguments	
		- binary methods
		- keyword methods are messages with selectors including colons
 
	standard categories/protocols:
		- initialize-release    (methods called for new instance)
		- accessing             (get/set methods)
		- testing               (boolean tests - is)
		- comparing             (boolean tests with parameter
		- displaying            (gui related methods)
		- printing              (methods for printing)
		- updating              (receive notification of changes)
		- private               (methods private to class)
		- instance-creation     (class methods for creating instance)
"
| x |
x _ 2 sqrt.									"unary message"
x _ 2 raisedTo: 10.						"keyword message"
x _ 194 * 9.								"binary message"
Transcript show: (194 * 9) printString; newLine.	"combination (chaining)"
x _ 2 perform: #sqrt.					"indirect method invocation"
Transcript									"cascading ; send multiple messages to first receiver"
   show: ''hello '' ;
   show: ''world'' ;
   newLine.
"Without semicolon cascading"
x := RectangleLikeMorph new.
x color: Color yellow.
x openInWorld.
"Using semicolon cascade -- we don''t need the variable, x"
RectangleLikeMorph new
	color: Color yellow; 
	openInWorld.
3 + 2; * 100.							"result=300. Sends message to same receiver (3)"
"Parentheses are used for grouping.  In many cases parentheses can be replaced by ::"
3 squared ; + 5.  " 8 -- semicolon -> cascade to _original_ receiver (3)"
(3 squared) + 5. " 14 -- use parens to group"
3 squared :: + 5. " 14 -- same but double-colon -> cascade to _result_ of expression at left (9)"
"The double colon is useful in eliding parens from complex keyword expressions"
(3 squared between: 2 squared and: 4 squared) ifTrue: [ #Great ] ifFalse: [ #Oops ].
3 squared between: 2 squared and: 4 squared :: ifTrue: [ #Great ] ifFalse: [ #Oops ].

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/5/2015 11:34'!
misc
	"Miscellaneous"
	^
'| x |
Smalltalk condenseChanges.					"compress the change file"
x _ FillInTheBlankMorph request: ''Prompt Me''.		"prompt user for input"
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:53:32'!
morph
	"Morphs"
	^
'| x y z w v |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Morph new.				"a new but invisible morph"
x openInWorld.				"make visible in upper left of screen"
x openInHand.				"make visible at cursor location"
								"drag with the left button; show halos with the middle button"
x name: #MyName.			"used in the halos"
x name: ''My Name''.		"alternative, allowing imbedded blanks"
x morphPosition: 100@65.	"set the morph location"
y _ FillInTheBlankMorph request: ''Please Enter Something''.	"prompt user for input"
Feature require: #''Morphic-Widgets-Extras''.	"ensure a requirement is available for the following plot"
x _ FunctionGraphMorph initializedInstance openInHand.	"example, plotting two functions"
x _ SystemWindow new openInWorld.	"open a window"
x setLabel: ''Label for It''.
y _ LayoutMorph example10.				"organizing several morphs"
x addMorph: y.								"place morphs in a SystemWindow"

z _ x submorphs at: 1 :: submorphs at: 1 :: submorphs at: 2 :: submorphs at: 2.  "select a deep submorph"
	"The ''::'' syntax avoids nested parentheses"
z name.						"name of the deep submorph"
w _ z owningWindow.		"answer the first enclosing morph that is a kind of Window"
w class.
v _ x findDeepSubmorphThat: [:m | m name = #G] ifAbsent: [nil].	"find the submorph named #F"
v == z.						"verify that v and z are identical"

LayoutMorph includeInNewMorphMenu.
	"Return true for all classes that can be instantiated from the menu"

y _ Morph initializedInstance openInHand.
	"Answer an instance of the receiver which in some sense is initialized.  In the case of Morphs, this will yield an instance that can be attached to the Hand after having received the same kind of basic initialization that would be obtained from an instance chosen from the ''new morph'' menu.
	Return nil if the receiver is reluctant for some reason to return such a thing"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:56:38'!
orderedCollection
	"Ordered Collections"
	^
'| b x y sum max |			"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ OrderedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ OrderedCollection new.						"allocate a collection"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5; yourself.					"add element at beginning of collection"
y _ x removeFirst;	yourself.				"remove first element in collection"
y _ x addLast: 6; yourself.					"add element at end of collection"
y _ x removeLast;	yourself.					"remove last element in collection"
y _ x addAll: #(7 8 9); yourself.			"add elements to the collection"
y _ x removeAll: #(1 8 7).						"remove elements from the collection and answer the removed elements"
x at: 2 put: 3; yourself.						"set element at index"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.										"retrieve element at index"
y _ x first.										"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 5.								"test if element is in collection"
y _ x copyFrom: 2 to: 3.						"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.						"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 2].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.  "sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x shuffled.									"randomly shuffle collection"
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:57:06'!
point
	"Point"
	^
'| x y |
x _ 200@100.									"obtain a new point"
y _ x x.											"x coordinate"
y _ x y.											"y coordinate"
x _ 200@100 negated.							"negates y"
x _ (200@100) negated.						"negates x and y"
x _ (-200@ -100) abs.						"absolute value of x and y"
x _ (200.5@100.5) rounded.					"round x and y"
x _ (200.5@100.5) truncated.				"truncate x and y"
x _ 200@100 + 100.							"add scale to both x and y"
x _ 200@100 - 100.							"subtract scale from both x and y"
x _ 200@100 * 2.								"multiply x and y by scale"
x _ 200@100 / 2.								"divide x and y by scale"
x _ 200@100 // 2.								"divide x and y by scale"
x _ 200@100 \\ 3.								"remainder of x and y by scale"
x _ 200@100 + (50@25).						"add points"
x _ 200@100 - (50@25).						"subtract points"
x _ 200@100 * (3@4).							"multiply points"
x _ 200@100 // (3@4).						"divide points"
x _ 200@100 max: 50@200.					"max x and y"
x _ 200@100 min: 50@200.					"min x and y"
x _ 20@5 dotProduct: 10@2.					"sum of product (x1*x2 + y1*y2)"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 8/10/2018 18:30:51'!
popUpMenu
	"PopUpMenu"
	^
'| x y b arr lin |
b _ PopUpMenu confirm: ''Are you hungry?''.
b _ PopUpMenu confirm: ''Reboot universe'' orCancel: [''Nevermind''].
b _ PopUpMenu 
		confirm: ''Are you hungry?''
		trueChoice: ''yes, I''''m famished''
		falseChoice: ''no, I just ate''.
PopUpMenu inform: ''I like Cuis''.
arr _ #(''Alpha'' ''Beta'' ''Gamma'' ''something else'').
x _ (PopUpMenu labelArray: arr) startUpWithCaption: ''Please pick one.''.
lin _ #(3).
x _ (PopUpMenu labelArray: arr lines: lin) 
	startUpWithCaption: nil 
	at: 450@200
	allowKeyboard: false.
y _ (PopUpMenu withCaption: ''Special'' chooseFrom: ''Alpha\Beta\Gamma\something else'').

x _ FillInTheBlankMorph request: ''Enter the (whatever)'' initialAnswer: ''the default''.
		"when it is not possible to pre-determine an answer"
		
"For potentially long menus, the following includes ''more...'' and ''start over...'' behavior"
x _ (PopUpMenu labels: (String streamContents: [:s | 1 to: 100 do: [:i | s print: i; newLine]])
		lines: (5 to: 100 by: 5)) startUpWithCaption: ''Long Menu Example''.		
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 3/1/2015 12:58'!
primitive
	"Primitive"
	^
'	"Some messages in the system are responded to primitively. A primitive   
	response is performed directly by the interpreter rather than by evaluating   
	expressions in a method. The methods for these messages indicate the   
	presence of a primitive response by including <primitive: xx> before the   
	first expression in the method.   
	  
	Primitives exist for several reasons. Certain basic or ''primitive'' 
	operations cannot be performed in any other way. Smalltalk without 
	primitives can move values from one variable to another, but cannot add two 
	SmallIntegers together. Many methods for arithmetic and comparison 
	between numbers are primitives. Some primitives allow Smalltalk to 
	communicate with I/O devices such as the disk, the display, and the keyboard. 
	Some primitives exist only to make the system run faster; each does the same 
	thing as a certain Smalltalk method, and its implementation as a primitive is 
	optional.  
	  
	When the Smalltalk interpreter begins to execute a method which specifies a 
	primitive response, it tries to perform the primitive action and to return a 
	result. If the routine in the interpreter for this primitive is successful, 
	it will return a value and the expressions in the method will not be evaluated. 
	If the primitive routine is not successful, the primitive ''fails'', and the 
	Smalltalk expressions in the method are executed instead. These 
	expressions are evaluated as though the primitive routine had not been 
	called.  
	  
	The Smalltalk code that is evaluated when a primitive fails usually 
	anticipates why that primitive might fail. If the primitive is optional, the 
	expressions in the method do exactly what the primitive would have done (See 
	Number @). If the primitive only works on certain classes of arguments, the 
	Smalltalk code tries to coerce the argument or appeals to a superclass to find 
	a more general way of doing the operation (see SmallInteger +). If the 
	primitive is never supposed to fail, the expressions signal an error (see 
	SmallInteger asFloat).  
	  
	Each method that specifies a primitive has a comment in it. If the primitive is 
	optional, the comment will say ''Optional''. An optional primitive that is not 
	implemented always fails, and the Smalltalk expressions do the work 
	instead.  
	 
	If a primitive is not optional, the comment will say, ''Essential''. Some 
	methods will have the comment, ''No Lookup''. See Object 
	howToModifyPrimitives for an explanation of special selectors which are 
	not looked up.  
	  
	For the primitives for +, -, *, and bitShift: in SmallInteger, and truncated 
	in Float, the primitive constructs and returns a 16-bit 
	LargePositiveInteger when the result warrants it. Returning 16-bit 
	LargePositiveIntegers from these primitives instead of failing is 
	optional in the same sense that the LargePositiveInteger arithmetic 
	primitives are optional. The comments in the SmallInteger primitives say, 
	''Fails if result is not a SmallInteger'', even though the implementor has the 
	option to construct a LargePositiveInteger. For further information on 
	primitives, see the ''Primitive Methods'' part of the chapter on the formal 
	specification of the interpreter in the Smalltalk book."'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:58:02'!
rectangle
	"Rectangle"
	^
'| x y b |
x _ Rectangle fromUser.	"Have the user designate the top left and bottom right corners of a rectangle."
y _ Form fromDisplay: x.	"Create a virtual bit map from the rectangle." 
y display.						"Show the rectangle at 0@0 on the display."
Display restore.				"Erase the rectangle."
		
b _ x containsPoint: 195@150.
y _ x encompass: 195@150.

y _ x expandBy: 20.
	"Answer a Rectangle that is outset from the receiver by a Rectangle, Point, or scalar."

y _ x extendBy: 55@77.
	"Answer a Rectangle with the same origin as the receiver, but whose corner is offset by a Rectangle, Point, or scalar."
	
y _ x extent.
	"Answer the receiver''s width @ the receiver''s height."

y _ x flippedBy: #vertical centerAt: 220@330. 
	"Answer a copy of the receiver flipped #vertical or #horizontal, about aPoint."

y _ x insetBy: 60. 
	"Answer a Rectangle that is inset from the receiver by delta. delta is a Rectangle, Point, or scalar."

y _ x insetOriginBy: 20 cornerBy: 20@60. 
	"Answer a Rectangle that is inset from the receiver by a given amount from the origin and corner."

y _ x left.
	"Answer the position of the receiver''s left vertical line."

y _ x left: 70.
	"Answer the receiver with it''s left side at the argument."
	
x _ Rectangle center: 40@50 extent: 200@150. 
	"Answer a rectangle whose center is at a point and whose width by height is a point.  "

x _ Rectangle encompassing: {(55@44). (33@22). (300@122)}.
	"Answer a rectangle which encompasses a list of points."

x _ Rectangle left: 65 right: 300 top: 120 bottom: 350. 
	"Answer a rectangle whose left, right, top, and bottom coordinates are determined by the arguments."

x _ Rectangle origin: 100@80 corner: 400@500. 
	"Answer a rectangle whose corners (top left and bottom right) are determined by the arguments."

x _ Rectangle origin: 100@80 extent: 300@200. 
	"Answer a rectangle whose top left corner is at a point and width by height is specified by a point."

x _ Rectangle originFromUser: 400@300.
	"Answer a rectangle that is determined by having the user designate the top left corner. The width and height are determined by the argument."

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 17:59:42'!
set
	"Sets"
	^
'| b x y sum max |
x _ Set with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ Set new.										"allocate collection"
x add: 4; add: 3; add: 1; add: 2; yourself.	"add element to collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 4 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
x includes: 4.										"test if element is in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:03:26'!
sortedCollection
	"Sorted Collections"
	^
'| b x y sum max |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ SortedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x _ SortedCollection new.						"allocate collection"
x _ SortedCollection sortBlock: [:a :c | a > c]."set sort criteria"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y _ x addFirst: 5.								"Error: Not Appropriate for a SortedCollection"
y _ x removeFirst.								"remove first element in collection"
y _ x addLast: 6.									"add element at end of collection"
y _ x removeLast.									"remove last element in collection"
y _ x addAll: #(7 8 9).							"add elements to the collection and answer the added elements"
x sortBlock: [:a :c | a > c].					"sort in descending order"
y _ x removeAll: #(7 8 9).						"remove elements from the collection and answer the removed elements"
y _ x remove: 5 ifAbsent: [].					"remove element from collection"
b _ x isEmpty.										"test if empty"
y _ x size.											"number of elements"
y _ x at: 2.											"retrieve element at index"
y _ x first.											"retrieve first element in collection"
y _ x last.											"retrieve last element in collection"
b _ x includes: 4.									"test if element is in collection"
y _ x copyFrom: 2 to: 3.							"subcollection"
y _ x indexOf: 3 ifAbsent: [0].				"first position of element within collection"
y _ x occurrencesOf: 3.							"number of times object in collection"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the collection"
b _ x allSatisfy: [:a | (a >= 1) & (a <= 4)].	"test if all elements meet condition"
y _ x select: [:a | a > 2].					"return collection of elements that pass test"
y _ x reject: [:a | a < 2].					"return collection of elements that fail test"
y _ x collect: [:a | a + a].					"transform each element for new collection"
y _ x detect: [:a | a > 3] ifNone: [].		"return first element that passes test"
y _ x findFirst: [:a | a < 3].				"find position of first element that passes test"
sum _ 0. x do: [:a | sum _ sum + a]. sum.	"sum elements"
sum _ 0. 1 to: (x size) do: [:a | sum _ sum + (x at: a)]. sum.	"sum elements"
sum _ x inject: 0 into: [:a :c | a + c].	"sum elements"
max _ x inject: 0 into: [:a :c | (a > c)	"find max element in collection"
   ifTrue: [a]
   ifFalse: [c]].
y _ x asArray.										"convert to array"
y _ x asOrderedCollection.						"convert to ordered collection"
y _ x asSortedCollection.						"convert to sorted collection"
y _ x asBag.										"convert to bag collection"
y _ x asSet.										"convert to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:05:11'!
string
	"Strings"
	^
'| b x y |
x _ ''This is a string''.						"string assignment"
x _ ''String'', ''Concatenation''.			"string concatenation"
b _ x isEmpty.									"test if string is empty"
y _ x size.										"string size"
y _ x at: 2.									"char at location"
y _ x copyFrom: 2 to: 4.					"substring"
y _ x indexOf: $a ifAbsent: [0].			"first position of character within string"
x _ String new: 4.							"allocate string object"
x													"set string elements"
   at: 1 put: $a;
   at: 2 put: $b;
   at: 3 put: $c;
   at: 4 put: $e;
   yourself.
x _ String with: $a with: $b with: $c with: $d.	"set up 4 elements at a time"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].				"return all elements that meet condition"

x _ String streamContents: [:str |		"using a stream to form a string"
	str 											"more efficient than concatenation"
		nextPutAll: ''This string'';
		nextPutAll: '' is formed today, '';
		nextPutAll: Date today asString;
		nextPutAll: '', without using concatenation.''].

y _ x asSymbol.								"convert string to symbol"
y _ x asArray.									"convert string to array"
x _ ''KAAPED'' asByteArray.					"convert string to byte array"
y _ x asOrderedCollection.					"convert string to ordered collection"
y _ x asSortedCollection.					"convert string to sorted collection"
y _ x asBag.									"convert string to bag collection"
y _ x asSet.									"convert string to set collection"
y _ ''world'' shuffled.						"randomly shuffle string"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:06:34'!
symbol
	"Symbols"
	^
'| b x y |
x _ #Hello.									"symbol assignment"
y _ #String , #Concatenation.			"symbol concatenation (result is string)"
b _ x isEmpty.								"test if symbol is empty"
y _ x size.									"string size"
y _ x at: 2.								"char at location"
y _ x copyFrom: 2 to: 4.				"substring"
y _ x indexOf: $e ifAbsent: [0].		"first position of character within string"
x do: [:a | Transcript show: a printString; newLine].	"iterate over the string"
b _ x allSatisfy: [:a | (a >= $a) & (a <= $z)].	"test if all elements meet condition"
y _ x select: [:a | a > $a].			"return all elements that meet condition"
y _ x asString.							"convert symbol to string"
y _ x asText.								"convert symbol to text"
y _ x asArray.								"convert symbol to array"
y _ x asOrderedCollection.				"convert symbol to ordered collection"
y _ x asSortedCollection.				"convert symbol to sorted collection"
y _ x asBag.								"convert symbol to bag collection"
y _ x asSet.								"convert symbol to set collection"

'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 5/11/2020 17:05:02'!
syntax
	"Syntax Notes"
	^
'"
	Statement form (basic binary):
		<receiver> <message selector> [<argument>]
		There are also unary and keyword forms.

	Allowable characters:
		- a-z
		- A-Z
		- 0-9
		- .+/\*~<=>@%|&?;:''#()[]{}_
		- blank, tab, cr, ff, lf

	Variables:
		- variables must be declared before use
		- shared vars must begin with uppercase
		- local vars must begin with lowercase
		- reserved names: nil, true, false, self, super, and Smalltalk

	Variable scope:
		- Global: defined in Dictionary Smalltalk and accessible by all objects in system
		- Special: (reserved) Smalltalk, super, self, true, false, & nil
		- Method Temporary: local to a method
		- Block Temporary: local to a block
		- Pool: variables in a Dictionary object
		- Method Parameters: automatic local vars created as a result of message call with params
		- Block Parameters: automatic local vars created as a result of value: message call	
		- Class: shared with all instances of one class & its subclasses
		- Class Instance: unique to each instance of a class
		- Instance Variables: unique to each instance

	Comments are enclosed in quotes
	Period (.) is the statement separator
	
	Expressions are evaluated left-to-right.
	Message precedence: unary, binary, then keyword.
	
	A message within parentheses is sent before any messages outside the parentheses.
	Expressions with parentheses can alternatively be written with ''::'' as in the following examples..."
	
BrowserWindow fullOnClass: Parser class selector: #chainExamplesDoubleColon.
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:07:25'!
time
	"Time"
	^
'| x y b d1 d2 w |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
x _ Time dateAndTimeNow.			"answer the current date and time"
x _ Time now.							"answer the current time"
b _ (555 factorial) > 1.			"expend some time"
y _ Time now - x.						"time difference"
b _ x < Time now.						"compare times"
b _ y = x.								"check if equal"
d1 _ Time now asDurationSinceMidnight.
d2 _ Time now asDurationSinceMidnight.
y _ x hhmm24.							"Return a string of the form 2154 (for 9:54 pm), of exactly 4 digits"
y _ x hour.								"answer the number of hours in the receiver"
y _ x hour12.
y _ x hour24.
y _ x meridianAbbreviation.		"answer ''AM'' or ''PM''"
y _ x minute.							"answer the number of minutes in the receiver"
y _ x nanoSecond.						"answer the number of nanoSeconds in the receiver"
y _ x print24.							"Return microseconds expressed in 24-hour format"
String streamContents: [:s | Time now print24: true on: s].	"Format is ''hh:mm:ss'' if true or ''h:mm:ss am'' if false"
y _ x printMinutes.						"Return as string ''hh:mm pm''  "
String streamContents: [:s | Time now printOn: s].
y _ x second.							"answer the number of seconds in the receiver"
String streamContents: [:s | Time now storeOn: s].
x _ Time millisecondsToRun: [		"timing facility"
   1 to: 1000 do: [:index | y _ 400 factorial * index]].

w _ Time localMillisecondClock.	"milliseconds since the Smalltalk epoch"
"The Smalltalk epoch began at 00:00 on the morning of January 1, 1901, in the local host time zone."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 10/6/2018 18:08:36'!
transcript
	"Transcript"
	^
'TranscriptWindow openTranscript.	"in case one is not open already"
Transcript clear.						"clear the transcript window"
Transcript show: ''Hello World''.	"output string in transcript window"
Transcript nextPutAll: ''Hello World''.	"output string in transcript window"
Transcript nextPut: $A.				"output character in transcript window"
Transcript space.						"output space character in transcript window"
Transcript tab.						"output tab character in transcript window"
Transcript newLine.					"linefeed"
''Hello'' printOn: Transcript.		"append print string into the window"
''Hello'' storeOn: Transcript.		"append store string into the window"
Transcript endEntry.					"flush the output buffer"

"NOTE: from the pop-up menu, you can open a snapshot of the transcript in a workspace window."
'! !
!TerseGuideHelp class methodsFor: 'pages' stamp: 'dhn 2/23/2016 12:21'!
trie
	"Trie"
	^
'| t |		"For efficient viewing, have a Transcript open and use Cmd-d on these statements"
t _ Trie new.
t add: ''car''.
t at: ''car'' put: Float pi.
t at: ''cat'' put: Date today.
t explore.
(t includesKey: ''car'') print.
(t includes: ''cat'') print.
t at: ''crow'' put: 7.
t forPrefix: ''c'' keysAndValuesDo: [:key :val | {key} print].
t forPrefix: ''ca'' keysAndValuesDo: [:key :val | {key} print].

t _ Trie new.
Smalltalk allImplementedMessages do: [ :s | t add: s ].
t explore.

'
! !
!TerseGuideHelp class methodsFor: 'displaying' stamp: 'dhn 11/14/2015 13:08'!
display: aSelector    
	"Open a Workspace on the text in aSelector"    
	| window |
	  
	window _ TerseGuideHelp new.    
	window 	actualContents: (self perform: aSelector).    
	window	openLabel: ('Terse Guide to ', (self class firstPrecodeCommentFor: aSelector))! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:33:41'!
additionalTopicTitles

	^ (self additionalTopics collect: [ :topic | topic title ]) asArray! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:34:27'!
additionalTopics
	"Topics that can be dynamically added by creating subclasses of TerseGuideTopic"

	^ TerseGuideTopic allSubclasses collect: [ :topicClass | topicClass new ]! !
!TerseGuideHelp class methodsFor: 'accessing' stamp: 'jmv 5/6/2020 11:11:26'!
pages
	"Answer the topics, in order, for the window list pane"
	^ #(
		'Introduction'
		'Syntax'
		'Transcript'
		'Assignment'
		'Literals'
		'Booleans'
		'Arithmetic'
		'Bit-Wise'
		'Conversion'
		'Blocks'
		'Exceptions'
		'Method Calls'
		'Conditional Statements'
		'Iterations'
		'Character'
		'Symbols'
		'Strings'
		'Fonts'
		'Arrays'
		'Ordered Collections'
		'Sorted Collections'
		'Bags'
		'Sets'
		'Intervals'
		'Associations'
		'Dictionary'
		'Trie'
		'Heap'
		'Internal Streams'
		'Coding'
		'File Operations'
		'Features'
		'Date'
		'Time'
		'Point'
		'Rectangle'
		'Forms'
		'Canvas'
		'Colors'
		'Morphs'
		'Layout Morph'
		'Layout Spec'
		'PopUpMenu'
		'Dynamic Messages'
		'Object'
		'Metaclass'
		'Debugging'
		'Miscellaneous'
		'Primitives'
		'Custom Browsers'
	) , self additionalTopicTitles! !
!TerseGuideWindow methodsFor: 'initialization' stamp: 'dhn 6/15/2016 19:03'!
buildMorphicWindow
	"Define the window layout for Terse Guide"
	| row |
	
	list1 _ (PluggableListMorph
				model: model
				listGetter: #topicList
				indexGetter: #topicListIndex
				indexSetter: #topicListIndex:
				mainView: self
				menuGetter: nil
				keystrokeAction: nil)
					name: 'Topic List'.
	textModelM _ TextModelMorph withModel: model.
	textModelM
		askBeforeDiscardingEdits: false;
		name: 'Work Space'.
	model when: #topicListIndex send: #update: to: list1 withArguments: #(#topicListIndex).
	row _ LayoutMorph newRow.
	row
		name: #Row;
		addMorph: list1 proportionalWidth: 0.2;
		addAdjusterAndMorph: textModelM proportionalWidth: 0.8.
	self layoutMorph
		addMorph: row.
	self setLabel: 'Terse Guide'! !
!TerseGuideWindow methodsFor: 'accessing' stamp: 'dhn 5/17/2016 21:21'!
textModelM
	"Answer the value of textModelM"

	^ textModelM! !
!TerseGuideWindow class methodsFor: 'instance creation' stamp: 'dhn 5/17/2016 21:21'!
openTerseGuide
"
	TerseGuideWindow openTerseGuide.
"
	| window help |

	(window _ TerseGuideWindow open: (help _ TerseGuideHelp new) label: 'Terse Guide')
		setWindowColor:  Theme current workspace.
	help textPane: window textModelM.
	help 
		contents: '';
		window: window! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:39'!
examples

	^ #()! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:37:27'!
script

	^ String streamContents: [ :stream |
		self examples do: [ :example |
			self append: example toScript: stream
		]
	]! !
!TerseGuideTopic methodsFor: 'accessing' stamp: 'RNG 7/15/2018 01:02:32'!
title

	self subclassResponsibility! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:22'!
append: example toScript: stream

	stream
		nextPutAll: (example at: #code);
		nextPutAll: '. ';
		nextPutAll: (self commentFor: example);
		newLine! !
!TerseGuideTopic methodsFor: 'private - script building' stamp: 'RNG 7/15/2018 01:38:32'!
commentFor: example

	^ '"' , (example at: #category) , ' - ' , (example at: #description) , '"'! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:27:29' prior: 50879223 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:28:51' prior: 50879332!
isEmpty
	^(chipsX isEmpty) and: (chipsO isEmpty)! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:30:15' prior: 50879228!
isBoardFull

	^(chipsX size + chipsO size) = 6! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:30:39' prior: 50879163!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:34:16'!
test06assertAfterOTurnGoesX
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:34:59' prior: 50879240!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:35:57'!
test07assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:36:47' prior: 50882339!
test07assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	newTerniLapilliGame putXAt: (2@1).
	
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:38:54' prior: 50879254!
putXAt: aPoint 
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:39:23'!
test03assertPlayerOCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !

!methodRemoval: TerniLapilliTest #test03assertPlayerCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 17:28:40'!
test03assertPlayerCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:09'!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:45' prior: 50882399!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:41:48' prior: 50882412!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:43:42' prior: 50882324!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:46:06' prior: 50882440!
putOAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:46:22' prior: 50882362!
putXAt: aPoint 
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:48:28'!
test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test06assertAfterGameIsOverThereIsAWinner stamp: 'DB 11/1/2020 17:28:40'!
test06assertAfterGameIsOverThereIsAWinner
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	
	self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver.!

!methodRemoval: TerniLapilliTest #test06assertAfterOTurnGoesX stamp: 'DB 11/1/2020 17:28:40'!
test06assertAfterOTurnGoesX
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:50:41'!
test04assertPlayerOCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!methodRemoval: TerniLapilliTest #test04assertPlayerCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 17:28:40'!
test04assertPlayerCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:50:54'!
test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:28:40'!
test05assertPlayerCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:51:26'!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."! !

!methodRemoval: TerniLapilliTest #test06assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 17:28:40'!
test06assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon .
	
	"self   should: [newTerniLapilliGame putOAt: (2@3).] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenGameIsOver."!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:51:35'!
test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:28:40'!
test09assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:55:38' prior: 50879219!
hasPlayerXWon
	^true
	
		! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:56:39' prior: 50882670!
hasPlayerXWon
	^true
	
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:57:29' prior: 50882595!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:57:58' prior: 50879215!
hasPlayerOWon
	^false! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:58:29'!
test09assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 20:58:41'!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test09assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 17:28:40'!
test09assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@3).
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:00:36' prior: 50882713!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:01:17' prior: 50882744!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:15'!
wonHorizontal: positions
	
	positions includesAllOf: #((0@2) (1@2) (2@2))
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:48' prior: 50882694!
hasPlayerOWon
	^self wonHorizontal: chipsO! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:18:54' prior: 50882674!
hasPlayerXWon
	^self wonHorizontal: chipsX
	
		! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:19:17' prior: 50882777!
wonHorizontal: positions
	
	positions includesAllOf: #((0@2) (1@2) (2@2))
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:20:11' prior: 50882679!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:21:56' prior: 50882799!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: newTerniLapilliGame hasPlayerXWon.
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:22:15' prior: 50882793!
wonHorizontal: positions
	
	positions includesAllOf: #((0@0) (0@1) (0@2))
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:23:09' prior: 50882815!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:24:00' prior: 50882830!
wonHorizontal: positions
	
	^positions includesAllOf: #((0@0) (0@1) (0@2))
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 10/29/2020 21:25:30' prior: 50882851!
wonHorizontal: positions
	
	^positions includesAllOf: #(0@0 0@1 0@2)
	
	
	! !

----SNAPSHOT----(1 November 2020 17:28:43) CuisUniversity-4384.image priorSource: 17384793!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 17:34:46'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 17:34:46'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 17:34:46'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:49:05'!
_test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #test09assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 17:49:05'!
test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:49:14'!
_test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test10assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 17:49:14'!
test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 17:49:21'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 17:49:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:55:11'!
test05CantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		! !

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 17:55:22'!
ERROR!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 17:55:22'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:55:41'!
errorInvalidMoveCantPutChipOutOfBound
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:57:45' prior: 50883022!
errorInvalidMoveCantPutChipOutOfBound
	^'You cant put chip out of bound' ! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 17:58:34'!
signalInvalidMoveCantPutChipOutOfBound
	self error: self errorInvalidMoveCantPutChipOutOfBound ! !

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 17:59:03'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 17:59:03'!
FAILURE!

1@1!

self x !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:05:12' prior: 50882470!
putXAt: aPoint 

	
	aPoint x < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint x > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
		
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:05:16'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:05:43'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:05:48'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:05:48'!
ERROR!

!testRun: #TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:05:48'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:05:48'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:06:14'!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:06:14'!
test05assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:06:27'!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!methodRemoval: TerniLapilliTest #test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:06:27'!
test06assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@3).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (2@3).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:06:32'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:06:32'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:07:03' prior: 50883109!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:06'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:06'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:07:15' prior: 50883193!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame putXAt: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:17'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:17'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:07:28' prior: 50883220!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame putXAt: (0@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:32'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:32'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:56'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:07:56'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:08:11'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:08:53' prior: 50883247!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:08:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:09:13' prior: 50883147!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:09:39' prior: 50883308!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut.! !

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:09:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:10:05'!
test08assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	newTerniLapilliGame putXAt: (2@1).
	
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .! !

!methodRemoval: TerniLapilliTest #test07assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:10:05'!
test07assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	newTerniLapilliGame putXAt: (2@1).
	
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn .!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:10:09'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:10:45'!
test09assertPlayerXCantPutChipOnAnOccupiedSl
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!methodRemoval: TerniLapilliTest #test08assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:10:45'!
test08assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:12:01'!
test09assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .! !

!methodRemoval: TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSl stamp: 'DB 11/1/2020 18:12:01'!
test09assertPlayerXCantPutChipOnAnOccupiedSl
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOnOccupiedSlot .!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:12:05'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:12:05'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:21:32'!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@0).

	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveMoreThanOnePositionAtATime.! !

!methodRemoval: TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:21:42'!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@0).

	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveMoreThanOnePositionAtATime.!

----SNAPSHOT----(1 November 2020 18:22:05) CuisUniversity-4384.image priorSource: 17638765!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:23:10'!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveMoreThanOnePositionAtATime.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:23:23' prior: 50883503!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@0).
	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveMoreThanOnePositionAtATime.! !

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:23:26'!
ERROR!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:23:26'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:23:51'!
errorCantMoveMoreThanOnePositionAtATime
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:24:56' prior: 50883548!
errorCantMoveMoreThanOnePositionAtATime
	^'You cant move more than one position at a time'.! !

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:24:59'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:26:03'!
signalInvalidMoveNotYourTurn

	self error: self errorCantMoveMoreThanOnePositionAtATime ! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:26:20'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:26:20'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:26:20'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:27:52'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:27:52'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:32:40'!
signalCantMoveMoreThanOnePositionAtATime

	self error: self errorCantMoveMoreThanOnePositionAtATime.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:35:55'!
move: aSourcePoint to: aDestinationPoint
	^self class signalCantMoveMoreThanOnePositionAtATime.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:35:58'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:35:58'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:42:58'!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (1@1) to: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:43:26'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:43:26'!
ERROR!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:43:26'!
ERROR!
!TerniLapilli class methodsFor: 'error handling' stamp: 'DB 11/1/2020 18:43:34' overrides: 16881409!
error: aString 
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:43:43'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:43:43'!
PASSED!

!methodRemoval: TerniLapilli class #error: stamp: 'DB 11/1/2020 18:43:58'!
error: aString 
	self shouldBeImplemented.!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:44:02'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:44:02'!
ERROR!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:44:02'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:44:53' prior: 50883664!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (1@1) to: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:44:57'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:44:57'!
ERROR!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:44:57'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:45:07'!
errorCantDoInvalidDiagonalMovement
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:45:33' prior: 50883842!
errorCantDoInvalidDiagonalMovement
	^'You cant do invalidad diagonal movement'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:46:12'!
signalCantDoInvalidDiagonalMovement

	self error: self errorCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 18:46:18'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:46:18'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 18:46:18'!
FAILURE!

1@1 - 2@2!

(1@1) - (2@2)!

(1@1) - (2@2)!

self abs !

self abs!

((1@1) - (2@0)) abs!

self // (1@1)!

(1@1) dist: (2@0) !

(0@0) dist: (2@0)!

(0@0) dist: (1@0)!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 18:58:16' prior: 50883622!
move: aSourcePoint to: aDestinationPoint
	
	(((0@0) dist: (1@0)) > 1) ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].


	
	
	^self class signalCantDoInvalidDiagonalMovement.! !

(0@1) dist: (1@0)!

(1@1) dist: (0@0)!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:01:46' prior: 50883908!
move: aSourcePoint to: aDestinationPoint
	
	(aSourcePoint x - aDestinationPoint x) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].


	
	
	^self class signalCantDoInvalidDiagonalMovement.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:02:07' prior: 50883919!
move: aSourcePoint to: aDestinationPoint
	
	(aSourcePoint x - aDestinationPoint x) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	(aSourcePoint y - aDestinationPoint y) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].


	
	
	^self class signalCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:02:13'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:02:21'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:04:27'!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (-1@1) to: (1@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOutOfBounds.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:05:36'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:05:36'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:05:36'!
ERROR!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:06:14'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:06:14'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:06:37'!
FAILURE!

----SNAPSHOT----(1 November 2020 19:06:59) CuisUniversity-4384.image priorSource: 17659159!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:07:09'!
FAILURE!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:07:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:07:51' prior: 50883929!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].


	
	
	^self class signalCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:07:55'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:07:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:07:59'!
ERROR!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:07:59'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:08:12'!
errorCantMoveOutOfBounds
	self shouldBeImplemented.! !

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:09:00'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:09:35' prior: 50884092!
errorCantMoveOutOfBounds
	^'You cant move out of bounds'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:09:46'!
signalCantMoveOutOfBounds

	self error: self errorCantMoveOutOfBounds.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:09:55'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:09:55'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:09:55'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:11:29' prior: 50883949!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (0@2) to: (1@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:11:36' prior: 50884157!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (0@2) to: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:12:05' prior: 50884175!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOutOfBounds.! !

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:12:09'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:12:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:15:38' prior: 50884030!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].

	aDestinationPoint x > 2 ifTrue: [^self class signalCantMoveOutOfBounds.].
	aDestinationPoint y > 2 ifTrue: [^self class signalCantMoveOutOfBounds.].
	aDestinationPoint x < 0 ifTrue: [^self class signalCantMoveOutOfBounds.].
	aDestinationPoint y < 0 ifTrue: [^self class signalCantMoveOutOfBounds.].
	
	
	
	
	^self class signalCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:15:40'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:15:43'!
PASSED!

----SNAPSHOT----(1 November 2020 19:16:24) CuisUniversity-4384.image priorSource: 17675784!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:17:24'!
test13OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveCantPutChipOutOfBound.
		! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:17:28'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:17:28'!
FAILURE!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:17:28'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:18:21' prior: 50882455!
putOAt: aPoint 
	
	
	aPoint x < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint x > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:18:29'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:18:29'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:19:53'!
assertInBounds: aPoint 
	
	aPoint x < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint x > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:20:30' prior: 50884430!
assertInBounds: aPoint 

	aPoint x < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y < 0 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint x > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	aPoint y > 2 ifTrue: [^self class signalInvalidMoveCantPutChipOutOfBound ].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:21:00' prior: 50884217!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	
	
	^self class signalCantDoInvalidDiagonalMovement.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:21:22' prior: 50884361!
putOAt: aPoint 
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	( (chipsX includes: aPoint ) or: (chipsO includes: aPoint)) ifTrue: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:21:45' prior: 50883047!
putXAt: aPoint 

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	((chipsX includes: aPoint )or: (chipsO includes: aPoint)) ifTrue: [^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:21:56'!
FAILURE!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:21:56'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:21:56'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:25:33'!
errorCantMoveOrPutChipOutOfBounds
	^'You cant move or put a chip out of bounds'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:26:20' prior: 50884553!
errorCantMoveOrPutChipOutOfBounds
	^'You cant move or put a chip out of bounds'
! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:26:36'!
signalCantMoveOrPutChipOutOfBounds

	self error: self 	errorCantMoveOrPutChipOutOfBounds.! !

!methodRemoval: TerniLapilli class #signalCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:26:58'!
signalCantMoveOutOfBounds

	self error: self errorCantMoveOutOfBounds.!

!methodRemoval: TerniLapilli class #errorCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:27:08'!
errorCantMoveOutOfBounds
	^'You cant move out of bounds'!

!methodRemoval: TerniLapilli class #signalInvalidMoveCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:27:27'!
signalInvalidMoveCantPutChipOutOfBound
	self error: self errorInvalidMoveCantPutChipOutOfBound !

!methodRemoval: TerniLapilli class #errorInvalidMoveCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:27:38'!
errorInvalidMoveCantPutChipOutOfBound
	^'You cant put chip out of bound' !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:27:42'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:27:42'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:27:42'!
ERROR!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:27:42'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:28:08' prior: 50882992!
test05CantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds .
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		! !

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:10'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:13'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:28:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:21'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:28:21'!
ERROR!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:21'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:28:25' prior: 50884193!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:28:27'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:28:27'!
FAILURE!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:27'!
ERROR!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:27'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:28:38' prior: 50884288!
test13OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:28:39'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:39'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:28:39'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:39'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:28:53'!
FAILURE!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:29:20'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:29:55' prior: 50884444!
assertInBounds: aPoint 

	aPoint x < 0 ifTrue: [^self class signalCantMoveOrPutChipOutOfBounds ].
	aPoint y < 0 ifTrue: [^self class signalCantMoveOrPutChipOutOfBounds ].
	aPoint x > 2 ifTrue: [^self class signalCantMoveOrPutChipOutOfBounds ].
	aPoint y > 2 ifTrue: [^self class signalCantMoveOrPutChipOutOfBounds ].
	! !

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:29:57'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:29:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:29:59'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:32:41' prior: 50884458!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	^self class signalCantDoInvalidDiagonalMovement.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:33:57' prior: 50884714!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:33:59' prior: 50884929!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:39:14'!
test12assertCantMoveAnEmptyPosition
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveAnEmptyPosition.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:41:26' prior: 50884965!
test12assertCantMoveAnEmptyPosition
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (1@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveAnEmptyPosition.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:41:33'!
ERROR!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:41:33'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:41:33'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:41:57'!
errorCantMoveAnEmptyPosition
	^'You cant move an empty position'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:42:07'!
signalCantMoveAnEmptyPosition

	self error: self errorCantMoveAnEmptyPosition.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:42:11'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:42:11'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:42:11'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:45:41' prior: 50884914!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].
	
	^self class signalCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:45:43'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:45:46'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:46:26'!
test14CantMoveIfIsNotYourTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:47:06' prior: 50885185!
test14CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:48:40' prior: 50885209!
test14CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:48:52' prior: 50885227!
test14CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:49:38' prior: 50879294!
errorInvalidMoveNotYourTurn

	^'It must be your turn to be able to move or put down a chip'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 19:50:03' prior: 50885245!
test14CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 19:50:07'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 19:50:07'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 19:50:07'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:14:17'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:14:18'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:14:18'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:14:18'!
FAILURE!

----SNAPSHOT----(1 November 2020 20:20:15) CuisUniversity-4384.image priorSource: 17684289!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:20:17' prior: 50885115!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	
	
	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].



"(1@2) no me puedo mover para (0@1) o (2@1)  "
"(2@1) no me puedo mover en la (1@2) o (1@0)  "


	
	^self class signalCantMoveAnEmptyPosition.
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:21:49' prior: 50885400!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	
	
	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].







	
	^self class signalCantMoveAnEmptyPosition.
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:24:27' prior: 50885448!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	
	
	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].


	
	^self class signalCantMoveAnEmptyPosition.
	
	! !

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:24:28'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:24:43'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:26:39'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:26:39'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:26:39'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:26:50' prior: 50883782!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	"(0@1) no me puedo mover para (1@0) o (1@2)"
	self   should: [newTerniLapilliGame move: (1@1) to: (1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:26:51'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:26:58'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:26:58'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:26:58'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:27:05'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:27:57'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:28:36' prior: 50885651!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	"(0@1) no me puedo mover para (1@0) o (1@2)"
	self   should: [newTerniLapilliGame move: (0@1) to: (1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantDoInvalidDiagonalMovement.! !

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:29:54'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:30:00'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:30:04'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:30:04'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:30:04'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:31:11'!
FAILURE!

----SNAPSHOT----(1 November 2020 20:31:33) CuisUniversity-4384.image priorSource: 17719865!

----SNAPSHOT----(1 November 2020 20:32:31) CuisUniversity-4384.image priorSource: 17733309!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:32:59'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:32:59'!
FAILURE!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:32:59'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:33:54' prior: 50883564!
signalInvalidMoveNotYourTurn

	self error: self errorInvalidMoveNotYourTurn ! !

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:33:56'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:33:59'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:33:59'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:36:45' prior: 50885496!
move: aSourcePoint to: aDestinationPoint
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:36:59'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:36:59'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:39:59'!
test15CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:40:24' prior: 50886041!
test15CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:40:46' prior: 50886056!
test15CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveIfNotAllChipHaveBeenPutDown.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:40:55'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:40:55'!
ERROR!

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:40:55'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:41:07'!
errorCantMoveIfNotAllChipHaveBeenPutDown
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:41:46' prior: 50886144!
errorCantMoveIfNotAllChipHaveBeenPutDown
	^'All 6 chips must have been put down before moving'! !

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:41:48'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:42:18'!
signalCantMoveIfNotAllChipHaveBeenPutDown

	self error: self errorCantMoveIfNotAllChipHaveBeenPutDown.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:42:23'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:42:23'!
FAILURE!

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:42:23'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:43:53' prior: 50885939!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:44:07'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:44:37' prior: 50882290!
isBoardFull

	^(chipsX size = 3) and: (chipsO size = 3)! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:44:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:45:14'!
test13assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.! !

!methodRemoval: TerniLapilliTest #test12assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:45:14'!
test12assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:45:30'!
test14OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		! !

!methodRemoval: TerniLapilliTest #test13OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:45:30'!
test13OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveOrPutChipOutOfBounds.
		!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:45:37'!
test15CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.! !

!methodRemoval: TerniLapilliTest #test14CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:45:37'!
test14CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:45:44'!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveIfNotAllChipHaveBeenPutDown.! !

!methodRemoval: TerniLapilliTest #test15CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:45:44'!
test15CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveIfNotAllChipHaveBeenPutDown.!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:45:57' prior: 50886225!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].


	
	
	
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:46:53' prior: 50886424!
test15CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorInvalidMoveNotYourTurn.
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:52:08'!
test16AfterSixPutsItIsXTurnToMove
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO 
	 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:53:27' prior: 50886559!
test16AfterSixPutsItIsXTurnToMove
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:54:20'!
test16InMovementPhaseXTurnThenItIsOTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilliTest #test16AfterSixPutsItIsXTurnToMove stamp: 'DB 11/1/2020 20:54:20'!
test16AfterSixPutsItIsXTurnToMove
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 20:54:25'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 20:54:25'!
FAILURE!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 20:54:25'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:56:30' prior: 50886489!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [currentTurn  = #O].

	currentTurn = #O ifTrue: [currentTurn  = #X].

	
	
	
	! !

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 20:56:37'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 20:58:17' prior: 50886696!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [currentTurn  = #O] ifFalse: [currentTurn  = #X].


	
	
	
	! !

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 20:58:19'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:00:09' prior: 50886756!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	(currentTurn = #X) ifTrue: [currentTurn  = #O] ifFalse: [currentTurn  = #X].


	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:00:25' prior: 50886815!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [currentTurn := #O] ifFalse: [currentTurn  := #X].


	
	
	
	! !

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:00:26'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:00:29'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:03:47'!
chipXIsInPosition: aPosition

	^chipsX includes: aPosition.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:03:56'!
chipOIsInPosition: aPosition

	^chipsO includes: aPosition.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:04:55'!
test17
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:06:50' prior: 50886998!
test17
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame emptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame emptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:06:56'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:06:56'!
FAILURE!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:06:56'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:09:00' prior: 50886871!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [
		self putXAt: aDestinationPoint ]
	 ifFalse: [
		self putOAt: aDestinationPoint ].


	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:10:11' prior: 50887109!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [
		self putXAt: aDestinationPoint.
		chipsX remove: aSourcePoint.
	]
	 ifFalse: [
		self putOAt: aDestinationPoint.
		chipsO remove: aSourcePoint.
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:10:14'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:11:20' prior: 50887166!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		self putXAt: aDestinationPoint.
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		self putOAt: aDestinationPoint.
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:11:24'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:11:24'!
ERROR!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:11:24'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:11:35'!
emptyPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:12:37' prior: 50887349!
emptyPosition: aPoint 
	^ ((chipsX includes: aPoint)  or: (chipsO includes: aPoint)) not
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:12:44' prior: 50887354!
emptyPosition: aPoint 
	^ ((chipsX includes: aPoint) or: (chipsO includes: aPoint)) not
! !

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:12:45'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:12:53'!
PASSED!

----SNAPSHOT----(1 November 2020 21:13:00) CuisUniversity-4384.image priorSource: 17733402!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:14:18'!
isAnEmptyPosition: aPoint 
	^ ((chipsX includes: aPoint) or: (chipsO includes: aPoint)) not
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:14:18' prior: 50887019!
test17
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilli #emptyPosition: stamp: 'DB 11/1/2020 21:14:18'!
emptyPosition: aPoint 
	^ ((chipsX includes: aPoint) or: (chipsO includes: aPoint)) not
!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:15:09' prior: 50884473!
putOAt: aPoint 
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:15:42' prior: 50884489!
putXAt: aPoint 

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:15:46'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:15:47'!
PASSED!

!testRun: #TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:15:47'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:16:02'!
test17InMovementPhaseXTurnThenItIsOTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilliTest #test16InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:16:02'!
test16InMovementPhaseXTurnThenItIsOTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:16:20' prior: 50887439!
test17
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:18:23'!
test17assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilliTest #test17 stamp: 'DB 11/1/2020 21:18:23'!
test17
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:18:34'!
test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilliTest #test17assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:18:35'!
test17assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: (newTerniLapilliGame chipXIsInPosition: (1@2)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (1@1)).
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: (newTerniLapilliGame chipOIsInPosition: (1@0)).
	self assert: (newTerniLapilliGame isAnEmptyPosition: (0@0)).
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:18:42'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:20:02'!
test19assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #_test09assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:20:02'!
_test09assertPlayerXWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:20:17'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:20:17'!
FAILURE!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:20:17'!
FAILURE!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:21:09'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:23:00' prior: 50882857!
wonHorizontal: positions
	
	^(positions includes: (0@0)) and: (positions includes: (0@1)) and: (positions includes: (0@2))
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:23:08'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:23:08'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:23:42'!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #_test10assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:23:42'!
_test10assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (3@1).
	newTerniLapilliGame putOAt: (2@3).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:23:45'!
ERROR!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:23:45'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:24:39' prior: 50887981!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (1@2).	
	
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:24:43'!
FAILURE!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:25:57'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:31:48'!
wonVertical: positions

	positions allSatisfy: [:aPosition | (aPosition y) = ((positions first) y)].
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:31:57' prior: 50888047!
wonVertical: positions

	^positions allSatisfy: [:aPosition | (aPosition y) = ((positions first) y)].
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:34:19' prior: 50887907!
wonHorizontal: positions
	
	^positions allSatisfy: [:aPosition | (aPosition y) = ((positions first) y)].
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:34:41' prior: 50888061!
wonHorizontal: positions
	
	^positions allSatisfy: [:aPosition | (aPosition x) = ((positions first) x)].
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:35:55'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:35:55'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:37:45'!
test21CantWinWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test21CantWinWithLessThanThreeChips stamp: 'DB 11/1/2020 21:37:48'!
FAILURE!

!testRun: #TerniLapilliTest #test21CantWinWithLessThanThreeChips stamp: 'DB 11/1/2020 21:37:48'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:38:39' prior: 50888068!
wonHorizontal: positions
	^(positions size = 3) and: (positions allSatisfy: [:aPosition | (aPosition x) = ((positions first) x)]).
	
	
	! !

!testRun: #TerniLapilliTest #test21CantWinWithLessThanThreeChips stamp: 'DB 11/1/2020 21:38:41'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:38:43'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:38:44'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinWithLessThanThreeChips stamp: 'DB 11/1/2020 21:38:44'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:39:08'!
test21CantWinHorizontalWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test21CantWinWithLessThanThreeChips stamp: 'DB 11/1/2020 21:39:08'!
test21CantWinWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:39:54'!
test19assertPlayerXWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:40:07'!
FAILURE!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:40:07'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:40:07'!
FAILURE!

!testRun: #TerniLapilliTest #test19assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:41:00'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:41:36' prior: 50882788!
hasPlayerXWon
	^(self wonHorizontal: chipsX) or: (self wonVertical: chipsX)
	
		! !

!testRun: #TerniLapilliTest #test19assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:41:37'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:41:50'!
test22assertPlayerXWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #test19assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:41:50'!
test19assertPlayerXWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:42:36'!
test22assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:42:48' prior: 50888414!
test22assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:42:56'!
test23assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test22assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:42:56'!
test22assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test22assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:43:00'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:43:00'!
FAILURE!

!testRun: #TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:43:00'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:43:39' prior: 50882783!
hasPlayerOWon
	^(self wonHorizontal: chipsO) or: (self wonVertical: chipsO)! !

!testRun: #TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:43:41'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:45:14'!
test21CantWinVerticalWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (1@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:45:40' prior: 50888572!
test21CantWinVerticalWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:45:45'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:45:46'!
FAILURE!

!testRun: #TerniLapilliTest #test22assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:45:46'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:45:46'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:46:33' prior: 50888054!
wonVertical: positions

	^(positions size = 3) and: (positions allSatisfy: [:aPosition | (aPosition y) = ((positions first) y)]).
	
	! !

!testRun: #TerniLapilliTest #test21CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:46:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:46:37'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test22assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:46:38'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:46:52'!
test24assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test23assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:46:52'!
test23assertPlayerOWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:47:01'!
test23assertPlayerXWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #test22assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:47:01'!
test22assertPlayerXWonVertically
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@0).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:47:08'!
test22CantWinVerticalWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!methodRemoval: TerniLapilliTest #test21CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:47:08'!
test21CantWinVerticalWithLessThanThreeChips
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@0).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (2@0).
	
	self deny: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	!

----SNAPSHOT----(1 November 2020 21:47:11) CuisUniversity-4384.image priorSource: 17784901!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:49:19'!
test25
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

----SNAPSHOT----(1 November 2020 21:49:24) CuisUniversity-4384.image priorSource: 17831088!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 21:49:39'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 21:49:39'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 21:49:39'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:51:39' prior: 50888375!
hasPlayerXWon
	^(self wonHorizontal: chipsX) or: (self wonVertical: chipsX) or: (self wonDiagonal: chipsX)
	
		! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 21:51:54'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:52:02'!
wonDiagonal: anOrderedCollection 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:55:33' prior: 50888991!
wonDiagonal: Positions
	^(self wonFallingDiagonal: Positions) or: (self wonUpwardsDiagonal: Positions ).! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 21:55:37'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 21:55:45'!
wonFallingDiagonal: anOrderedCollection 
	self shouldBeImplemented.! !

0 to: 2 do: [ :index | 
		' hola '	
	]!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:02:09' prior: 50889005!
wonFallingDiagonal: Positions

	
	
	| x y |
	x := 2.
	y := 0.
	0 to: 2 do: [ :index | 
		(x - index@y + index)	
	]
	 ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:02:31' prior: 50889012!
wonFallingDiagonal: Positions

	
	
	| x y |
	x := 2.
	y := 0.
	0 to: 2 do: [ :index | 
		(x - index)@(y + index)	
	]
	 ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:04:26' prior: 50889019!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection new.
	fallingDiagonal add: (2@0)
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:05:35' prior: 50889026!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection new.
	fallingDiagonal add: (2@0).
	fallingDiagonal add: (1@1).
	fallingDiagonal add: (0@2).
	
	^Positions includesAll: fallingDiagonal.
	! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:05:39'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:06:20' prior: 50889033!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection new.
	fallingDiagonal add: (2@0).
	fallingDiagonal add: (1@1).
	fallingDiagonal add: (0@2).
	
	^Positions includesAllOf: fallingDiagonal.
	! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:06:21'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:06:47'!
wonUpwardsDiagonal: anOrderedCollection 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:07:12' prior: 50889059!
wonUpwardsDiagonal: Positions
 
	| upwardsDiagonal |
	upwardsDiagonal := OrderedCollection with: (0@0) with: (0@1) with: (0@2)! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:07:38' prior: 50889065!
wonUpwardsDiagonal: Positions
 
	| upwardsDiagonal |
	upwardsDiagonal := OrderedCollection with: (0@0) with: (0@1) with: (0@2).
	
	^Positions includesAllOf: upwardsDiagonal .! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:07:40'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:07:49'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:08:53'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:09:43' prior: 50889046!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection with: (2@0) with: (1@1) with: (2@2).

	^Positions includesAllOf: fallingDiagonal.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:09:47'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:09:47'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:09:47'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:10:15' prior: 50889173!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection with: (2@0) with: (1@1) with: (0@2).

	^Positions includesAllOf: fallingDiagonal.
	! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:10:29'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:10:32'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:10:32'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:11:28' prior: 50889270!
wonFallingDiagonal: Positions

	| fallingDiagonal |
	fallingDiagonal := OrderedCollection with: (0@0) with: (1@1) with: (2@2).

	^Positions includesAllOf: fallingDiagonal.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:11:35'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:11:35'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:11:35'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:12:18' prior: 50888563!
hasPlayerOWon
	^(self wonHorizontal: chipsO) or: (self wonVertical: chipsO) or: (self wonDiagonal: chipsO)! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:12:19'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:12:24'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:12:24'!
FAILURE!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:12:24'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:13:34' prior: 50889073!
wonUpwardsDiagonal: Positions
 
	| upwardsDiagonal |
	upwardsDiagonal := OrderedCollection with: (2@0) with: (1@1) with: (0@2).
	
	^Positions includesAllOf: upwardsDiagonal .! !

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:13:35'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:13:38'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:13:39'!
PASSED!

!testRun: #TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:13:39'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:14:22'!
test25XWinDiagonaly
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #test25 stamp: 'DB 11/1/2020 22:14:22'!
test25
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:14:33'!
test25XWinsDiagonally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilliTest #test25XWinDiagonaly stamp: 'DB 11/1/2020 22:14:33'!
test25XWinDiagonaly
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@0).
	newTerniLapilliGame putXAt: (0@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:15:09'!
test26OWinsDiagonally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:16:11' prior: 50889715!
test26OWinsDiagonally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@2).
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:16:19' prior: 50889731!
test26OWinsDiagonally
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@2).
	self assert: (newTerniLapilliGame hasPlayerOWon).
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:16:26'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:30:11'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:30:12'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:30:12'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:35:47'!
test27GameDoesNotContinueAfterWinningInPutingPhase
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (2@2).
	
	self   should: [newTerniLapilliGame putOAt: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorGameOver.
	
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:35:53'!
ERROR!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:35:53'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:36:04'!
errorGameOver
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:36:49' prior: 50889968!
errorGameOver
	^'Cant continue playing because the game is over!!!!!!'! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:36:51'!
FAILURE!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:37:35'!
signalGameOver

	self error: self errorGameOver.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:37:44'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:37:44'!
FAILURE!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:37:44'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:40:11' prior: 50887486!
putXAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.
	! !

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'DB 11/1/2020 22:41:11'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:41:06' prior: 50890084!
putXAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	currentTurn := #O.
	self hasPlayerXWon ifTrue: [
		state := #GameOver
	]
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:41:30' prior: 50890109!
putXAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsX add: aPoint.
	
	self hasPlayerXWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #O.
	! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:41:40'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:41:50'!
isGameOver
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:42:13' prior: 50890150!
isGameOver
	^state = #GameOver! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:42:15'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:44:11' prior: 50887471!
putOAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:44:12'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:45:22'!
validateMovement: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:46:17' prior: 50890163!
putOAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].

	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:46:21'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:46:21'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:46:35' prior: 50890128!
putXAt: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	self hasPlayerXWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #O.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:47:08'!
assertPosition: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:47:28'!
assertPositionAndGameState: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !

!methodRemoval: TerniLapilli #assertPosition: stamp: 'DB 11/1/2020 22:47:28'!
assertPosition: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:47:57' prior: 50890204!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:48:08' prior: 50890316!
putXAt: aPoint 
	
	self assertPositionAndGameState: aPoint .
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	self hasPlayerXWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #O.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:48:12'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:48:12'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:49:20'!
checkDiagonalMovement: aSourcePoint to: aDestinationPoint

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:49:52' prior: 50887227!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovement: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		self putXAt: aDestinationPoint.
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		self putOAt: aDestinationPoint.
		
	].


	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:50:10'!
checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:50:10' prior: 50890520!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	((chipsX includes: aSourcePoint) or: (chipsO includes: aSourcePoint)) ifFalse: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		self putXAt: aDestinationPoint.
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		self putOAt: aDestinationPoint.
		
	].


	
	
	
	! !

!methodRemoval: TerniLapilli #checkDiagonalMovement:to: stamp: 'DB 11/1/2020 22:50:10'!
checkDiagonalMovement: aSourcePoint to: aDestinationPoint

	"(0@1) no me puedo mover para (1@0) o (1@2)"
	aSourcePoint = (0@1) ifTrue: [
		(aDestinationPoint = (1@0) or:aDestinationPoint = (1@2)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@0) no me puedo mover para (0@1) o (2@1)"
	aSourcePoint =(1@0) ifTrue: [
		(aDestinationPoint = (0@1) or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(1@2) no me puedo mover para (0@1) o (2@1)  "
	aSourcePoint = (1@2) ifTrue: [
		(aDestinationPoint = (0@1)  or:aDestinationPoint = (2@1)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	"(2@1) no me puedo mover en la (1@2) o (1@0)  "
	aSourcePoint = (2@1) ifTrue: [
		(aDestinationPoint =(1@2) or:aDestinationPoint = (1@0)) ifTrue: [^self class signalCantDoInvalidDiagonalMovement.]
	].

	
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:51:13' prior: 50890586!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	(self isAnEmptyPosition: aSourcePoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		self putXAt: aDestinationPoint.
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		self putOAt: aDestinationPoint.
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:51:17'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:51:17'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:54:04' prior: 50890652!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	(self isAnEmptyPosition: aSourcePoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:54:10'!
FAILURE!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:54:10'!
FAILURE!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:54:10'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:54:18'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:55:42' prior: 50890780!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	
	self assertInBounds: aDestinationPoint.	
	
	(self isAnEmptyPosition: aSourcePoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:55:45'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:57:08'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 22:57:17'!
PASSED!

----SNAPSHOT----(1 November 2020 22:57:57) CuisUniversity-4384.image priorSource: 17831650!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 22:59:58' prior: 50890911!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	(self isAnEmptyPosition: aSourcePoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:00:05'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:00:05'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:00:05'!
FAILURE!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:00:05'!
FAILURE!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:00:05'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:00:05'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:00:05'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:00:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:00:09'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:00:18'!
assertLengthOfMovementFrom: aPoint to: aPoint2 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:00:28' prior: 50891177!
assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint 
	((aSourcePoint x - aDestinationPoint x) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].
	((aSourcePoint y - aDestinationPoint y) abs) > 1 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.].! !

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:00:29'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:00:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:00:34'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:01:57' prior: 50891050!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	(self isAnEmptyPosition: aSourcePoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:02:20'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:02:21'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:02:21'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:02:21'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:02:21'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:02:21'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:02:23'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:02:32'!
assertCorrectTurn: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:02:45' prior: 50891413!
assertCorrectTurn: aSourcePoint 

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:02:46'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:02:51'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:02:51'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:03:54' prior: 50891292!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
		
	].


	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:03:59'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:03:59'!
FAILURE!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:03:59'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:04:00'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:04:00'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:04:00'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:04:00'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:04:02'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:04:09'!
assertNotEmptyPosition: aPoint 
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:04:34' prior: 50891645!
assertNotEmptyPosition: aPoint 
	(self isAnEmptyPosition: aPoint)  ifTrue: [^self class signalCantMoveAnEmptyPosition].! !

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:04:36'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:04:41'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:04:41'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:05:56'!
moveAndChangeTurn: aSourcePoint to: aDestinationPoint

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
	].


	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:06:22' prior: 50891526!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self moveAndChangeTurn: aSourcePoint to: aDestinationPoint.

	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:06:38'!
moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
	].


	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:06:38' prior: 50891765!
move: aSourcePoint to: aDestinationPoint

	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint.

	
	
	
	! !

!methodRemoval: TerniLapilli #moveAndChangeTurn:to: stamp: 'DB 11/1/2020 23:06:38'!
moveAndChangeTurn: aSourcePoint to: aDestinationPoint

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
		
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
	].


	
	
	
	!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:07:08' prior: 50891796!
move: aSourcePoint to: aDestinationPoint
	
	self assertBoardFull.
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint.

	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:07:19'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:07:19'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:07:19'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:07:19'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:07:20'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:07:22'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:07:30'!
assertBoardFull
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:07:36' prior: 50891938!
assertBoardFull
	self isBoardFull ifFalse: [^self class signalCantMoveIfNotAllChipHaveBeenPutDown ].! !

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:07:39'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:07:43'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:07:43'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:08:18'!
validateMovementFrom: aSourcePoint to: aDestinationPoint
	
	self assertBoardFull.
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:08:47' prior: 50891826!
move: aSourcePoint to: aDestinationPoint
	
	self validateMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint.

	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:08:54'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:08:54'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:09:08' prior: 50890185!
validateMovement: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut ].
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:11:04'!
test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 ! !

!methodRemoval: TerniLapilliTest #test17InMovementPhaseXTurnThenItIsOTurn stamp: 'DB 11/1/2020 23:11:04'!
test17InMovementPhaseXTurnThenItIsOTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	newTerniLapilliGame move: (1@1) to: (1@2).
	
	self assert: newTerniLapilliGame isPlayingO.
	
	newTerniLapilliGame move: (0@0) to: (1@0).
	
	self assert: newTerniLapilliGame isPlayingX.
	
	
	
	
	 !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:15:50'!
test28CantPutWhileMovingPhase
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	
	newTerniLapilliGame move: (1@1) to: (1@0).
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveIfNotAllChipHaveBeenPutDown.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:16:19' prior: 50892221!
test28CantPutWhileMovingPhase
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	
	newTerniLapilliGame move: (1@1) to: (1@0).
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutIfInMovingPhase.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:17:59' prior: 50892241!
test28CantPutWhileMovingPhase
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutIfInMovingPhase.
		
! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:18:05'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:18:05'!
ERROR!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:18:05'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:18:16'!
isMovingPhase
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:18:44' prior: 50892380!
isMovingPhase
	^state  = #MovingPhase! !

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:18:46'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:20:42' prior: 50890375!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X
	
	self isBoardFull  ifTrue: [ state := #MovingPhase]! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:20:46' prior: 50892393!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X
	
	self isBoardFull  ifTrue: [ state := #MovingPhase].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:20:49' prior: 50892406!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull  ifTrue: [ state := #MovingPhase].! !

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:20:53'!
ERROR!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:21:03'!
errorCantPutIfInMovingPhase
	self shouldBeImplemented.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:21:35' prior: 50892435!
errorCantPutIfInMovingPhase
	^'you cant put if in Moving phase'! !

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:21:37'!
FAILURE!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:22:48' prior: 50892419!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:24:44'!
errorCanPutInMovingPhase

	^'All 6 chips have been put on the board'.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:24:44' prior: 50883285!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCanPutInMovingPhase.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:24:44' prior: 50883327!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCanPutInMovingPhase.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:24:44' prior: 50879307!
signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	self error: self errorCanPutInMovingPhase.! !

!methodRemoval: TerniLapilli class #errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:24:44'!
errorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	^'All 6 chips have been put on the board'.!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:25:09'!
errorCantPutInMovingPhase

	^'All 6 chips have been put on the board'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:25:09' prior: 50892503!
signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	self error: self errorCantPutInMovingPhase.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:25:09' prior: 50892467!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutInMovingPhase.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:25:09' prior: 50892485!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutInMovingPhase.! !

!methodRemoval: TerniLapilli class #errorCanPutInMovingPhase stamp: 'DB 11/1/2020 23:25:09'!
errorCanPutInMovingPhase

	^'All 6 chips have been put on the board'.!

!methodRemoval: TerniLapilli class #errorCantPutInMovingPhase stamp: 'DB 11/1/2020 23:25:35'!
errorCantPutInMovingPhase

	^'All 6 chips have been put on the board'.!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:26:23'!
signalCantPutIfInMovingPhase

	self error: self errorCantPutInMovingPhase.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:26:23' prior: 50892162!
validateMovement: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:26:23' prior: 50890348!
assertPositionAndGameState: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !

!methodRemoval: TerniLapilli class #signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:26:23'!
signalErrorInvalidMoveCantPutChipWhenAllChipsHaveBeenPut

	self error: self errorCantPutInMovingPhase.!
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:26:40' prior: 50892575!
signalCantPutIfInMovingPhase

	self error: self errorCantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:26:44'!
ERROR!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:26:44'!
ERROR!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:26:44'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:26:54'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:27:12' prior: 50892529!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:27:13'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:27:15'!
ERROR!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:27:32' prior: 50892547!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:27:34'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:27:45'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:27:45'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:29:22' prior: 50886459!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantMoveIfNotAllChipHaveBeenPutDown.! !

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:29:32'!
ERROR!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:29:32'!
ERROR!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:29:44'!
isPuttingPhase
	self shouldBeImplemented.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:30:02' prior: 50892894!
isPuttingPhase
	^state = #PuttingPhase! !

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:30:06'!
FAILURE!

----SNAPSHOT----(1 November 2020 23:37:41) CuisUniversity-4384.image priorSource: 17900651!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:49:20'!
FAILURE!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:51:40' prior: 50879100!
test01assertOnStartItsPlayerXTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	self assert: newTerniLapilliGame isEmpty.
	self assert: newTerniLapilliGame isPlayingX.
	self deny: newTerniLapilliGame isPlayingO.! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/1/2020 23:53:02' prior: 50882278 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	state := #NotStarted! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/1/2020 23:56:11' prior: 50884852!
assertInBounds: aPoint 

	((aPoint x < 0) or: (aPoint y < 0) or: (aPoint x > 2) or: (aPoint y > 2)) ifTrue: [^self class signalCantMoveOrPutChipOutOfBounds ].
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:56:15'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:56:15'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/1/2020 23:58:29' prior: 50891418!
assertCorrectTurn: aSourcePoint 

	((chipsX includes: aSourcePoint) and: (currentTurn = #X )) ifFalse:  [^self class signalInvalidMoveNotYourTurn ]	.


	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:58:34'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:58:34'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:58:34'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:58:34'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:58:34'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/1/2020 23:02:45' prior: 50893040!
assertCorrectTurn: aSourcePoint 

	(chipsX includes: aSourcePoint) ifTrue: [
		currentTurn = #X ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		currentTurn = #O ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:59:15'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/1/2020 23:59:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/1/2020 23:59:15'!
FAILURE!
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/1/2020 23:59:36' prior: 50892925 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	state := #PuttingPhase! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:00:07'!
PASSED!

Object subclass: #TerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:00:53'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:01:20'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: 'terniLapilli'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPuttingPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:01:56'!
TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPhase subclass: #TerniLapilliMovingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliMovingPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:02:04'!
TerniLapilliPhase subclass: #TerniLapilliMovingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPhase subclass: #TerniLapilliGameOverPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliGameOverPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:02:13'!
TerniLapilliPhase subclass: #TerniLapilliGameOverPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilliPhase class methodsFor: 'nil' stamp: 'DB 11/2/2020 00:03:19'!
canHandle: aTerniLapilliGame
	self subclassResponsibility ! !
!TerniLapilliPhase class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:03:44'!
for: aTerniLapilliGame
	^self new initializeFor: aTerniLapilliGame ! !
!TerniLapilliPhase class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:04:57'!
stateFor: aTerniLapilliGame
	^(self subclasses detect: [:aTerniLapilliPhaseClass | aTerniLapilliPhaseClass canHandle: aTerniLapilliGame ]) for: aTerniLapilliGame.! !
!TerniLapilliPhase methodsFor: 'nil' stamp: 'DB 11/2/2020 00:05:48'!
initializeFor: aTerniLapilliGame
	! !

Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPhase category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 00:06:04'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:06:14' prior: 50893453!
initializeFor: aTerniLapilliGame
	terniLapilliGame := aTerniLapilliGame 
	! !
!TerniLapilliGameOverPhase class methodsFor: 'nil' stamp: 'DB 11/2/2020 00:07:17' overrides: 50893434!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame isGameOver ! !
!TerniLapilliMovingPhase class methodsFor: 'nil' stamp: 'DB 11/2/2020 00:08:00' overrides: 50893434!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame isMovingPhase ! !
!TerniLapilliPuttingPhase class methodsFor: 'nil' stamp: 'DB 11/2/2020 00:08:15' overrides: 50893434!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame isPuttingPhase ! !
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/2/2020 00:09:20' prior: 50893261 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	state := TerniLapilliPhase for: self! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:09:29'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:09:29'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:09:29'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:09:48'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:10:42' prior: 50892899!
isPuttingPhase
	^(chipsX size) + (chipsO size) < 6! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:11:14' prior: 50893606!
isPuttingPhase
	^(chipsX size) + (chipsO size) < 6! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:11:18'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:11:18'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:13:18' prior: 50890386!
putXAt: aPoint 
	
	self assertPositionAndGameState: aPoint .
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	self hasPlayerXWon ifTrue: [
		state := TerniLapilliGameOverPhase for: self
	].
	
	currentTurn := #O.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:14:05' prior: 50890155!
isGameOver
	^(self hasPlayerOWon ) or: (self hasPlayerXWon)! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:14:13' prior: 50893725!
isGameOver
	^(self hasPlayerOWon) or: (self hasPlayerXWon)! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:14:46' prior: 50893713!
putXAt: aPoint 
	
	self assertPositionAndGameState: aPoint .
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:14:49'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:14:49'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:16:34' prior: 50892385!
isMovingPhase
	^(chipsX size) + (chipsO size) = 6! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:16:40'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:16:40'!
PASSED!
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:17:34' prior: 50893841!
isMovingPhase
	^self isBoardFull ! !
!TerniLapilliPhase methodsFor: 'nil' stamp: 'DB 11/2/2020 00:18:36'!
put: aPosition

	self subclassResponsibility ! !
!TerniLapilliGameOverPhase methodsFor: 'nil' stamp: 'DB 11/2/2020 00:19:09' overrides: 50893947!
put: aPosition
	^self error: self signalGameOver ! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:19:24' prior: 50893952 overrides: 50893947!
put: aPosition
	^self error: terniLapilliGame signalGameOver ! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:19:29' prior: 50893958 overrides: 50893947!
put: aPosition
	^self error: terniLapilliGame class signalGameOver ! !

----SNAPSHOT----(2 November 2020 00:22:04) CuisUniversity-4384.image priorSource: 17960186!
!TerniLapilliMovingPhase methodsFor: 'nil' stamp: 'DB 11/2/2020 00:29:13' overrides: 50893947!
put: aPosition
	^terniLapilliGame class signalCantMoveIfNotAllChipHaveBeenPutDown 
! !
!TerniLapilliPuttingPhase methodsFor: 'nil' stamp: 'DB 11/2/2020 00:30:04' overrides: 50893947!
put: aPosition

	! !
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:30:38' prior: 50893980 overrides: 50893947!
put: aPosition

	terniLapilliGame putInPuttingPhase: aPosition ! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:31:19'!
putInPuttingPhase: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:32:20' prior: 50892599!
assertPositionAndGameState: aPoint 

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:32:39' prior: 50894003!
assertPositionAndGameState: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].

	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:33:14' prior: 50893990!
putInPuttingPhase: aPoint 

	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	
	
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:33:32' prior: 50894027!
putInPuttingPhase: aPoint 

	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	
	
	
	
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:34:33'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:34:33'!
PASSED!
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:35:30'!
assertPut: aPosition

	terniLapilliGame putInPuttingPhase: aPosition ! !
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:35:30'!
assertPut: aPosition
	^terniLapilliGame class signalCantMoveIfNotAllChipHaveBeenPutDown 
! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:35:30'!
assertPut: aPosition
	^self error: terniLapilliGame class signalGameOver ! !
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:35:30'!
assertPut: aPosition

	self subclassResponsibility ! !

!methodRemoval: TerniLapilliPuttingPhase #put: stamp: 'DB 11/2/2020 00:35:30'!
put: aPosition

	terniLapilliGame putInPuttingPhase: aPosition !

!methodRemoval: TerniLapilliMovingPhase #put: stamp: 'DB 11/2/2020 00:35:30'!
put: aPosition
	^terniLapilliGame class signalCantMoveIfNotAllChipHaveBeenPutDown 
!

!methodRemoval: TerniLapilliGameOverPhase #put: stamp: 'DB 11/2/2020 00:35:30'!
put: aPosition
	^self error: terniLapilliGame class signalGameOver !

!methodRemoval: TerniLapilliPhase #put: stamp: 'DB 11/2/2020 00:35:30'!
put: aPosition

	self subclassResponsibility !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:35:44' prior: 50894168 overrides: 50894174!
assertPut: aPosition
	^terniLapilliGame class signalGameOver ! !
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:36:06' prior: 50894156 overrides: 50894174!
assertPut: aPosition
! !

!methodRemoval: TerniLapilli #putInPuttingPhase: stamp: 'DB 11/2/2020 00:36:22'!
putInPuttingPhase: aPoint 

	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	
	
	
	
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:37:06' prior: 50892449!
putOAt: aPoint 
	
	self assertPositionAndGameState: aPoint.
	
	state assertPut: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:37:28' prior: 50894014!
assertPositionAndGameState: aPoint 
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:37:42'!
assertPosition: aPoint 
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:37:42' prior: 50894224!
putOAt: aPoint 
	
	self assertPosition: aPoint.
	
	state assertPut: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [ state := #MovingPhase].! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:37:42' prior: 50893735!
putXAt: aPoint 
	
	self assertPosition: aPoint .
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !

!methodRemoval: TerniLapilli #assertPositionAndGameState: stamp: 'DB 11/2/2020 00:37:42'!
assertPositionAndGameState: aPoint 
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:37:48'!
FAILURE!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:37:48'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:37:48'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:37:57'!
ERROR!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:38:43' prior: 50894267!
putXAt: aPoint 

	state assertPut: aPoint.
	
	self assertPosition: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:38:45'!
ERROR!

state!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:39:24'!
ERROR!
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 00:41:12' prior: 50893611!
isPuttingPhase
	self halt
	^(chipsX size) + (chipsO size) < 6! !
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 00:41:25' prior: 50894401!
isPuttingPhase
	self halt.
	^(chipsX size) + (chipsO size) < 6! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:41:34'!
ERROR!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:41:34'!
ERROR!

newTerniLapilliGame!
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/2/2020 00:43:51' prior: 50893495 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	state := TerniLapilliMovingPhase for: self! !
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/2/2020 00:43:59' prior: 50894420 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	state := TerniLapilliPuttingPhase for: self! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:05'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:05'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:44:05'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:44:05'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:44:05'!
FAILURE!

(chipsX size) + (chipsO size)!
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 00:44:31' prior: 50894406!
isPuttingPhase
	^(chipsX size) + (chipsO size) < 6! !

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:44:31'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:34'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:40'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:40'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:44:40'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:44:41'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:44:41'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:44:41'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:44:44'!
FAILURE!
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:45:32' prior: 50894162 overrides: 50894174!
assertPut: aPosition
	^terniLapilliGame class signalCantMoveIfNotAllChipHaveBeenPutDown 
! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:45:37'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:45:37'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:45:37'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:45:37'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:45:37'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:45:40'!
FAILURE!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:46:58' prior: 50894254!
putOAt: aPoint 
	
	self assertPosition: aPoint.
	
	state assertPut: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self hasPlayerOWon ifTrue: [
		state := #GameOver
	].
	
	currentTurn := #X.
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:47:06' prior: 50894751!
putOAt: aPoint 
	
	self assertPosition: aPoint.
	
	state assertPut: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:47:19' prior: 50894762!
putOAt: aPoint 
	
	state assertPut: aPoint.
	
	self assertPosition: aPoint.
	
	
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:47:26' prior: 50894771!
putOAt: aPoint 
	
	state assertPut: aPoint.
	
	self assertPosition: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:47:48'!
assertPositionAndState: aPoint 
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:47:48' prior: 50894781!
putOAt: aPoint 
	
	state assertPut: aPoint.
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 00:47:48' prior: 50894384!
putXAt: aPoint 

	state assertPut: aPoint.
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !

!methodRemoval: TerniLapilli #assertPosition: stamp: 'DB 11/2/2020 00:47:48'!
assertPosition: aPoint 
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 00:48:08' prior: 50894790!
assertPositionAndState: aPoint 
	
	state assertPut: aPoint .
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:48:17' prior: 50894809!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 00:48:22' prior: 50894799!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:48:25'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:48:25'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:48:25'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:48:25'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:48:25'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:48:32'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:49:41'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:59:38'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 00:59:38'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 00:59:38'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 00:59:38'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 00:59:38'!
FAILURE!

----SNAPSHOT----(2 November 2020 01:03:57) CuisUniversity-4384.image priorSource: 17994214!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:05:05' prior: 50894845!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	! !

----SNAPSHOT----(2 November 2020 01:05:54) CuisUniversity-4384.image priorSource: 18028911!

----SNAPSHOT----(2 November 2020 01:06:35) CuisUniversity-4384.image priorSource: 18029301!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:06:40'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:06:40'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:06:40'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:06:40'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:06:40'!
FAILURE!
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 01:07:41' prior: 50894205 overrides: 50894174!
assertPut: aPosition
! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:08:49' prior: 50895058!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [
		state := TerniLapilliMovingPhase for: self
	]
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:08:56' prior: 50894836!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	
	self isBoardFull ifTrue: [
		state := TerniLapilliMovingPhase for: self
	]
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:08:59'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:08:59'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:08:59'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:09:00'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:09:00'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:09:00'!
FAILURE!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:09:20' prior: 50895185!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:09:54'!
FAILURE!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:09:54'!
FAILURE!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:09:54'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:09:54'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:09:54'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:10:00'!
FAILURE!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:10:38'!
FAILURE!
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 01:11:56' prior: 50894645 overrides: 50894174!
assertPut: aPosition
	^terniLapilliGame class signalCantPutIfInMovingPhase 
! !

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:11:58'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:12:01'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:12:01'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:12:01'!
FAILURE!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:14:42' prior: 50895174!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [
		state := TerniLapilliMovingPhase for: self
	].

	self hasPlayerOWon ifTrue: [
		state := TerniLapilliGameOverPhase for: self
	]
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:14:53' prior: 50895293!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	
	self hasPlayerXWon ifTrue: [
		state := TerniLapilliGameOverPhase for: self
	]
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:14:57'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:14:57'!
PASSED!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 01:18:26'!
test29AfterMovingWin
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	
	self assert: newTerniLapilliGame isMovingPhase.
	
	newTerniLapilliGame move: (2@0) to: (1@0).
	
	self assert: newTerniLapilliGame isGameOver.
! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:18:30'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:18:30'!
PASSED!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:19:49' prior: 50895517!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	
	self isBoardFull ifTrue: [
		state := TerniLapilliMovingPhase for: self
	].

	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:19:54'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:19:54'!
PASSED!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:20:09' prior: 50895531!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:20:13'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:20:14'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:20:14'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:20:14'!
FAILURE!
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:20:35' prior: 50895866!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.
	
	self hasPlayerXWon ifTrue: [
		state := TerniLapilliGameOverPhase for: self
	]
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:20:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:20:39'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:20:39'!
PASSED!
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 01:29:18'!
state
	^TerniLapilliPhase stateFor: self
! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilli category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 01:29:34'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:29:57' prior: 50894826!
assertPositionAndState: aPoint 
	
	self state assertPut: aPoint .
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:29:59' prior: 50896106!
assertPositionAndState: aPoint 
	
	self state assertPut: aPoint.
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:30:10' prior: 50895755!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	currentTurn := #X.
	
	! !
!TerniLapilli methodsFor: 'putting' stamp: 'DB 11/2/2020 01:30:16' prior: 50895978!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	currentTurn := #O.! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:30:22'!
FAILURE!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:30:22'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:30:22'!
FAILURE!

self state!
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 01:32:35' prior: 50894531!
isPuttingPhase
	^(self hasPlayerOWon not) and: (self hasPlayerXWon not) and: (chipsX size) + (chipsO size) < 6! !
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 01:32:59' prior: 50893943!
isMovingPhase
	 ^(self hasPlayerOWon not) and: (self hasPlayerXWon not) and: self isBoardFull ! !
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 01:33:04' prior: 50896254!
isMovingPhase
	 ^(self hasPlayerOWon not) and: (self hasPlayerXWon not) and: (self isBoardFull)! !
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 01:33:15' prior: 50896247!
isPuttingPhase
	^(self hasPlayerOWon not) and: (self hasPlayerXWon not) and: ((chipsX size) + (chipsO size) < 6)! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:33:19'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:33:20'!
PASSED!

----SNAPSHOT----(2 November 2020 01:35:28) CuisUniversity-4384.image priorSource: 18029394!

----SNAPSHOT----(2 November 2020 01:38:39) CuisUniversity-4384.image priorSource: 18071066!
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 01:38:49' prior: 50891783!
moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint

	currentTurn = #X ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
		currentTurn := #O
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
		currentTurn := #X
	].


	
	
	
	! !

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPlayer category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 01:39:50'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPlayerX category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 01:40:01'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!

!classDefinition: #TerniLapilliPlayerO category: 'TerniLapilliTest' stamp: 'DB 11/2/2020 01:40:03'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TerniLapilliTest'!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:42:20' prior: 50892581!
validateMovement: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	currentTurn := #X! !

!methodRemoval: TerniLapilli #validateMovement: stamp: 'DB 11/2/2020 01:42:37'!
validateMovement: aPoint 
	
	self isGameOver ifTrue: [^self class signalGameOver ].
	
	self assertInBounds: aPoint.
	
	self isBoardFull ifTrue:[^self class signalCantPutIfInMovingPhase ].
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	chipsO add: aPoint.
	
	currentTurn := #X!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:42:42'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:42:42'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:43:40' prior: 50892045!
validateMovementFrom: aSourcePoint to: aDestinationPoint
	
	"self assertBoardFull."
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:43:53'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:43:53'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:43:53'!
FAILURE!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:44:34'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:44:34'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:44:34'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:44:45'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:44:51'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:44:51'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:44:51'!
FAILURE!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:45:53'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:46:02'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:46:03'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:46:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:46:03'!
FAILURE!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:46:29'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:46:33'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:46:38'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:46:45'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:46:47'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:46:49'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:46:50'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:46:52'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:46:53'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:46:54'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:46:56'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:46:58'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:47:01'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:47:03'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:47:03'!
FAILURE!

!methodRemoval: TerniLapilli class #errorCantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:47:54'!
errorCantMoveIfNotAllChipHaveBeenPutDown
	^'All 6 chips must have been put down before moving'!

!methodRemoval: TerniLapilli class #signalCantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:48:31'!
signalCantMoveIfNotAllChipHaveBeenPutDown

	self error: self errorCantMoveIfNotAllChipHaveBeenPutDown.!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:49:06' prior: 50891943!
assertBoardFull
	self isBoardFull ifFalse: [^self class signalCantPutIfInMovingPhase ].! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 01:49:22' prior: 50892871!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli errorCantPutIfInMovingPhase .! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:49:30'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:49:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:49:30'!
FAILURE!

----SNAPSHOT----(2 November 2020 01:50:05) CuisUniversity-4384.image priorSource: 18071159!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:50:23'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:50:23'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:50:23'!
FAILURE!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:50:44'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:50:46'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:50:48'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:50:50'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:50:52'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:50:53'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:50:54'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:50:56'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:50:57'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:50:58'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:51:00'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:51:01'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:51:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:51:04'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:51:04'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:52:04'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:52:30'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 01:53:13' prior: 50896560!
validateMovementFrom: aSourcePoint to: aDestinationPoint
	
	self assertBoardFull.
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 01:53:33'!
PASSED!

----QUIT----(2 November 2020 01:55:15) CuisUniversity-4384.image priorSource: 18097111!

----STARTUP---- (2 November 2020 02:26:48) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!

!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:27:29'!
assertMove: aPosition

	self subclassResponsibility ! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:27:41' overrides: 50897471!
assertMove: aPosition
	^terniLapilliGame class signalGameOver ! !
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:28:07' overrides: 50897471!
assertMove: aPosition
	
! !
!TerniLapilli class methodsFor: 'signals' stamp: 'DB 11/2/2020 02:35:32'!
signalGameIsOver

	self error: self errorGameOver.! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:35:32' prior: 50897477 overrides: 50897471!
assertMove: aPosition
	^terniLapilliGame class signalGameIsOver ! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:35:32' prior: 50894198 overrides: 50894174!
assertPut: aPosition
	^terniLapilliGame class signalGameIsOver ! !

!methodRemoval: TerniLapilli class #signalGameOver stamp: 'DB 11/2/2020 02:35:32'!
signalGameOver

	self error: self errorGameOver.!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:35:38'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:35:38'!
PASSED!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:36:54'!
cantDoInvalidDiagonalMovement
	^'You cant do invalidad diagonal movement'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:36:54' prior: 50885733!
test11assertCantDoInvalidDiagonalMovement
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	"(0@1) no me puedo mover para (1@0) o (1@2)"
	self   should: [newTerniLapilliGame move: (0@1) to: (1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantDoInvalidDiagonalMovement.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:36:54' prior: 50883854!
signalCantDoInvalidDiagonalMovement

	self error: self cantDoInvalidDiagonalMovement.! !

!methodRemoval: TerniLapilli class #errorCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:36:54'!
errorCantDoInvalidDiagonalMovement
	^'You cant do invalidad diagonal movement'!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:37:17'!
cantMoveAnEmptyPosition
	^'You cant move an empty position'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:17' prior: 50885057!
signalCantMoveAnEmptyPosition

	self error: self cantMoveAnEmptyPosition.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:17' prior: 50884983!
test12assertCantMoveAnEmptyPosition
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (1@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveAnEmptyPosition.! !

!methodRemoval: TerniLapilli class #errorCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:37:17'!
errorCantMoveAnEmptyPosition
	^'You cant move an empty position'!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:37:33'!
cantMoveMoreThanOnePositionAtATime
	^'You cant move more than one position at a time'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:33' prior: 50883616!
signalCantMoveMoreThanOnePositionAtATime

	self error: self cantMoveMoreThanOnePositionAtATime.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:33' prior: 50883522!
test10assertCantMoveMoreThanOnePositionAtATime
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@0).
	self   should: [newTerniLapilliGame move: (0@0) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveMoreThanOnePositionAtATime.! !

!methodRemoval: TerniLapilli class #errorCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:37:33'!
errorCantMoveMoreThanOnePositionAtATime
	^'You cant move more than one position at a time'.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:37:47'!
cantMoveOrPutChipOutOfBounds
	^'You cant move or put a chip out of bounds'
! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:47' prior: 50886342!
test13assertCantMoveOutOfBounds
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (0@2) to: (-1@2)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:47' prior: 50884565!
signalCantMoveOrPutChipOutOfBounds

	self error: self 	cantMoveOrPutChipOutOfBounds.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:47' prior: 50884639!
test05CantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putXAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds .
		
	self should: [newTerniLapilliGame putXAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putXAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:37:47' prior: 50886377!
test14OCantPutChipOutOfBound
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self should: [newTerniLapilliGame putOAt: (3@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (-1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (0@3)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		
	self should: [newTerniLapilliGame putOAt: (1@-1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveOrPutChipOutOfBounds.
		! !

!methodRemoval: TerniLapilli class #errorCantMoveOrPutChipOutOfBounds stamp: 'DB 11/2/2020 02:37:47'!
errorCantMoveOrPutChipOutOfBounds
	^'You cant move or put a chip out of bounds'
!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:38:02'!
cantPutIfInMovingPhase
	^'you cant put if in Moving phase'! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:02' prior: 50892260!
test28CantPutWhileMovingPhase
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@2).
	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase.
		
! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:02' prior: 50892620!
signalCantPutIfInMovingPhase

	self error: self cantPutIfInMovingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:02' prior: 50892752!
test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).

	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:02' prior: 50897067!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:02' prior: 50892726!
test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (1@2).
	newTerniLapilliGame putXAt: (0@2).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@1).
	self   should: [newTerniLapilliGame putXAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase .! !

!methodRemoval: TerniLapilli class #errorCantPutIfInMovingPhase stamp: 'DB 11/2/2020 02:38:02'!
errorCantPutIfInMovingPhase
	^'you cant put if in Moving phase'!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:38:23'!
gameIsOver
	^'Cant continue playing because the game is over!!!!!!'! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:23' prior: 50897487!
signalGameIsOver

	self error: self gameIsOver.! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:38:23' prior: 50889941!
test27GameDoesNotContinueAfterWinningInPutingPhase
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (2@0).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (2@1).
	newTerniLapilliGame putOAt: (1@1).
	newTerniLapilliGame putXAt: (2@2).
	
	self   should: [newTerniLapilliGame putOAt: (1@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli gameIsOver.
	
	self assert: (newTerniLapilliGame hasPlayerXWon).
	self deny: newTerniLapilliGame hasPlayerOWon.
	! !

!methodRemoval: TerniLapilli class #errorGameOver stamp: 'DB 11/2/2020 02:38:23'!
errorGameOver
	^'Cant continue playing because the game is over!!!!!!'!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:39:02'!
invalidMoveCantPutChipOnOccupiedSlot
	^'Cant put chip in an occupied slot'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:02' prior: 50879300!
signalErrorInvalidMoveCantPutChipOnOccupiedSlot

	self error: self invalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:02' prior: 50883404!
test09assertPlayerXCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@0).
	newTerniLapilliGame putOAt: (1@1).
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveCantPutChipOnOccupiedSlot .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:02' prior: 50882532!
test04assertPlayerOCantPutChipOnAnOccupiedSlot
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (1@1).
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveCantPutChipOnOccupiedSlot .! !

!methodRemoval: TerniLapilli class #errorInvalidMoveCantPutChipOnOccupiedSlot stamp: 'DB 11/2/2020 02:39:02'!
errorInvalidMoveCantPutChipOnOccupiedSlot
	^'Cant put chip in an occupied slot'.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:39:32'!
invalidMoveCantPutChipWhenGameIsOver

	^'Cant put chip because the game is already over'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:32' prior: 50879314!
signalErrorInvalidMoveCantPutChipWhenGameIsOver

	self error: self invalidMoveCantPutChipWhenGameIsOver .! !

!methodRemoval: TerniLapilli class #errorInvalidMoveCantPutChipWhenGameIsOver stamp: 'DB 11/2/2020 02:39:32'!
errorInvalidMoveCantPutChipWhenGameIsOver

	^'Cant put chip because the game is already over'.!
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:39:52'!
invalidMoveNotYourTurn

	^'It must be your turn to be able to move or put down a chip'.! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:52' prior: 50885878!
signalInvalidMoveNotYourTurn

	self error: self invalidMoveNotYourTurn ! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:52' prior: 50882377!
test03assertPlayerOCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	self   should: [newTerniLapilliGame putOAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:52' prior: 50883349!
test08assertPlayerXCantPutChipIfItIsntItsTurn
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	
	newTerniLapilliGame putXAt: (2@1).
	
	self   should: [newTerniLapilliGame putXAt: (1@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveNotYourTurn .! !
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:52' prior: 50886542!
test15CantMoveIfIsNotYourTurn
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	newTerniLapilliGame putOAt: (2@1).
	newTerniLapilliGame putXAt: (2@2).
	newTerniLapilliGame putOAt: (0@2).
	
	self   should: [newTerniLapilliGame move: (2@1) to: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli invalidMoveNotYourTurn.
! !
!TerniLapilli class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:39:52' prior: 50879321!
signalErrorInvalidMoveNotYourTurn

	self error: self invalidMoveNotYourTurn .! !

!methodRemoval: TerniLapilli class #errorInvalidMoveNotYourTurn stamp: 'DB 11/2/2020 02:39:52'!
errorInvalidMoveNotYourTurn

	^'It must be your turn to be able to move or put down a chip'.!
!TerniLapilliTest methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:42:18' prior: 50897852!
test16CantMoveIfNotAllChipHaveBeenPutDown
	
	|newTerniLapilliGame|
	newTerniLapilliGame := TerniLapilli new.
	newTerniLapilliGame putXAt: (0@1).
	newTerniLapilliGame putOAt: (0@0).
	newTerniLapilliGame putXAt: (1@1).
	
	self assert: newTerniLapilliGame isPuttingPhase.
	
	self   should: [newTerniLapilliGame move: (1@1) to: (2@1)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantMoveIfInPuttingPhase .! !
!TerniLapilli class methodsFor: 'error messages' stamp: 'DB 11/2/2020 02:42:54'!
cantMoveIfInPuttingPhase
	^'you cant move if in Moving phase'! !
!TerniLapilli class methodsFor: 'signals' stamp: 'DB 11/2/2020 02:43:15'!
signalCantMoveIfInPuttingPhase

	self error: self cantMoveIfInPuttingPhase .! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:43:22'!
FAILURE!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:43:22'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:43:22'!
FAILURE!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 02:45:04' prior: 50897350!
validateMovementFrom: aSourcePoint to: aDestinationPoint

	self state assertMove.
	
	
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 02:45:09' prior: 50898186!
validateMovementFrom: aSourcePoint to: aDestinationPoint

	self state assertMove.
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:45:56' overrides: 50897471!
assertMove: aPosition

	terniLapilliGame class signalCantMoveIfInPuttingPhase 
! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 02:46:48' prior: 50898201!
validateMovementFrom: aSourcePoint to: aDestinationPoint

	self state assertMove.
	
	self assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint .
	
	self assertInBounds: aDestinationPoint.	
	
	self assertNotEmptyPosition: aSourcePoint.
	
	self assertCorrectTurn: aSourcePoint.
	
	self checkDiagonalMovementFrom: aSourcePoint to: aDestinationPoint.
	
	

	
	
	
	! !
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:47:10'!
assertMove
	
! !
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:47:10'!
assertMove

	terniLapilliGame class signalCantMoveIfInPuttingPhase 
! !
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:47:10'!
assertMove
	^terniLapilliGame class signalGameIsOver ! !
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:47:10'!
assertMove

	self subclassResponsibility ! !

!methodRemoval: TerniLapilliMovingPhase #assertMove: stamp: 'DB 11/2/2020 02:47:10'!
assertMove: aPosition
	
!

!methodRemoval: TerniLapilliPuttingPhase #assertMove: stamp: 'DB 11/2/2020 02:47:10'!
assertMove: aPosition

	terniLapilliGame class signalCantMoveIfInPuttingPhase 
!

!methodRemoval: TerniLapilliGameOverPhase #assertMove: stamp: 'DB 11/2/2020 02:47:10'!
assertMove: aPosition
	^terniLapilliGame class signalGameIsOver !

!methodRemoval: TerniLapilliPhase #assertMove: stamp: 'DB 11/2/2020 02:47:10'!
assertMove: aPosition

	self subclassResponsibility !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:47:42'!
PASSED!

!methodRemoval: TerniLapilli #assertBoardFull stamp: 'DB 11/2/2020 02:48:24'!
assertBoardFull
	self isBoardFull ifFalse: [^self class signalCantPutIfInMovingPhase ].!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:48:30'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:48:30'!
PASSED!
!TerniLapilliGameOverPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:49:02'!
assertPut
	^terniLapilliGame class signalGameIsOver ! !
!TerniLapilliPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:49:02'!
assertPut

	self subclassResponsibility ! !
!TerniLapilliPuttingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:49:02' overrides: 50898484!
assertPut
! !
!TerniLapilliMovingPhase methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:49:02' overrides: 50898484!
assertPut
	^terniLapilliGame class signalCantPutIfInMovingPhase 
! !
!TerniLapilli methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 02:49:02' prior: 50896116!
assertPositionAndState: aPoint 
	
	self state assertPut.
	
	self assertInBounds: aPoint.
	
	(self isAnEmptyPosition: aPoint) ifFalse: 	[^self class signalErrorInvalidMoveCantPutChipOnOccupiedSlot ].
	! !

!methodRemoval: TerniLapilliGameOverPhase #assertPut: stamp: 'DB 11/2/2020 02:49:02'!
assertPut: aPosition
	^terniLapilliGame class signalGameIsOver !

!methodRemoval: TerniLapilliPhase #assertPut: stamp: 'DB 11/2/2020 02:49:02'!
assertPut: aPosition

	self subclassResponsibility !

!methodRemoval: TerniLapilliPuttingPhase #assertPut: stamp: 'DB 11/2/2020 02:49:02'!
assertPut: aPosition
!

!methodRemoval: TerniLapilliMovingPhase #assertPut: stamp: 'DB 11/2/2020 02:49:02'!
assertPut: aPosition
	^terniLapilliGame class signalCantPutIfInMovingPhase 
!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:49:09'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:49:09'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 02:55:21' prior: 50891183!
assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint 

	(((aSourcePoint x - aDestinationPoint  x) abs > 1) or:
	((aSourcePoint y - aSourcePoint y) abs > 1)) ifTrue: [
	 	^self class signalCantMoveMoreThanOnePositionAtATime.
	]

	"(
	 ((aSourcePoint x - aDestinationPoint x) abs) > 1) or: 
	 ((aSourcePoint y - aDestinationPoint y) abs) > 1))
	
	
	 ifTrue: [^self class signalCantMoveMoreThanOnePositionAtATime.]."! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 02:55:29' prior: 50898625!
assertLengthOfMovementFrom: aSourcePoint to: aDestinationPoint 

	(((aSourcePoint x - aDestinationPoint  x) abs > 1) or:
 	 ((aSourcePoint y - aSourcePoint y) abs > 1)) ifTrue: [
	 	^self class signalCantMoveMoreThanOnePositionAtATime.
	]! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 02:55:38'!
PASSED!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:04:04'!
PASSED!

----SNAPSHOT----(2 November 2020 03:08:40) CuisUniversity-4384.image priorSource: 18106011!

----QUIT----(2 November 2020 03:08:45) CuisUniversity-4384.image priorSource: 18150399!

----STARTUP---- (2 November 2020 03:11:29) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


----QUIT----(2 November 2020 03:12:25) CuisUniversity-4384.image priorSource: 18150492!

----STARTUP---- (2 November 2020 03:15:59) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


----QUIT----(2 November 2020 03:16:22) CuisUniversity-4384.image priorSource: 18150710!

----STARTUP---- (2 November 2020 03:19:25) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'DB 11/2/2020 03:20:25'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'currentTurn chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:20:22'!
nextTurn
	turn := turn + 1	
	
	
	! !
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/2/2020 03:20:51' prior: 50894429 overrides: 16896425!
initialize
	currentTurn := #X.
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	turn := 1! !
!TerniLapilli methodsFor: 'comparing' stamp: 'DB 11/2/2020 03:21:25' prior: 50879232!
isPlayingO
	^turn odd! !
!TerniLapilli methodsFor: 'comparing' stamp: 'DB 11/2/2020 03:21:41' prior: 50879236!
isPlayingX
	^turn even ! !

5 even.!
!TerniLapilli methodsFor: 'comparing' stamp: 'DB 11/2/2020 03:22:18' prior: 50898898!
isPlayingX
	^turn odd.
	
	! !
!TerniLapilli methodsFor: 'comparing' stamp: 'DB 11/2/2020 03:22:22' prior: 50898894!
isPlayingO
	^turn even.! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:22:47' prior: 50896126!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self nextTurn 
	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:23:00' prior: 50896135!
putXAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingO ifTrue: [^self class signalErrorInvalidMoveNotYourTurn ].
	chipsX add: aPoint.
	
	self nextTurn ! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:24:11' prior: 50896378!
moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint

	self isPlayingX ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
	].
	
	self nextTurn 

	
	
	
	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:24:48' prior: 50893148!
assertCorrectTurn: aSourcePoint 

	(chipsX includes: aSourcePoint) ifTrue: [
		self isPlayingX ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		self isPlayingO ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:25:49'!
PASSED!

!classRemoval: #TerniLapilliPlayerX stamp: 'DB 11/2/2020 03:26:02'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayerO stamp: 'DB 11/2/2020 03:26:03'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayer stamp: 'DB 11/2/2020 03:26:03'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayer category: 'Terni Lapilli' stamp: 'DB 11/2/2020 03:27:51'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerX category: 'Terni Lapilli' stamp: 'DB 11/2/2020 03:28:02'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilliPlayerO category: 'Terni Lapilli' stamp: 'DB 11/2/2020 03:28:06'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!
!TerniLapilliPlayer class methodsFor: 'nil' stamp: 'DB 11/2/2020 03:28:33'!
canHandle
	self subclassResponsibility ! !
!TerniLapilliPlayerO class methodsFor: 'nil' stamp: 'DB 11/2/2020 03:28:58' overrides: 50899113!
canHandle
	! !
!TerniLapilliPlayer class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:29:52'!
canHandle: aTerniLapilliPlayer
	self subclassResponsibility ! !
!TerniLapilliPlayerO class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:29:52' overrides: 50899122!
canHandle: aTerniLapilliPlayer
	! !

!methodRemoval: TerniLapilliPlayer class #canHandle stamp: 'DB 11/2/2020 03:29:52'!
canHandle
	self subclassResponsibility !

!methodRemoval: TerniLapilliPlayerO class #canHandle stamp: 'DB 11/2/2020 03:29:52'!
canHandle
	!
!TerniLapilliPlayer class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:30:07' prior: 50899122!
canHandle: aTerniLapilliGame
	self subclassResponsibility ! !
!TerniLapilliPlayerO class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:30:27' prior: 50899128 overrides: 50899140!
canHandle: aTerniLapilliGame

	^aTerniLapilliGame isPlayingO 
	! !
!TerniLapilliPlayerX class methodsFor: 'nil' stamp: 'DB 11/2/2020 03:31:08' overrides: 50899140!
canHandle: aTerniLapilliGame
	^aTerniLapilliGame isPlayingX ! !
!TerniLapilliPlayer class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:31:26'!
for: aTerniLapilliGame
	^self new initializeFor: aTerniLapilliGame ! !
!TerniLapilliPlayer class methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:31:56'!
stateFor: aTerniLapilliGame
	^(self subclasses detect: [:aTerniLapilliPhaseClass | aTerniLapilliPhaseClass canHandle: aTerniLapilliGame ]) for: aTerniLapilliGame.! !

Object subclass: #TerniLapilli
	instanceVariableNames: 'chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classDefinition: #TerniLapilli category: 'Terni Lapilli' stamp: 'DB 11/2/2020 03:32:59'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:33:03'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:33:03'!
PASSED!
!TerniLapilli methodsFor: 'phases' stamp: 'DB 11/2/2020 03:33:39'!
player
	^TerniLapilliPlayer stateFor: self
! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:34:30'!
put: aPoint 

	self player put: aPoint
! !
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'DB 11/2/2020 03:35:10'!
put: aChip
	self subclassResponsibility ! !
!TerniLapilliPlayerO methodsFor: 'nil' stamp: 'DB 11/2/2020 03:35:50' overrides: 50899290!
put: aPosition
	terniLapilliGame putOAt: aPosition
	! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:36:05' prior: 50899290!
put: aPosition
	self subclassResponsibility ! !
!TerniLapilliPlayerX methodsFor: 'nil' stamp: 'DB 11/2/2020 03:36:20' overrides: 50899300!
put: aPosition
	terniLapilliGame putXAt: aPosition
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:36:37'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:36:37'!
PASSED!
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:37:06'!
moveFrom: aSourcePosition to: aDestinationPosition
	self subclassResponsibility ! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:38:00' overrides: 50899409!
moveFrom: aSourcePosition to: aDestinationPosition
	 terniLapilliGame moveFrom: aSourcePosition to: aDestinationPosition ! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:38:17' prior: 50899415 overrides: 50899409!
moveFrom: aSourcePosition to: aDestinationPosition
	 terniLapilliGame moveOFrom: aSourcePosition to: aDestinationPosition ! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:38:35' overrides: 50899409!
moveFrom: aSourcePosition to: aDestinationPosition
	 terniLapilliGame moveXFrom: aSourcePosition to: aDestinationPosition ! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:39:11' prior: 50899295 overrides: 50899300!
put: aPosition
	terniLapilliGame putOAt: aPosition
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:39:28'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:39:28'!
PASSED!
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:40:45' prior: 50898939!
assertCorrectTurn: aSourcePoint 

	self player assertCorrectTurn: aSourcePoint.

	(chipsX includes: aSourcePoint) ifTrue: [
		self isPlayingX ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		self isPlayingO ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !
!TerniLapilliPlayer methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:41:04'!
assertCorrectTurn: aSourcePosition
	self subclassResponsibility ! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:41:21' overrides: 50899556!
assertCorrectTurn: aSourcePosition
	self subclassResponsibility ! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:41:25' overrides: 50899556!
assertCorrectTurn: aSourcePosition
	self subclassResponsibility ! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:41:31' prior: 50899568 overrides: 50899556!
assertCorrectTurn: aSourcePosition
	 ! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:43:44'!
assertCorrectTurnWhenItIsPlayerXsTurn: aSourcePoint 

	self player assertCorrectTurn: aSourcePoint.

	(chipsX includes: aSourcePoint) ifTrue: [
		self isPlayingX ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		self isPlayingO ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:43:48'!
assertCorrectTurnWhenItIsPlayerOsTurn: aSourcePoint 

	self player assertCorrectTurn: aSourcePoint.

	(chipsX includes: aSourcePoint) ifTrue: [
		self isPlayingX ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].

	(chipsO includes: aSourcePoint) ifTrue: [
		self isPlayingO ifFalse: [^self class signalInvalidMoveNotYourTurn ]	
	].! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:44:53' prior: 50899591!
assertCorrectTurnWhenItIsPlayerOsTurn: aSourcePoint 

	(chipsO includes: aSourcePoint) ifFalse: [^self class signalInvalidMoveNotYourTurn ]	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:45:09' prior: 50899578!
assertCorrectTurnWhenItIsPlayerXsTurn: aSourcePoint 

	(chipsX includes: aSourcePoint) ifFalse: [^self class signalInvalidMoveNotYourTurn ]	! !
!TerniLapilli methodsFor: 'assertions' stamp: 'DB 11/2/2020 03:45:15' prior: 50899543!
assertCorrectTurn: aSourcePoint 

	self player assertCorrectTurn: aSourcePoint.
! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:45:20'!
FAILURE!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:45:20'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:45:20'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:45:20'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:45:20'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:45:20'!
ERROR!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:45:20'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:45:23'!
ERROR!
!TerniLapilliPlayer methodsFor: 'nil' stamp: 'DB 11/2/2020 03:46:03'!
initializeFor: aTerniLapilliGame
	terniLapilliGame := aTerniLapilliGame 
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:46:24'!
FAILURE!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:46:24'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:46:24'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:46:24'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:46:26'!
ERROR!
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:47:06' prior: 50899574 overrides: 50899556!
assertCorrectTurn: aSourcePosition
	 terniLapilliGame assertCorrectTurnWhenItIsPlayerXsTurn: aSourcePosition ! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:47:37' prior: 50899562 overrides: 50899556!
assertCorrectTurn: aSourcePosition
	terniLapilliGame assertCorrectTurnWhenItIsPlayerOsTurn: aSourcePosition 
! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:47:40'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:47:40'!
PASSED!
!TerniLapilli methodsFor: 'initialization' stamp: 'DB 11/2/2020 03:48:45' prior: 50898887 overrides: 16896425!
initialize
	chipsX := OrderedCollection new.
	chipsO := OrderedCollection new.
	turn := 1! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:50:30' prior: 50898928!
moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint

	self player move
	
	self nextTurn 

	self isPlayingX ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
	].
	
	self nextTurn 

	
	
	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:51:07' prior: 50892060!
move: aSourcePoint to: aDestinationPoint
	
	self validateMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self player move: aSourcePoint to: aDestinationPoint
	
	self nextTurn 
	
	
	
	
	! !
!TerniLapilliPlayerO methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:52:05' prior: 50899423 overrides: 50899409!
moveFrom: aSourcePosition to: aDestinationPosition
	 terniLapilliGame moveWhenItIsPlayerOsTurn: aSourcePosition to: aDestinationPosition ! !
!TerniLapilliPlayerX methodsFor: 'as yet unclassified' stamp: 'DB 11/2/2020 03:52:33' prior: 50899431 overrides: 50899409!
moveFrom: aSourcePosition to: aDestinationPosition
	  terniLapilliGame moveWhenItIsPlayerXsTurn: aSourcePosition to: aDestinationPosition ! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:53:22'!
moveWhenItIsPlayerOsTurn: aSourcePoint to: aDestinationPoint

	self player move
	
	self nextTurn 

	self isPlayingX ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
	].
	
	self nextTurn 

	
	
	
	! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:53:25'!
moveWhenItIsPlayerXsTurn: aSourcePoint to: aDestinationPoint

	self player move
	
	self nextTurn 

	self isPlayingX ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
	].
	
	self nextTurn 

	
	
	
	! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:53:45' prior: 50900011!
moveWhenItIsPlayerXsTurn: aSourcePoint to: aDestinationPoint

	chipsX remove: aSourcePoint.
	chipsX add: aDestinationPoint.
	
	
	
	
	! !
!TerniLapilli methodsFor: 'private movement' stamp: 'DB 11/2/2020 03:54:00' prior: 50899999!
moveWhenItIsPlayerOsTurn: aSourcePoint to: aDestinationPoint

	chipsO remove: aSourcePoint.
	chipsO add: aDestinationPoint.
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:54:03'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:54:03'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:54:03'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:54:03'!
ERROR!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:54:03'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:54:08'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:54:30'!
ERROR!
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:54:49' prior: 50899973!
move: aSourcePoint to: aDestinationPoint
	
	self validateMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self player move: aSourcePoint to: aDestinationPoint.
	
	self nextTurn 
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:54:51'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:54:52'!
ERROR!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:54:52'!
ERROR!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:54:52'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:54:52'!
ERROR!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:54:52'!
ERROR!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:54:55'!
ERROR!

self player!
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:56:10' prior: 50900146!
move: aSourcePoint to: aDestinationPoint
	
	self validateMovementFrom: aSourcePoint to: aDestinationPoint.
	
	self player moveFrom: aSourcePoint to: aDestinationPoint.
	
	self nextTurn 
	
	
	
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:56:15'!
PASSED!

!methodRemoval: TerniLapilli #moveAndChangeTurnFrom:to: stamp: 'DB 11/2/2020 03:56:22'!
moveAndChangeTurnFrom: aSourcePoint to: aDestinationPoint

	self player move
	
	self nextTurn 

	self isPlayingX ifTrue: [
		chipsX remove: aSourcePoint.
		chipsX add: aDestinationPoint.
	]
	 ifFalse: [
		chipsO remove: aSourcePoint.
		chipsO add: aDestinationPoint.
	].
	
	self nextTurn 

	
	
	
	!
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:57:03'!
putWhenItIsPlayerXsTurn: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self nextTurn 
	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:57:20' prior: 50900379!
putWhenItIsPlayerXsTurn: aPoint 
	chipsO add: aPoint.

	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:57:27'!
putWhenItIsPlayerOsTurn: aPoint 
	chipsO add: aPoint.

	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:57:34' prior: 50900388!
putWhenItIsPlayerXsTurn: aPoint 
	chipsX add: aPoint.

	
	! !
!TerniLapilli methodsFor: 'movement' stamp: 'DB 11/2/2020 03:58:25' prior: 50898910!
putOAt: aPoint 
	
	self assertPositionAndState: aPoint.
	
	self isPlayingX ifTrue: [^	self class signalErrorInvalidMoveNotYourTurn ].
	chipsO add: aPoint.
	
	self nextTurn 
	
	! !

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test14OCantPutChipOutOfBound stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test28CantPutWhileMovingPhase stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

!testRun: #TerniLapilliTest #test29AfterMovingWin stamp: 'DB 11/2/2020 03:58:30'!
PASSED!

----SNAPSHOT----(2 November 2020 03:59:21) CuisUniversity-4384.image priorSource: 18150928!

----QUIT----(2 November 2020 04:00:27) CuisUniversity-4384.image priorSource: 18203514!

----STARTUP---- (2 November 2020 13:59:50) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


!classRemoval: #TerniLapilliPlayerX stamp: 'DB 11/2/2020 13:59:58'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayerO stamp: 'DB 11/2/2020 13:59:58'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayer stamp: 'DB 11/2/2020 13:59:58'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPuttingPhase stamp: 'DB 11/2/2020 13:59:59'!
TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliMovingPhase stamp: 'DB 11/2/2020 13:59:59'!
TerniLapilliPhase subclass: #TerniLapilliMovingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliGameOverPhase stamp: 'DB 11/2/2020 13:59:59'!
TerniLapilliPhase subclass: #TerniLapilliGameOverPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPhase stamp: 'DB 11/2/2020 13:59:59'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilli stamp: 'DB 11/2/2020 14:00:00'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliTest stamp: 'DB 11/2/2020 14:00:00'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/Terni_Lapilli.st----!

!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test14CantPutWhileMovingPhase stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!testRun: #TerniLapilliTest #test28AfterMovingWin stamp: 'DB 11/2/2020 14:01:22'!
PASSED!

!classRemoval: #TerniLapilliPlayerX stamp: 'DB 11/2/2020 14:01:31'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayerO stamp: 'DB 11/2/2020 14:01:32'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayer stamp: 'DB 11/2/2020 14:01:32'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPuttingPhase stamp: 'DB 11/2/2020 14:01:32'!
TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliMovingPhase stamp: 'DB 11/2/2020 14:01:32'!
TerniLapilliPhase subclass: #TerniLapilliMovingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliGameOverPhase stamp: 'DB 11/2/2020 14:01:33'!
TerniLapilliPhase subclass: #TerniLapilliGameOverPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPhase stamp: 'DB 11/2/2020 14:01:33'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilli stamp: 'DB 11/2/2020 14:01:33'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliTest stamp: 'DB 11/2/2020 14:01:34'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/Terni_Lapilli.st----!

!classRemoval: #TerniLapilliPlayerX stamp: 'DB 11/2/2020 14:08:38'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayerO stamp: 'DB 11/2/2020 14:08:39'!
TerniLapilliPlayer subclass: #TerniLapilliPlayerO
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPlayer stamp: 'DB 11/2/2020 14:08:39'!
Object subclass: #TerniLapilliPlayer
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPuttingPhase stamp: 'DB 11/2/2020 14:08:39'!
TerniLapilliPhase subclass: #TerniLapilliPuttingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliMovingPhase stamp: 'DB 11/2/2020 14:08:39'!
TerniLapilliPhase subclass: #TerniLapilliMovingPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliGameOverPhase stamp: 'DB 11/2/2020 14:08:40'!
TerniLapilliPhase subclass: #TerniLapilliGameOverPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliPhase stamp: 'DB 11/2/2020 14:08:40'!
Object subclass: #TerniLapilliPhase
	instanceVariableNames: 'terniLapilliGame'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilli stamp: 'DB 11/2/2020 14:08:40'!
Object subclass: #TerniLapilli
	instanceVariableNames: 'chipsX chipsO turn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

!classRemoval: #TerniLapilliTest stamp: 'DB 11/2/2020 14:08:41'!
TestCase subclass: #TerniLapilliTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Terni Lapilli'!

----End fileIn of /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/Terni_Lapilli.st----!
!TerniLapilliTest methodsFor: 'Tests' stamp: 'DB 11/2/2020 14:11:09' prior: 50903674!
test14CantPutWhileMovingPhase
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@1)with: (0@0) with: (1@2)with: (2@1) with: (1@1)with: (2@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .	
	newTerniLapilliGame move: (1@1) to: (1@0).
	
	self assert: newTerniLapilliGame isMovingPhase.
			
	self   should: [newTerniLapilliGame putOAt: (2@0)] 
		 raise: Error 
		 withMessageText: TerniLapilli cantPutIfInMovingPhase.
		
! !
!TerniLapilliTest methodsFor: 'Tests' stamp: 'DB 11/2/2020 14:11:30' prior: 50903792!
test20assertPlayerOWonHorizontally
	|newTerniLapilliGame aCollectionOfPositions|
	newTerniLapilliGame := TerniLapilli new.
	aCollectionOfPositions := OrderedCollection with: (0@0) with: (1@1) with: (0@1) with:(1@0) with:(2@0) with:(1@2).
	self fillBoardWith6Positions: aCollectionOfPositions in: newTerniLapilliGame .
	self assert: newTerniLapilliGame hasPlayerOWon.
	self deny: newTerniLapilliGame hasPlayerXWon.
	! !
!TerniLapilli methodsFor: 'comparing' stamp: 'DB 11/2/2020 14:12:51' prior: 50904197!
isBoardFull
	^(chipsX size = 3) and: (chipsO size = 3)! !

----QUIT----(2 November 2020 14:14:54) CuisUniversity-4384.image priorSource: 18203607!

----STARTUP---- (2 November 2020 14:15:05) as /Users/dbenitez/uba/2c2020-IS1/Quiz/macos64-MarsRover/CuisUniversity-4384.image!


!testRun: #TerniLapilliTest #test01assertOnStartItsPlayerXTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test02assertAfterXTurnGoesO stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test03assertPlayerOCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test04assertPlayerOCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test05CantPutChipOutOfBound stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test06assertPlayerXCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test07assertPlayerOCantPutChipWhenAllChipsHaveBeenPut stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test08assertPlayerXCantPutChipIfItIsntItsTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test09assertPlayerXCantPutChipOnAnOccupiedSlot stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test10assertCantMoveMoreThanOnePositionAtATime stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test11assertCantDoInvalidDiagonalMovement stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test12assertCantMoveAnEmptyPosition stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test13assertCantMoveOutOfBounds stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test14CantPutWhileMovingPhase stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test15CantMoveIfIsNotYourTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test16CantMoveIfNotAllChipHaveBeenPutDown stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test17InMovementPhasePlayerXStartsThenItIsPlayerOTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test18assertCorrectVerticalAndHorizontalMovementAsWellAsCorrectlyPassingTurn stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test19assertPlayerXWonHorizontally stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test20assertPlayerOWonHorizontally stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test21CantWinHorizontalWithLessThanThreeChips stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test22CantWinVerticalWithLessThanThreeChips stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test23assertPlayerXWonVertically stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test24assertPlayerOWonVertically stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test25XWinsDiagonally stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test26OWinsDiagonally stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test27GameDoesNotContinueAfterWinningInPutingPhase stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

!testRun: #TerniLapilliTest #test28AfterMovingWin stamp: 'DB 11/2/2020 14:15:09'!
PASSED!

----QUIT----(2 November 2020 14:15:14) CuisUniversity-4384.image priorSource: 18337817!